//
//  NSObject.cs
//
//  Authors
//    - C.J. Collier, Collier Technologies, <cjcollier@colliertech.org>
//    - Urs C. Muff, Quark Inc., <umuff@quark.com>
//    - Kangaroo, Geoff Norton
//    - Adham Findlay
//
//  Copyright (c) 2004 Quark Inc. and Collier Technologies.  All rights reserved.
//
//	$Header: /home/miguel/third-conversion/public/cocoa-sharp/generator/custom/Foundation/NSObject.addin,v 1.17 2004/07/01 20:18:45 gnorton Exp $
//

		public static object NS2Net(IntPtr raw) {
			return TypeConverter.NS2Net(raw);
		}
		
		public static IntPtr Net2NS(object obj) {
			return TypeConverter.Net2NS(obj);
		}
	
		private IntPtr _obj;
		private BridgeDelegate _delegate;
		protected bool _release;
		
		public static IDictionary Objects = new Hashtable();
		static IDictionary NSClasses = new Hashtable();

		#region -- Glue --
		[DllImport("/System/Library/Frameworks/Foundation.framework/Foundation")]
		protected internal static extern IntPtr /*Method*/ class_getInstanceMethod(IntPtr /*Class*/ aClass, IntPtr /*SEL*/ aSelector);

		[DllImport("Glue")]
		protected internal static extern IntPtr /*(NSMethodSignature *)*/ MakeMethodSignature(string types);

		[DllImport("Glue")]
		protected static extern IntPtr /*(Class)*/ CreateClassDefinition(string name, string superclassName, int nummethods, IntPtr[] methods, IntPtr[] signatures);

		[DllImport("Glue")]
		protected static extern IntPtr /*(id)*/ DotNetForwarding_initWithManagedDelegate(IntPtr THIS, BridgeDelegate managedDelegate);
		[DllImport("Glue")]
		static extern void setConstructorDelegate(ConstructorDelegate aDelegate);
		#endregion

		protected enum GlueDelegateWhat {
			methodSignatureForSelector = 0,
			forwardInvocation = 1,
		}

		protected delegate IntPtr BridgeDelegate(GlueDelegateWhat what,IntPtr /*(NSInvocation*)*/ invocation);

		protected static IntPtr /*(Class)*/ NSRegisterClass(Type type) {
			ObjCClassRepresentation r = BridgeHelper.GenerateObjCRepresentation(type);
			IntPtr retval = IntPtr.Zero;

			IntPtr[] methods = new IntPtr[r.NumMethods];
			IntPtr[] signatures = new IntPtr[r.NumMethods];

			for(int i = 0; i < r.NumMethods; i++) {
				methods[i] = Marshal.StringToCoTaskMemAnsi(r.Methods[i]);
				signatures[i] = Marshal.StringToCoTaskMemAnsi(r.Signatures[i]);
			}
			retval = CreateClassDefinition(type.Name, type.BaseType.Name, r.NumMethods, methods, signatures); 
			for(int i = 0; i < r.NumMethods; i++) {
				Marshal.FreeCoTaskMem(methods[i]);
				Marshal.FreeCoTaskMem(signatures[i]);
			}
			return retval;
		}

		protected IntPtr MethodInvoker(GlueDelegateWhat what,IntPtr arg) {
			switch (what) {
				case GlueDelegateWhat.methodSignatureForSelector:
					return MakeMethodSignature(BridgeHelper.GenerateMethodSignature(this.GetType(), NSString.FromSEL(arg).ToString()));
				case GlueDelegateWhat.forwardInvocation:
				{
					NSInvocation invocation = (NSInvocation)NS2Net(arg);
					object[] args = BridgeHelper.ProcessInvocation(this.GetType(),invocation);
					
					invocation.returnValue = BridgeHelper.InvokeMethodByObject(this, invocation.selector, args);
					break;
				}
			}
			return IntPtr.Zero;
		}

		~NSObject() {
			// this will leak memory, but we have to synchronize managed and objc runtime
#if true || RELEASE_MEM
			if (Raw != IntPtr.Zero && _release) {
Console.WriteLine("DEBUG: ~{0}: ptr=0x{1,8:x}", this.GetType().Name, (int) Raw);
				release();
			}
#endif
			SetRaw(IntPtr.Zero,false);
		}

		public NSObject() {
			Type myType = this.GetType();
			IntPtr cls = IntPtr.Zero;
			if (!NSClasses.Contains(myType)) {
				cls = Apple.Foundation.Class.Get(myType.Name);
				if (cls == IntPtr.Zero)
					cls = NSRegisterClass(myType);
				
				NSClasses[myType] = cls;
				
				TypeConverter.Name2Type[myType.Name] = myType;
			}
			else
				cls = (IntPtr)NSClasses[myType];

			SetRaw(NSObject__alloc0(cls),true);
			if (class_getInstanceMethod(cls, NSString.NSSelector("initWithManagedDelegate:")) != IntPtr.Zero) {
				_delegate = new BridgeDelegate(this.MethodInvoker);
				SetRaw(DotNetForwarding_initWithManagedDelegate(Raw,_delegate),_release);
			}
		}

		public NSObject(IntPtr objcraw) {
			Type myType = this.GetType();
			IntPtr cls = IntPtr.Zero;
			if (!NSClasses.Contains(myType)) {
                                cls = Apple.Foundation.Class.Get(myType.Name);
                                if (cls == IntPtr.Zero)
                                        cls = NSRegisterClass(myType);
                                
                                NSClasses[myType] = cls;
                                
                                TypeConverter.Name2Type[myType.Name] = myType;
                        }
                        else
                                cls = (IntPtr)NSClasses[myType];
			SetRaw(objcraw, true);
			if (class_getInstanceMethod(cls, NSString.NSSelector("initWithManagedDelegate:")) != IntPtr.Zero) {
                                _delegate = new BridgeDelegate(this.MethodInvoker);
                                SetRaw(DotNetForwarding_initWithManagedDelegate(Raw,_delegate),_release);
                        }

		}
		protected internal NSObject(IntPtr raw,bool release) {
			SetRaw(raw,release);
		}

		public IntPtr Raw {
			get { return _obj; }
		}

		public void SetRaw(IntPtr raw,bool release) {
			if (raw == _obj)
				return;

//Console.WriteLine("DEBUG: Change Raw for {0}[{1}]: 0x{2,8:x} -> 0x{3,8:x}", this.GetType().Name, release, (int) _obj, (int) raw);
			if (_release && _obj != IntPtr.Zero)
				lock (Objects) {
Console.WriteLine("DEBUG: Remove Raw for {0}: ptr=0x{1,8:x}", this.GetType().Name, (int) _obj);
					Objects.Remove(_obj);
				}

			_obj = raw;
			_release = release;

			if (_release && _obj != IntPtr.Zero)
				lock (Objects) {
Console.WriteLine("DEBUG: Add Raw for {0}: ptr=0x{1,8:x}", this.GetType().Name, (int) _obj);
					Objects.Add(_obj, new WeakReference(this));
				}
		}

		public string ClassName {
			get { return Marshal.PtrToStringAnsi(TypeConverter.GetObjectClassName(Raw)); }
		}

		#region -- Constructor Delegate --
		
		static ConstructorDelegate cDelegate;
		delegate void ConstructorDelegate (IntPtr objcRaw, String aClass);

		public static void ConstructClass(IntPtr objcRaw, String aClass) {
			Console.WriteLine("ObjC asked us to make {0}", aClass);
			NSObject ourManagedClass = new NSObject(objcRaw);
			return;
		}
		static NSObject() {
			cDelegate = new ConstructorDelegate(ConstructClass);
			setConstructorDelegate(cDelegate);
		}	

		#endregion

//***************************************************************************
//
// $Log: NSObject.addin,v $
// Revision 1.17  2004/07/01 20:18:45  gnorton
// Initial NIB callback loading support (incomplete)
//
// Revision 1.16  2004/07/01 20:09:57  urs
// Fix GC issues
//
// Revision 1.15  2004/07/01 16:01:41  urs
// Fix some GC issues, but mostly just do stuff more explicit
// Still not working with GC on
//
// Revision 1.14  2004/06/30 19:29:23  urs
// Cleanup
//
// Revision 1.13  2004/06/30 16:51:00  urs
// Making monodoc happy
//
// Revision 1.12  2004/06/29 20:32:05  urs
// More cleanup
//
// Revision 1.11  2004/06/29 18:28:46  gnorton
// Remove the ptr from the hashtable when we're DToring it.
// Remove some debugging WriteLines from NSO
//
// Revision 1.10  2004/06/29 18:11:07  gnorton
// Support dereferencing our WeakReference to return the real object; not make a new one
//
// Revision 1.9  2004/06/29 16:42:34  gnorton
// Much better signature generator
//
// Revision 1.8  2004/06/29 15:24:25  gnorton
// Better support for different argument type (PtrTrStructure/StructureToPtr/SizeOf usage)
//
// Revision 1.7  2004/06/29 13:35:52  urs
// make tree green again, I like green :)
//
// Revision 1.6  2004/06/28 19:18:31  urs
// Implement latest name bindings changes, and using objective-c reflection to see is a type is a OC class
//
// Revision 1.5  2004/06/27 20:41:45  gnorton
// Support for NSBrowser and int args/rets
//
// Revision 1.4  2004/06/26 06:52:32  urs
// Remove hardcoding in TypeConvertor, and autoregister new classes
//
// Revision 1.3  2004/06/24 20:02:35  urs
// Fix string issues
//
// Revision 1.2  2004/06/24 06:29:36  gnorton
// Make foundation compile.
//
// Revision 1.1  2004/06/24 03:47:30  urs
// initial custom stuff
//
// Revision 1.19  2004/06/23 17:55:46  urs
// Make test compile with the lasted glue API name change
//
// Revision 1.18  2004/06/20 02:07:25  urs
// Clean up, move Apple.Tools into Foundation since it will need it
// No need to allocate memory for getArgumentAtIndex of NSInvocation
//
// Revision 1.17  2004/06/19 20:42:59  gnorton
// Code cleanup (remove some old methods/clean some console.writelines)
// Modify NS2Net and NSObject destructor to be able to FreeCoTaskMem that we allocate in our argument parser.
//
// Revision 1.16  2004/06/19 17:19:27  gnorton
// Broken API fixes.
// Delegates and methods with multi-argument support working.
// Argument parsing and casting working for all our known classes.
//
// Revision 1.15  2004/06/18 20:13:00  gnorton
// Support for multi-argument method signatures/calling in .Net
//
// Revision 1.14  2004/06/18 03:42:45  gnorton
// Doesn't need to be unsafe anymore because we can pass IntPtr[] and have it become char ** nicely after our conversion; we still clean up the managed memory tho
//
// Revision 1.13  2004/06/17 16:10:45  gnorton
// Cleanup
//
// Revision 1.12  2004/06/17 15:58:07  urs
// Public API cleanup, making properties and using .Net types rather then NS*
//
// Revision 1.11  2004/06/17 13:06:27  urs
// - release cleanup: only call release when requested
// - loader cleanup
//
// Revision 1.10  2004/06/17 05:48:00  gnorton
// Modified to move non apple stuff out of NSObject
//
// Revision 1.9  2004/06/16 12:20:27  urs
// Add CVS headers comments, authors and Copyright info, feel free to add your name or change what is appropriate
//
//***************************************************************************
