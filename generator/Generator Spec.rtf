{\rtf1\mac\ansicpg10000\cocoartf102
{\fonttbl\f0\froman\fcharset77 Times-Roman;\f1\froman\fcharset77 Times-Bold;}
{\colortbl;\red255\green255\blue255;}
\margl1440\margr1440\vieww11480\viewh9180\viewkind0
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\qc

\f0\fs24 \cf0 Specification of Cocoa# Code Genearation tool\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf0 \
\'ca\
\

\f1\b Overview:
\f0\b0 \
\
\'ca\
\

\f1\b\fs48 The Framework Header Parser
\f0\b0\fs24 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\qc
\cf0 \'ca\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf0 \
The Framework Header Parser (FHP) traverses the .h files in a select set of directories under /Library/Framework.\'caThe generator uses these headers as a basis for the code it generates.\'caFrom these headers, it constructs data structures that represent the interface into the Cocoa framework.\
\
\'ca\
\

\f1\b\fs48 Objective C Wrapper Implementation Generator
\f0\b0\fs24 \
\
\'ca\
\
The Objective C Wrapper Implementation Generator (ObjC Gen) generates functions with vanilla C names from the data structure gleaned from the FHP.\'ca\'caThese functions are thin wrappers around Objective C class and object method calls.\
\
\'ca\
\

\f1\b\fs48 C# Wrapper Generator
\f0\b0\fs24 \
\
\'ca\
\
The C# Wrapper Generator (C# Gen) generates C# classes from the data structures gleaned by the FHP.\'caThese C# classes are analogous to the Objective C classes which are being wrapped.\'caThe C# wrappers use .NET\'d5s DllImport to link against the libraries created by the ObjC Gen.\
\
\'ca\
\
\'ca\
\

\f1\b Implementation:
\f0\b0 \
\

\f1\b \'ca
\f0\b0 \
\

\f1\b\fs36 FHP
\f0\b0\fs24 \
\
\'ca\
\
\pard\tx720\tx1280\tx1840\tx2400\tx2960\tx3520\tx4080\tx4640\tx5200\tx5760\tx6320\tx6880\tx7440\li720\fi-260\ql\qnatural
\cf0 \'a5 	The FHP loads the entire header\
\'a5 	Removes comments\
\'a5 	Traverses #import preprocessor directives (recursive)\
\'a5 	Processes the header as a stream, matching and acting on regular expressions\
\'a5 	Creates a database of interfaces, protocols, categories\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf0 \
\'ca\
\

\f1\b\fs36 ObjC Gen Output
\f0\b0\fs24 \
\
\'ca\
\
For each interface, the generator creates an .m file that contains function names that correspond to an interface\'d5s methods.\'caThey might look like this, for example:\
\
\'ca\
\
void ClassName__Methodpart0_part1(Type0 arg0, Type1 arg1)\{\
\
\'ca\'ca\'ca\'ca\'ca\'ca\'ca\'ca\'ca\'ca\'caNSLog(@"Methodpart0_part1: %@\\n", THIS);\
\
\'ca\'ca\'ca\'ca\'ca\'ca\'ca\'ca\'ca\'ca\'ca[THIS Methodpart0:arg0 part1:arg1];\
\
\}\
\
\'ca\
\
Objective C method names are split into their parts.\'caThe above method was originally a class-level method of the 
\f1\b ClassName
\f0\b0 class and was called
\f1\b  Methodpart0:part1
\f0\b0 .\
\
\'ca\
\
Since C function names can not contain : characters, and none of the methods in the Foundation classes being processed contain _ characters, ObjC Gen concatenates the parts of the method name together with _ characters, which C function names may contain.\
\
\'ca\
\
C knows nothing about classes and is notorious for its ability to allow any part of a program to step on another part\'d5s namespace.\'ca\'caBecause of this, ObjC Gen embeds the class name into the function name.\'caThis is the first part of the function names that ObjC Gen creates and drops into .m files.\
\
\'ca\
\
Objective C allows for both class methods and instance methods.\'caThe analogy in C# is static methods (class methods) vs non-static methods (instance methods).\'caObjC also allows a class to have a class-level function with the same name as an instance function.\'caTo distinguish between the two, ObjC Gen uses two _ characters to separate the class name from a class-level method and one _ character to separate instance-level methods from the method name.\
\
\'ca\
\
\'ca\
\
}