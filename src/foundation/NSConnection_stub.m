/* Generated by genstubs.pl
 (c) 2004 kangaroo
*/

#include <Cocoa/Cocoa.h>

#include <Foundation/NSObject.h>

#include <Foundation/NSDate.h>

NSDictionary * NSConnection_statistics (NSConnection* THIS) {
	NSLog(@"NSConnection_statistics");
	return [THIS statistics];
}
NSArray * NSConnection_allConnections (NSConnection* THIS) {
	NSLog(@"NSConnection_allConnections");
	return [THIS allConnections];
}
NSConnection * NSConnection_defaultConnection (NSConnection* THIS) {
	NSLog(@"NSConnection_defaultConnection");
	return [THIS defaultConnection];
}
NSConnection * NSConnection_connectionWithRegisteredName_host (NSConnection* THIS, NSString * name, NSString * hostName) {
	NSLog(@"NSConnection_connectionWithRegisteredName_host");
	return [THIS connectionWithRegisteredName:name host:hostName];
}

NSConnection * NSConnection_connectionWithRegisteredName_host_usingNameServer (NSConnection* THIS, NSString * name, NSString * hostName, NSPortNameServer * server) {
	NSLog(@"NSConnection_connectionWithRegisteredName_host_usingNameServer");
	return [THIS connectionWithRegisteredName:name host:hostName usingNameServer:server];
}

NSDistantObject * NSConnection_rootProxyForConnectionWithRegisteredName_host (NSConnection* THIS, NSString * name, NSString * hostName) {
	NSLog(@"NSConnection_rootProxyForConnectionWithRegisteredName_host");
	return [THIS rootProxyForConnectionWithRegisteredName:name host:hostName];
}

NSDistantObject * NSConnection_rootProxyForConnectionWithRegisteredName_host_usingNameServer (NSConnection* THIS, NSString * name, NSString * hostName, NSPortNameServer * server) {
	NSLog(@"NSConnection_rootProxyForConnectionWithRegisteredName_host_usingNameServer");
	return [THIS rootProxyForConnectionWithRegisteredName:name host:hostName usingNameServer:server];
}

void NSConnection_setRequestTimeout (NSConnection* THIS, NSTimeInterval ti) {
	NSLog(@"NSConnection_setRequestTimeout");
	[THIS setRequestTimeout:ti];
}

NSTimeInterval NSConnection_requestTimeout (NSConnection* THIS) {
	NSLog(@"NSConnection_requestTimeout");
	return [THIS requestTimeout];
}
void NSConnection_setReplyTimeout (NSConnection* THIS, NSTimeInterval ti) {
	NSLog(@"NSConnection_setReplyTimeout");
	[THIS setReplyTimeout:ti];
}

NSTimeInterval NSConnection_replyTimeout (NSConnection* THIS) {
	NSLog(@"NSConnection_replyTimeout");
	return [THIS replyTimeout];
}
void NSConnection_setRootObject (NSConnection* THIS, NSConnection * anObject) {
	NSLog(@"NSConnection_setRootObject");
	[THIS setRootObject:anObject];
}

NSConnection * NSConnection_rootObject (NSConnection* THIS) {
	NSLog(@"NSConnection_rootObject");
	return [THIS rootObject];
}
NSDistantObject * NSConnection_rootProxy (NSConnection* THIS) {
	NSLog(@"NSConnection_rootProxy");
	return [THIS rootProxy];
}
void NSConnection_setDelegate (NSConnection* THIS, NSConnection * anObject) {
	NSLog(@"NSConnection_setDelegate");
	[THIS setDelegate:anObject];
}

NSConnection * NSConnection_delegate (NSConnection* THIS) {
	NSLog(@"NSConnection_delegate");
	return [THIS delegate];
}
void NSConnection_setIndependentConversationQueueing (NSConnection* THIS, BOOL yorn) {
	NSLog(@"NSConnection_setIndependentConversationQueueing");
	[THIS setIndependentConversationQueueing:yorn];
}

BOOL NSConnection_independentConversationQueueing (NSConnection* THIS) {
	NSLog(@"NSConnection_independentConversationQueueing");
	return [THIS independentConversationQueueing];
}
BOOL NSConnection_isValid (NSConnection* THIS) {
	NSLog(@"NSConnection_isValid");
	return [THIS isValid];
}
void NSConnection_invalidate (NSConnection* THIS) {
	NSLog(@"NSConnection_invalidate");
	[THIS invalidate];
}
void NSConnection_addRequestMode (NSConnection* THIS, NSString * rmode) {
	NSLog(@"NSConnection_addRequestMode");
	[THIS addRequestMode:rmode];
}

void NSConnection_removeRequestMode (NSConnection* THIS, NSString * rmode) {
	NSLog(@"NSConnection_removeRequestMode");
	[THIS removeRequestMode:rmode];
}

NSArray * NSConnection_requestModes (NSConnection* THIS) {
	NSLog(@"NSConnection_requestModes");
	return [THIS requestModes];
}
BOOL NSConnection_registerName (NSConnection* THIS, NSString *  name) {
	NSLog(@"NSConnection_registerName");
	return [THIS registerName: name];
}

BOOL NSConnection_registerName_withNameServer (NSConnection* THIS, NSString *  name, NSPortNameServer * server) {
	NSLog(@"NSConnection_registerName_withNameServer");
	return [THIS registerName: name withNameServer:server];
}

NSConnection * NSConnection_connectionWithReceivePort_sendPort (NSConnection* THIS, NSPort * receivePort, NSPort * sendPort) {
	NSLog(@"NSConnection_connectionWithReceivePort_sendPort");
	return [THIS connectionWithReceivePort:receivePort sendPort:sendPort];
}

NSConnection * NSConnection_currentConversation (NSConnection* THIS) {
	NSLog(@"NSConnection_currentConversation");
	return [THIS currentConversation];
}
NSConnection * NSConnection_initWithReceivePort_sendPort (NSConnection* THIS, NSPort * receivePort, NSPort * sendPort) {
	NSLog(@"NSConnection_initWithReceivePort_sendPort");
	return [THIS initWithReceivePort:receivePort sendPort:sendPort];
}

NSPort * NSConnection_sendPort (NSConnection* THIS) {
	NSLog(@"NSConnection_sendPort");
	return [THIS sendPort];
}
NSPort * NSConnection_receivePort (NSConnection* THIS) {
	NSLog(@"NSConnection_receivePort");
	return [THIS receivePort];
}
void NSConnection_enableMultipleThreads (NSConnection* THIS) {
	NSLog(@"NSConnection_enableMultipleThreads");
	[THIS enableMultipleThreads];
}
BOOL NSConnection_multipleThreadsEnabled (NSConnection* THIS) {
	NSLog(@"NSConnection_multipleThreadsEnabled");
	return [THIS multipleThreadsEnabled];
}
void NSConnection_addRunLoop (NSConnection* THIS, NSRunLoop * runloop) {
	NSLog(@"NSConnection_addRunLoop");
	[THIS addRunLoop:runloop];
}

void NSConnection_removeRunLoop (NSConnection* THIS, NSRunLoop * runloop) {
	NSLog(@"NSConnection_removeRunLoop");
	[THIS removeRunLoop:runloop];
}

void NSConnection_runInNewThread (NSConnection* THIS) {
	NSLog(@"NSConnection_runInNewThread");
	[THIS runInNewThread];
}
NSArray * NSConnection_remoteObjects (NSConnection* THIS) {
	NSLog(@"NSConnection_remoteObjects");
	return [THIS remoteObjects];
}
NSArray * NSConnection_localObjects (NSConnection* THIS) {
	NSLog(@"NSConnection_localObjects");
	return [THIS localObjects];
}
BOOL NSConnection_makeNewConnection_sender (NSConnection* THIS, NSConnection * conn, NSConnection * ancestor) {
	NSLog(@"NSConnection_makeNewConnection_sender");
	return [THIS makeNewConnection:conn sender:ancestor];
}

BOOL NSConnection_connection_shouldMakeNewConnection (NSConnection* THIS, NSConnection * ancestor, NSConnection * conn) {
	NSLog(@"NSConnection_connection_shouldMakeNewConnection");
	return [THIS connection:ancestor shouldMakeNewConnection:conn];
}

NSData * NSConnection_authenticationDataForComponents (NSConnection* THIS, NSArray * components) {
	NSLog(@"NSConnection_authenticationDataForComponents");
	return [THIS authenticationDataForComponents:components];
}

BOOL NSConnection_authenticateComponents_withData (NSConnection* THIS, NSArray * components, NSData * signature) {
	NSLog(@"NSConnection_authenticateComponents_withData");
	return [THIS authenticateComponents:components withData:signature];
}

NSConnection * NSConnection_createConversationForConnection (NSConnection* THIS, NSConnection * conn) {
	NSLog(@"NSConnection_createConversationForConnection");
	return [THIS createConversationForConnection:conn];
}

NSInvocation * NSConnection_invocation (NSConnection* THIS) {
	NSLog(@"NSConnection_invocation");
	return [THIS invocation];
}
NSConnection * NSConnection_connection (NSConnection* THIS) {
	NSLog(@"NSConnection_connection");
	return [THIS connection];
}
NSConnection * NSConnection_conversation (NSConnection* THIS) {
	NSLog(@"NSConnection_conversation");
	return [THIS conversation];
}
void NSConnection_replyWithException (NSConnection* THIS, NSException * exception) {
	NSLog(@"NSConnection_replyWithException");
	[THIS replyWithException:exception];
}

BOOL NSConnection_connection_handleRequest (NSConnection* THIS, NSConnection * connection, NSDistantObjectRequest * doreq) {
	NSLog(@"NSConnection_connection_handleRequest");
	return [THIS connection:connection handleRequest:doreq];
}

NSConnection * NSConnection_alloc() {
	NSLog(@"NSConnection_alloc()");
	return [NSConnection alloc];
}
