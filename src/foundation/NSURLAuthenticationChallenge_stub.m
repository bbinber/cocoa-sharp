/* Generated by genstubs.pl
 (c) 2004 kangaroo
*/

#include <Cocoa/Cocoa.h>

#include <AvailabilityMacros.h>

#include <Foundation/NSObject.h>

void NSURLAuthenticationChallenge_useCredential_forAuthenticationChallenge (NSURLAuthenticationChallenge* THIS, NSURLCredential * credential, NSURLAuthenticationChallenge * challenge) {
	NSLog(@"NSURLAuthenticationChallenge_useCredential_forAuthenticationChallenge");
	[THIS useCredential:credential forAuthenticationChallenge:challenge];
}

void NSURLAuthenticationChallenge_continueWithoutCredentialForAuthenticationChallenge (NSURLAuthenticationChallenge* THIS, NSURLAuthenticationChallenge * challenge) {
	NSLog(@"NSURLAuthenticationChallenge_continueWithoutCredentialForAuthenticationChallenge");
	[THIS continueWithoutCredentialForAuthenticationChallenge:challenge];
}

void NSURLAuthenticationChallenge_cancelAuthenticationChallenge (NSURLAuthenticationChallenge* THIS, NSURLAuthenticationChallenge * challenge) {
	NSLog(@"NSURLAuthenticationChallenge_cancelAuthenticationChallenge");
	[THIS cancelAuthenticationChallenge:challenge];
}

/* UNSUPPORTED: 
- (id)initWithProtectionSpace:(NSURLProtectionSpace *)space proposedCredential:(NSURLCredential *)credential previousFailureCount:(int)previousFailureCount failureResponse:(NSURLResponse *)response error:(NSError *)error sender:(id<NSURLAuthenticationChallengeSender>)sender;
 */

/* UNSUPPORTED: 
- (id)initWithAuthenticationChallenge:(NSURLAuthenticationChallenge *)challenge sender:(id<NSURLAuthenticationChallengeSender>)sender;
 */

NSURLProtectionSpace * NSURLAuthenticationChallenge_protectionSpace (NSURLAuthenticationChallenge* THIS) {
	NSLog(@"NSURLAuthenticationChallenge_protectionSpace");
	return [THIS protectionSpace];
}
NSURLCredential * NSURLAuthenticationChallenge_proposedCredential (NSURLAuthenticationChallenge* THIS) {
	NSLog(@"NSURLAuthenticationChallenge_proposedCredential");
	return [THIS proposedCredential];
}
int NSURLAuthenticationChallenge_previousFailureCount (NSURLAuthenticationChallenge* THIS) {
	NSLog(@"NSURLAuthenticationChallenge_previousFailureCount");
	return [THIS previousFailureCount];
}
NSURLResponse * NSURLAuthenticationChallenge_failureResponse (NSURLAuthenticationChallenge* THIS) {
	NSLog(@"NSURLAuthenticationChallenge_failureResponse");
	return [THIS failureResponse];
}
NSError * NSURLAuthenticationChallenge_error (NSURLAuthenticationChallenge* THIS) {
	NSLog(@"NSURLAuthenticationChallenge_error");
	return [THIS error];
}
/* UNSUPPORTED: 
- (id<NSURLAuthenticationChallengeSender>)sender;
 */

NSURLAuthenticationChallenge * NSURLAuthenticationChallenge_alloc() {
	NSLog(@"NSURLAuthenticationChallenge_alloc()");
	return [NSURLAuthenticationChallenge alloc];
}
