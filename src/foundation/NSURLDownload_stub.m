/* Generated by genstubs.pl
 * (c) 2004 kangaroo, C.J. and Urs
 */

#include <Cocoa/Cocoa.h>

#include <AvailabilityMacros.h>
#include <Foundation/NSObject.h>

NSURLDownload * NSURLDownload_initWithRequest_delegate (NSURLDownload* THIS, NSURLRequest * request, id delegate) {
	NSLog(@"NSURLDownload_initWithRequest_delegate");
	return [THIS initWithRequest:request delegate:delegate];
}

void NSURLDownload_cancel (NSURLDownload* THIS) {
	NSLog(@"NSURLDownload_cancel");
	[THIS cancel];
}

void NSURLDownload_setDestination_allowOverwrite (NSURLDownload* THIS, NSString * path, BOOL allowOverwrite) {
	NSLog(@"NSURLDownload_setDestination_allowOverwrite");
	[THIS setDestination:path allowOverwrite:allowOverwrite];
}

NSURLRequest * NSURLDownload_request (NSURLDownload* THIS) {
	NSLog(@"NSURLDownload_request");
	return [THIS request];
}

void NSURLDownload_downloadDidBegin (NSURLDownload* THIS, NSURLDownload * download) {
	NSLog(@"NSURLDownload_downloadDidBegin");
	[THIS downloadDidBegin:download];
}

NSURLRequest * NSURLDownload_download_willSendRequest_redirectResponse (NSURLDownload* THIS, NSURLDownload * download, NSURLRequest * request, NSURLResponse * redirectResponse) {
	NSLog(@"NSURLDownload_download_willSendRequest_redirectResponse");
	return [THIS download:download willSendRequest:request redirectResponse:redirectResponse];
}

void NSURLDownload_download_didReceiveAuthenticationChallenge (NSURLDownload* THIS, NSURLDownload * download, NSURLAuthenticationChallenge * challenge) {
	NSLog(@"NSURLDownload_download_didReceiveAuthenticationChallenge");
	[THIS download:download didReceiveAuthenticationChallenge:challenge];
}

void NSURLDownload_download_didCancelAuthenticationChallenge (NSURLDownload* THIS, NSURLDownload * download, NSURLAuthenticationChallenge * challenge) {
	NSLog(@"NSURLDownload_download_didCancelAuthenticationChallenge");
	[THIS download:download didCancelAuthenticationChallenge:challenge];
}

void NSURLDownload_download_didReceiveResponse (NSURLDownload* THIS, NSURLDownload * download, NSURLResponse * response) {
	NSLog(@"NSURLDownload_download_didReceiveResponse");
	[THIS download:download didReceiveResponse:response];
}

void NSURLDownload_download_didReceiveDataOfLength (NSURLDownload* THIS, NSURLDownload * download, unsigned length) {
	NSLog(@"NSURLDownload_download_didReceiveDataOfLength");
	[THIS download:download didReceiveDataOfLength:length];
}

BOOL NSURLDownload_download_shouldDecodeSourceDataOfMIMEType (NSURLDownload* THIS, NSURLDownload * download, NSString * encodingType) {
	NSLog(@"NSURLDownload_download_shouldDecodeSourceDataOfMIMEType");
	return [THIS download:download shouldDecodeSourceDataOfMIMEType:encodingType];
}

void NSURLDownload_download_decideDestinationWithSuggestedFilename (NSURLDownload* THIS, NSURLDownload * download, NSString * filename) {
	NSLog(@"NSURLDownload_download_decideDestinationWithSuggestedFilename");
	[THIS download:download decideDestinationWithSuggestedFilename:filename];
}

void NSURLDownload_download_didCreateDestination (NSURLDownload* THIS, NSURLDownload * download, NSString * path) {
	NSLog(@"NSURLDownload_download_didCreateDestination");
	[THIS download:download didCreateDestination:path];
}

void NSURLDownload_downloadDidFinish (NSURLDownload* THIS, NSURLDownload * download) {
	NSLog(@"NSURLDownload_downloadDidFinish");
	[THIS downloadDidFinish:download];
}

void NSURLDownload_download_didFailWithError (NSURLDownload* THIS, NSURLDownload * download, NSError * error) {
	NSLog(@"NSURLDownload_download_didFailWithError");
	[THIS download:download didFailWithError:error];
}

NSURLDownload * NSURLDownload_alloc(){
	NSLog(@"NSURLDownload_alloc()");
	return [ NSURLDownload alloc ];
}