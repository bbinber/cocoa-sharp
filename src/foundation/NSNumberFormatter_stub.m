/* Generated by genstubs.pl
 * (c) 2004 kangaroo, C.J. and Urs
 */

#include <Cocoa/Cocoa.h>

#include <Foundation/NSFormatter.h>

NSString * NSNumberFormatter_negativeFormat (NSNumberFormatter* THIS) {
	NSLog(@"NSNumberFormatter_negativeFormat");
	return [THIS negativeFormat];
}

void NSNumberFormatter_setNegativeFormat (NSNumberFormatter* THIS, NSString * format) {
	NSLog(@"NSNumberFormatter_setNegativeFormat");
	[THIS setNegativeFormat:format];
}

NSDictionary * NSNumberFormatter_textAttributesForNegativeValues (NSNumberFormatter* THIS) {
	NSLog(@"NSNumberFormatter_textAttributesForNegativeValues");
	return [THIS textAttributesForNegativeValues];
}

void NSNumberFormatter_setTextAttributesForNegativeValues (NSNumberFormatter* THIS, NSDictionary * newAttributes) {
	NSLog(@"NSNumberFormatter_setTextAttributesForNegativeValues");
	[THIS setTextAttributesForNegativeValues:newAttributes];
}

NSString * NSNumberFormatter_positiveFormat (NSNumberFormatter* THIS) {
	NSLog(@"NSNumberFormatter_positiveFormat");
	return [THIS positiveFormat];
}

void NSNumberFormatter_setPositiveFormat (NSNumberFormatter* THIS, NSString * format) {
	NSLog(@"NSNumberFormatter_setPositiveFormat");
	[THIS setPositiveFormat:format];
}

NSDictionary * NSNumberFormatter_textAttributesForPositiveValues (NSNumberFormatter* THIS) {
	NSLog(@"NSNumberFormatter_textAttributesForPositiveValues");
	return [THIS textAttributesForPositiveValues];
}

void NSNumberFormatter_setTextAttributesForPositiveValues (NSNumberFormatter* THIS, NSDictionary * newAttributes) {
	NSLog(@"NSNumberFormatter_setTextAttributesForPositiveValues");
	[THIS setTextAttributesForPositiveValues:newAttributes];
}

NSAttributedString * NSNumberFormatter_attributedStringForZero (NSNumberFormatter* THIS) {
	NSLog(@"NSNumberFormatter_attributedStringForZero");
	return [THIS attributedStringForZero];
}

void NSNumberFormatter_setAttributedStringForZero (NSNumberFormatter* THIS, NSAttributedString * newAttributedString) {
	NSLog(@"NSNumberFormatter_setAttributedStringForZero");
	[THIS setAttributedStringForZero:newAttributedString];
}

NSAttributedString * NSNumberFormatter_attributedStringForNil (NSNumberFormatter* THIS) {
	NSLog(@"NSNumberFormatter_attributedStringForNil");
	return [THIS attributedStringForNil];
}

void NSNumberFormatter_setAttributedStringForNil (NSNumberFormatter* THIS, NSAttributedString * newAttributedString) {
	NSLog(@"NSNumberFormatter_setAttributedStringForNil");
	[THIS setAttributedStringForNil:newAttributedString];
}

NSAttributedString * NSNumberFormatter_attributedStringForNotANumber (NSNumberFormatter* THIS) {
	NSLog(@"NSNumberFormatter_attributedStringForNotANumber");
	return [THIS attributedStringForNotANumber];
}

void NSNumberFormatter_setAttributedStringForNotANumber (NSNumberFormatter* THIS, NSAttributedString * newAttributedString) {
	NSLog(@"NSNumberFormatter_setAttributedStringForNotANumber");
	[THIS setAttributedStringForNotANumber:newAttributedString];
}

NSString * NSNumberFormatter_format (NSNumberFormatter* THIS) {
	NSLog(@"NSNumberFormatter_format");
	return [THIS format];
}

void NSNumberFormatter_setFormat (NSNumberFormatter* THIS, NSString * format) {
	NSLog(@"NSNumberFormatter_setFormat");
	[THIS setFormat:format];
}

BOOL NSNumberFormatter_hasThousandSeparators (NSNumberFormatter* THIS) {
	NSLog(@"NSNumberFormatter_hasThousandSeparators");
	return [THIS hasThousandSeparators];
}

void NSNumberFormatter_setHasThousandSeparators (NSNumberFormatter* THIS, BOOL flag) {
	NSLog(@"NSNumberFormatter_setHasThousandSeparators");
	[THIS setHasThousandSeparators:flag];
}

NSString * NSNumberFormatter_thousandSeparator (NSNumberFormatter* THIS) {
	NSLog(@"NSNumberFormatter_thousandSeparator");
	return [THIS thousandSeparator];
}

void NSNumberFormatter_setThousandSeparator (NSNumberFormatter* THIS, NSString * newSeparator) {
	NSLog(@"NSNumberFormatter_setThousandSeparator");
	[THIS setThousandSeparator:newSeparator];
}

NSString * NSNumberFormatter_decimalSeparator (NSNumberFormatter* THIS) {
	NSLog(@"NSNumberFormatter_decimalSeparator");
	return [THIS decimalSeparator];
}

void NSNumberFormatter_setDecimalSeparator (NSNumberFormatter* THIS, NSString * newSeparator) {
	NSLog(@"NSNumberFormatter_setDecimalSeparator");
	[THIS setDecimalSeparator:newSeparator];
}

BOOL NSNumberFormatter_localizesFormat (NSNumberFormatter* THIS) {
	NSLog(@"NSNumberFormatter_localizesFormat");
	return [THIS localizesFormat];
}

void NSNumberFormatter_setLocalizesFormat (NSNumberFormatter* THIS, BOOL flag) {
	NSLog(@"NSNumberFormatter_setLocalizesFormat");
	[THIS setLocalizesFormat:flag];
}

BOOL NSNumberFormatter_allowsFloats (NSNumberFormatter* THIS) {
	NSLog(@"NSNumberFormatter_allowsFloats");
	return [THIS allowsFloats];
}

void NSNumberFormatter_setAllowsFloats (NSNumberFormatter* THIS, BOOL flag) {
	NSLog(@"NSNumberFormatter_setAllowsFloats");
	[THIS setAllowsFloats:flag];
}

NSDecimalNumberHandler * NSNumberFormatter_roundingBehavior (NSNumberFormatter* THIS) {
	NSLog(@"NSNumberFormatter_roundingBehavior");
	return [THIS roundingBehavior];
}

void NSNumberFormatter_setRoundingBehavior (NSNumberFormatter* THIS, NSDecimalNumberHandler * newRoundingBehavior) {
	NSLog(@"NSNumberFormatter_setRoundingBehavior");
	[THIS setRoundingBehavior:newRoundingBehavior];
}

NSDecimalNumber * NSNumberFormatter_minimum (NSNumberFormatter* THIS) {
	NSLog(@"NSNumberFormatter_minimum");
	return [THIS minimum];
}

void NSNumberFormatter_setMinimum (NSNumberFormatter* THIS, NSDecimalNumber * aMinimum) {
	NSLog(@"NSNumberFormatter_setMinimum");
	[THIS setMinimum:aMinimum];
}

NSDecimalNumber * NSNumberFormatter_maximum (NSNumberFormatter* THIS) {
	NSLog(@"NSNumberFormatter_maximum");
	return [THIS maximum];
}

void NSNumberFormatter_setMaximum (NSNumberFormatter* THIS, NSDecimalNumber * aMaximum) {
	NSLog(@"NSNumberFormatter_setMaximum");
	[THIS setMaximum:aMaximum];
}

NSNumberFormatter * NSNumberFormatter_alloc(){
	NSLog(@"NSNumberFormatter_alloc()");
	return [ NSNumberFormatter alloc ];
}