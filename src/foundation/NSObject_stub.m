/* Generated by genstubs.pl
 (c) 2004 kangaroo
*/

#include <Cocoa/Cocoa.h>

#include <Foundation/NSObjCRuntime.h>

#include <Foundation/NSZone.h>

BOOL NSObject_isEqual (NSObject* THIS, NSObject * object) {
	NSLog(@"NSObject_isEqual");
	return [THIS isEqual:object];
}

unsigned NSObject_hash (NSObject* THIS) {
	NSLog(@"NSObject_hash");
	return [THIS hash];
}
Class NSObject_superclass (NSObject* THIS) {
	NSLog(@"NSObject_superclass");
	return [THIS superclass];
}
Class NSObject_class (NSObject* THIS) {
	NSLog(@"NSObject_class");
	return [THIS class];
}
NSObject * NSObject_self (NSObject* THIS) {
	NSLog(@"NSObject_self");
	return [THIS self];
}
NSZone * NSObject_zone (NSObject* THIS) {
	NSLog(@"NSObject_zone");
	return [THIS zone];
}
NSObject * NSObject_performSelector (NSObject* THIS, SEL aSelector) {
	NSLog(@"NSObject_performSelector");
	return [THIS performSelector:aSelector];
}

NSObject * NSObject_performSelector_withObject (NSObject* THIS, SEL aSelector, NSObject * object) {
	NSLog(@"NSObject_performSelector_withObject");
	return [THIS performSelector:aSelector withObject:object];
}

NSObject * NSObject_performSelector_withObject_withObject (NSObject* THIS, SEL aSelector, NSObject * object1, NSObject * object2) {
	NSLog(@"NSObject_performSelector_withObject_withObject");
	return [THIS performSelector:aSelector withObject:object1 withObject:object2];
}

BOOL NSObject_isProxy (NSObject* THIS) {
	NSLog(@"NSObject_isProxy");
	return [THIS isProxy];
}
BOOL NSObject_isKindOfClass (NSObject* THIS, Class aClass) {
	NSLog(@"NSObject_isKindOfClass");
	return [THIS isKindOfClass:aClass];
}

BOOL NSObject_isMemberOfClass (NSObject* THIS, Class aClass) {
	NSLog(@"NSObject_isMemberOfClass");
	return [THIS isMemberOfClass:aClass];
}

BOOL NSObject_conformsToProtocol (NSObject* THIS, Protocol * aProtocol) {
	NSLog(@"NSObject_conformsToProtocol");
	return [THIS conformsToProtocol:aProtocol];
}

BOOL NSObject_respondsToSelector (NSObject* THIS, SEL aSelector) {
	NSLog(@"NSObject_respondsToSelector");
	return [THIS respondsToSelector:aSelector];
}

NSObject * NSObject_retain (NSObject* THIS) {
	NSLog(@"NSObject_retain");
	return [THIS retain];
}
void NSObject_release (NSObject* THIS) {
	NSLog(@"NSObject_release");
	[THIS release];
}
NSObject * NSObject_autorelease (NSObject* THIS) {
	NSLog(@"NSObject_autorelease");
	return [THIS autorelease];
}
unsigned NSObject_retainCount (NSObject* THIS) {
	NSLog(@"NSObject_retainCount");
	return [THIS retainCount];
}
NSString * NSObject_description (NSObject* THIS) {
	NSLog(@"NSObject_description");
	return [THIS description];
}
NSObject * NSObject_copyWithZone (NSObject* THIS, NSZone * zone) {
	NSLog(@"NSObject_copyWithZone");
	return [THIS copyWithZone:zone];
}

NSObject * NSObject_mutableCopyWithZone (NSObject* THIS, NSZone * zone) {
	NSLog(@"NSObject_mutableCopyWithZone");
	return [THIS mutableCopyWithZone:zone];
}

void NSObject_encodeWithCoder (NSObject* THIS, NSCoder * aCoder) {
	NSLog(@"NSObject_encodeWithCoder");
	[THIS encodeWithCoder:aCoder];
}

NSObject * NSObject_initWithCoder (NSObject* THIS, NSCoder * aDecoder) {
	NSLog(@"NSObject_initWithCoder");
	return [THIS initWithCoder:aDecoder];
}

void NSObject_load (NSObject* THIS) {
	NSLog(@"NSObject_load");
	[THIS load];
}
void NSObject_initialize (NSObject* THIS) {
	NSLog(@"NSObject_initialize");
	[THIS initialize];
}
NSObject * NSObject_init (NSObject* THIS) {
	NSLog(@"NSObject_init");
	return [THIS init];
}
NSObject * NSObject_new (NSObject* THIS) {
	NSLog(@"NSObject_new");
	return [THIS new];
}
NSObject * NSObject_allocWithZone (NSZone * zone) {
	NSLog(@"NSObject_allocWithZone");
	return [NSObject allocWithZone:zone];
}

NSObject * NSObject_alloc () {
	NSLog(@"NSObject_alloc");
	return [NSObject alloc];
}
void NSObject_dealloc (NSObject* THIS) {
	NSLog(@"NSObject_dealloc");
	[THIS dealloc];
}
NSObject * NSObject_copy (NSObject* THIS) {
	NSLog(@"NSObject_copy");
	return [THIS copy];
}
NSObject * NSObject_mutableCopy (NSObject* THIS) {
	NSLog(@"NSObject_mutableCopy");
	return [THIS mutableCopy];
}
void NSObject_poseAsClass (NSObject* THIS, Class aClass) {
	NSLog(@"NSObject_poseAsClass");
	[THIS poseAsClass:aClass];
}

BOOL NSObject_instancesRespondToSelector (NSObject* THIS, SEL aSelector) {
	NSLog(@"NSObject_instancesRespondToSelector");
	return [THIS instancesRespondToSelector:aSelector];
}


IMP NSObject_methodForSelector (NSObject* THIS, SEL aSelector) {
	NSLog(@"NSObject_methodForSelector");
	return [THIS methodForSelector:aSelector];
}

IMP NSObject_instanceMethodForSelector (NSObject* THIS, SEL aSelector) {
	NSLog(@"NSObject_instanceMethodForSelector");
	return [THIS instanceMethodForSelector:aSelector];
}

int NSObject_version (NSObject* THIS) {
	NSLog(@"NSObject_version");
	return [THIS version];
}
void NSObject_setVersion (NSObject* THIS, int aVersion) {
	NSLog(@"NSObject_setVersion");
	[THIS setVersion:aVersion];
}

void NSObject_doesNotRecognizeSelector (NSObject* THIS, SEL aSelector) {
	NSLog(@"NSObject_doesNotRecognizeSelector");
	[THIS doesNotRecognizeSelector:aSelector];
}

void NSObject_forwardInvocation (NSObject* THIS, NSInvocation * anInvocation) {
	NSLog(@"NSObject_forwardInvocation");
	[THIS forwardInvocation:anInvocation];
}

NSMethodSignature * NSObject_methodSignatureForSelector (NSObject* THIS, SEL aSelector) {
	NSLog(@"NSObject_methodSignatureForSelector");
	return [THIS methodSignatureForSelector:aSelector];
}

NSMethodSignature * NSObject_instanceMethodSignatureForSelector (NSObject* THIS, SEL aSelector) {
	NSLog(@"NSObject_instanceMethodSignatureForSelector");
	return [THIS instanceMethodSignatureForSelector:aSelector];
}

BOOL NSObject_isSubclassOfClass (NSObject* THIS, Class aClass) {
	NSLog(@"NSObject_isSubclassOfClass");
	return [THIS isSubclassOfClass:aClass];
}

Class NSObject_classForCoder (NSObject* THIS) {
	NSLog(@"NSObject_classForCoder");
	return [THIS classForCoder];
}
NSObject * NSObject_replacementObjectForCoder (NSObject* THIS, NSCoder * aCoder) {
	NSLog(@"NSObject_replacementObjectForCoder");
	return [THIS replacementObjectForCoder:aCoder];
}

NSObject * NSObject_awakeAfterUsingCoder (NSObject* THIS, NSCoder * aDecoder) {
	NSLog(@"NSObject_awakeAfterUsingCoder");
	return [THIS awakeAfterUsingCoder:aDecoder];
}

