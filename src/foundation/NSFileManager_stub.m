/* Generated by genstubs.pl
 * (c) 2004 kangaroo, C.J. and Urs
 */

#include <Cocoa/Cocoa.h>

#include <Foundation/NSObject.h>
#include <Foundation/NSEnumerator.h>
#include <Foundation/NSDictionary.h>
#include <CoreFoundation/CFBase.h>

NSFileManager * NSFileManager$_defaultManager () {
	NSLog(@"NSFileManager$_defaultManager");
	return [NSFileManager defaultManager];
}

NSString * NSFileManager_currentDirectoryPath (NSFileManager* THIS) {
	NSLog(@"NSFileManager_currentDirectoryPath");
	return [THIS currentDirectoryPath];
}

BOOL NSFileManager_changeCurrentDirectoryPath (NSFileManager* THIS, NSString * path) {
	NSLog(@"NSFileManager_changeCurrentDirectoryPath");
	return [THIS changeCurrentDirectoryPath:path];
}

NSDictionary * NSFileManager_fileAttributesAtPath_traverseLink (NSFileManager* THIS, NSString * path, BOOL yorn) {
	NSLog(@"NSFileManager_fileAttributesAtPath_traverseLink");
	return [THIS fileAttributesAtPath:path traverseLink:yorn];
}

BOOL NSFileManager_changeFileAttributes_atPath (NSFileManager* THIS, NSDictionary * attributes, NSString * path) {
	NSLog(@"NSFileManager_changeFileAttributes_atPath");
	return [THIS changeFileAttributes:attributes atPath:path];
}

BOOL NSFileManager_fileExistsAtPath (NSFileManager* THIS, NSString * path) {
	NSLog(@"NSFileManager_fileExistsAtPath");
	return [THIS fileExistsAtPath:path];
}

BOOL NSFileManager_fileExistsAtPath_isDirectory (NSFileManager* THIS, NSString * path, BOOL * isDirectory) {
	NSLog(@"NSFileManager_fileExistsAtPath_isDirectory");
	return [THIS fileExistsAtPath:path isDirectory:isDirectory];
}

BOOL NSFileManager_isReadableFileAtPath (NSFileManager* THIS, NSString * path) {
	NSLog(@"NSFileManager_isReadableFileAtPath");
	return [THIS isReadableFileAtPath:path];
}

BOOL NSFileManager_isWritableFileAtPath (NSFileManager* THIS, NSString * path) {
	NSLog(@"NSFileManager_isWritableFileAtPath");
	return [THIS isWritableFileAtPath:path];
}

BOOL NSFileManager_isExecutableFileAtPath (NSFileManager* THIS, NSString * path) {
	NSLog(@"NSFileManager_isExecutableFileAtPath");
	return [THIS isExecutableFileAtPath:path];
}

BOOL NSFileManager_isDeletableFileAtPath (NSFileManager* THIS, NSString * path) {
	NSLog(@"NSFileManager_isDeletableFileAtPath");
	return [THIS isDeletableFileAtPath:path];
}

NSString * NSFileManager_displayNameAtPath (NSFileManager* THIS, NSString * path) {
	NSLog(@"NSFileManager_displayNameAtPath");
	return [THIS displayNameAtPath:path];
}

BOOL NSFileManager_contentsEqualAtPath_andPath (NSFileManager* THIS, NSString * path1, NSString * path2) {
	NSLog(@"NSFileManager_contentsEqualAtPath_andPath");
	return [THIS contentsEqualAtPath:path1 andPath:path2];
}

BOOL NSFileManager_linkPath_toPath_handler (NSFileManager* THIS, NSString * src, NSString * dest, id handler) {
	NSLog(@"NSFileManager_linkPath_toPath_handler");
	return [THIS linkPath:src toPath:dest handler:handler];
}

BOOL NSFileManager_copyPath_toPath_handler (NSFileManager* THIS, NSString * src, NSString * dest, id handler) {
	NSLog(@"NSFileManager_copyPath_toPath_handler");
	return [THIS copyPath:src toPath:dest handler:handler];
}

BOOL NSFileManager_movePath_toPath_handler (NSFileManager* THIS, NSString * src, NSString * dest, id handler) {
	NSLog(@"NSFileManager_movePath_toPath_handler");
	return [THIS movePath:src toPath:dest handler:handler];
}

BOOL NSFileManager_removeFileAtPath_handler (NSFileManager* THIS, NSString * path, id handler) {
	NSLog(@"NSFileManager_removeFileAtPath_handler");
	return [THIS removeFileAtPath:path handler:handler];
}

NSArray * NSFileManager_directoryContentsAtPath (NSFileManager* THIS, NSString * path) {
	NSLog(@"NSFileManager_directoryContentsAtPath");
	return [THIS directoryContentsAtPath:path];
}

NSDirectoryEnumerator * NSFileManager_enumeratorAtPath (NSFileManager* THIS, NSString * path) {
	NSLog(@"NSFileManager_enumeratorAtPath");
	return [THIS enumeratorAtPath:path];
}

NSArray * NSFileManager_subpathsAtPath (NSFileManager* THIS, NSString * path) {
	NSLog(@"NSFileManager_subpathsAtPath");
	return [THIS subpathsAtPath:path];
}

BOOL NSFileManager_createDirectoryAtPath_attributes (NSFileManager* THIS, NSString * path, NSDictionary * attributes) {
	NSLog(@"NSFileManager_createDirectoryAtPath_attributes");
	return [THIS createDirectoryAtPath:path attributes:attributes];
}

NSData * NSFileManager_contentsAtPath (NSFileManager* THIS, NSString * path) {
	NSLog(@"NSFileManager_contentsAtPath");
	return [THIS contentsAtPath:path];
}

BOOL NSFileManager_createFileAtPath_contents_attributes (NSFileManager* THIS, NSString * path, NSData * data, NSDictionary * attr) {
	NSLog(@"NSFileManager_createFileAtPath_contents_attributes");
	return [THIS createFileAtPath:path contents:data attributes:attr];
}

NSString * NSFileManager_pathContentOfSymbolicLinkAtPath (NSFileManager* THIS, NSString * path) {
	NSLog(@"NSFileManager_pathContentOfSymbolicLinkAtPath");
	return [THIS pathContentOfSymbolicLinkAtPath:path];
}

BOOL NSFileManager_createSymbolicLinkAtPath_pathContent (NSFileManager* THIS, NSString * path, NSString * otherpath) {
	NSLog(@"NSFileManager_createSymbolicLinkAtPath_pathContent");
	return [THIS createSymbolicLinkAtPath:path pathContent:otherpath];
}

NSDictionary * NSFileManager_fileSystemAttributesAtPath (NSFileManager* THIS, NSString * path) {
	NSLog(@"NSFileManager_fileSystemAttributesAtPath");
	return [THIS fileSystemAttributesAtPath:path];
}

const char * NSFileManager_fileSystemRepresentationWithPath (NSFileManager* THIS, NSString * path) {
	NSLog(@"NSFileManager_fileSystemRepresentationWithPath");
	return [THIS fileSystemRepresentationWithPath:path];
}

NSString * NSFileManager_stringWithFileSystemRepresentation_length (NSFileManager* THIS, const char * str, unsigned len) {
	NSLog(@"NSFileManager_stringWithFileSystemRepresentation_length");
	return [THIS stringWithFileSystemRepresentation:str length:len];
}

NSArray * NSFileManager_componentsToDisplayForPath (NSFileManager* THIS, NSString * path) {
	NSLog(@"NSFileManager_componentsToDisplayForPath");
	return [THIS componentsToDisplayForPath:path];
}

BOOL NSFileManager_fileManager_shouldProceedAfterError (NSFileManager* THIS, NSFileManager * fm, NSDictionary * errorInfo) {
	NSLog(@"NSFileManager_fileManager_shouldProceedAfterError");
	return [THIS fileManager:fm shouldProceedAfterError:errorInfo];
}

void NSFileManager_fileManager_willProcessPath (NSFileManager* THIS, NSFileManager * fm, NSString * path) {
	NSLog(@"NSFileManager_fileManager_willProcessPath");
	[THIS fileManager:fm willProcessPath:path];
}

NSDictionary * NSFileManager_fileAttributes (NSFileManager* THIS) {
	NSLog(@"NSFileManager_fileAttributes");
	return [THIS fileAttributes];
}

NSDictionary * NSFileManager_directoryAttributes (NSFileManager* THIS) {
	NSLog(@"NSFileManager_directoryAttributes");
	return [THIS directoryAttributes];
}

void NSFileManager_skipDescendents (NSFileManager* THIS) {
	NSLog(@"NSFileManager_skipDescendents");
	[THIS skipDescendents];
}

unsigned long long NSFileManager_fileSize (NSFileManager* THIS) {
	NSLog(@"NSFileManager_fileSize");
	return [THIS fileSize];
}

NSDate * NSFileManager_fileModificationDate (NSFileManager* THIS) {
	NSLog(@"NSFileManager_fileModificationDate");
	return [THIS fileModificationDate];
}

NSString * NSFileManager_fileType (NSFileManager* THIS) {
	NSLog(@"NSFileManager_fileType");
	return [THIS fileType];
}

unsigned long NSFileManager_filePosixPermissions (NSFileManager* THIS) {
	NSLog(@"NSFileManager_filePosixPermissions");
	return [THIS filePosixPermissions];
}

NSString * NSFileManager_fileOwnerAccountName (NSFileManager* THIS) {
	NSLog(@"NSFileManager_fileOwnerAccountName");
	return [THIS fileOwnerAccountName];
}

NSString * NSFileManager_fileGroupOwnerAccountName (NSFileManager* THIS) {
	NSLog(@"NSFileManager_fileGroupOwnerAccountName");
	return [THIS fileGroupOwnerAccountName];
}

unsigned long NSFileManager_fileSystemNumber (NSFileManager* THIS) {
	NSLog(@"NSFileManager_fileSystemNumber");
	return [THIS fileSystemNumber];
}

unsigned long NSFileManager_fileSystemFileNumber (NSFileManager* THIS) {
	NSLog(@"NSFileManager_fileSystemFileNumber");
	return [THIS fileSystemFileNumber];
}

BOOL NSFileManager_fileExtensionHidden (NSFileManager* THIS) {
	NSLog(@"NSFileManager_fileExtensionHidden");
	return [THIS fileExtensionHidden];
}

OSType NSFileManager_fileHFSCreatorCode (NSFileManager* THIS) {
	NSLog(@"NSFileManager_fileHFSCreatorCode");
	return [THIS fileHFSCreatorCode];
}

OSType NSFileManager_fileHFSTypeCode (NSFileManager* THIS) {
	NSLog(@"NSFileManager_fileHFSTypeCode");
	return [THIS fileHFSTypeCode];
}

BOOL NSFileManager_fileIsImmutable (NSFileManager* THIS) {
	NSLog(@"NSFileManager_fileIsImmutable");
	return [THIS fileIsImmutable];
}

BOOL NSFileManager_fileIsAppendOnly (NSFileManager* THIS) {
	NSLog(@"NSFileManager_fileIsAppendOnly");
	return [THIS fileIsAppendOnly];
}

NSDate * NSFileManager_fileCreationDate (NSFileManager* THIS) {
	NSLog(@"NSFileManager_fileCreationDate");
	return [THIS fileCreationDate];
}

NSNumber * NSFileManager_fileOwnerAccountID (NSFileManager* THIS) {
	NSLog(@"NSFileManager_fileOwnerAccountID");
	return [THIS fileOwnerAccountID];
}

NSNumber * NSFileManager_fileGroupOwnerAccountID (NSFileManager* THIS) {
	NSLog(@"NSFileManager_fileGroupOwnerAccountID");
	return [THIS fileGroupOwnerAccountID];
}

NSFileManager * NSFileManager_alloc(){
	NSLog(@"NSFileManager_alloc()");
	return [ NSFileManager alloc ];
}