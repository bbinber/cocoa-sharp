/* Generated by genstubs.pl
 (c) 2004 kangaroo
*/

#include <Cocoa/Cocoa.h>

#include <AvailabilityMacros.h>

#include <Foundation/NSObject.h>

#include <Foundation/NSURLCache.h>

void NSURLProtocol_URLProtocol_wasRedirectedToRequest_redirectResponse (NSURLProtocol* THIS, NSURLProtocol * protocol, NSURLRequest * request, NSURLResponse * redirectResponse) {
	NSLog(@"NSURLProtocol_URLProtocol_wasRedirectedToRequest_redirectResponse");
	[THIS URLProtocol:protocol wasRedirectedToRequest:request redirectResponse:redirectResponse];
}

void NSURLProtocol_URLProtocol_cachedResponseIsValid (NSURLProtocol* THIS, NSURLProtocol * protocol, NSCachedURLResponse * cachedResponse) {
	NSLog(@"NSURLProtocol_URLProtocol_cachedResponseIsValid");
	[THIS URLProtocol:protocol cachedResponseIsValid:cachedResponse];
}

void NSURLProtocol_URLProtocol_didReceiveResponse_cacheStoragePolicy (NSURLProtocol* THIS, NSURLProtocol * protocol, NSURLResponse * response, NSURLCacheStoragePolicy policy) {
	NSLog(@"NSURLProtocol_URLProtocol_didReceiveResponse_cacheStoragePolicy");
	[THIS URLProtocol:protocol didReceiveResponse:response cacheStoragePolicy:policy];
}

void NSURLProtocol_URLProtocol_didLoadData (NSURLProtocol* THIS, NSURLProtocol * protocol, NSData * data) {
	NSLog(@"NSURLProtocol_URLProtocol_didLoadData");
	[THIS URLProtocol:protocol didLoadData:data];
}

void NSURLProtocol_URLProtocolDidFinishLoading (NSURLProtocol* THIS, NSURLProtocol * protocol) {
	NSLog(@"NSURLProtocol_URLProtocolDidFinishLoading");
	[THIS URLProtocolDidFinishLoading:protocol];
}

void NSURLProtocol_URLProtocol_didFailWithError (NSURLProtocol* THIS, NSURLProtocol * protocol, NSError * error) {
	NSLog(@"NSURLProtocol_URLProtocol_didFailWithError");
	[THIS URLProtocol:protocol didFailWithError:error];
}

void NSURLProtocol_URLProtocol_didReceiveAuthenticationChallenge (NSURLProtocol* THIS, NSURLProtocol * protocol, NSURLAuthenticationChallenge * challenge) {
	NSLog(@"NSURLProtocol_URLProtocol_didReceiveAuthenticationChallenge");
	[THIS URLProtocol:protocol didReceiveAuthenticationChallenge:challenge];
}

void NSURLProtocol_URLProtocol_didCancelAuthenticationChallenge (NSURLProtocol* THIS, NSURLProtocol * protocol, NSURLAuthenticationChallenge * challenge) {
	NSLog(@"NSURLProtocol_URLProtocol_didCancelAuthenticationChallenge");
	[THIS URLProtocol:protocol didCancelAuthenticationChallenge:challenge];
}

/* UNSUPPORTED: 
- (id)initWithRequest:(NSURLRequest *)request cachedResponse:(NSCachedURLResponse *)cachedResponse client:(id <NSURLProtocolClient>)client;
 */

/* UNSUPPORTED: 
- (id <NSURLProtocolClient>)client;
 */

NSURLRequest * NSURLProtocol_request (NSURLProtocol* THIS) {
	NSLog(@"NSURLProtocol_request");
	return [THIS request];
}
NSCachedURLResponse * NSURLProtocol_cachedResponse (NSURLProtocol* THIS) {
	NSLog(@"NSURLProtocol_cachedResponse");
	return [THIS cachedResponse];
}
BOOL NSURLProtocol_canInitWithRequest (NSURLProtocol* THIS, NSURLRequest * request) {
	NSLog(@"NSURLProtocol_canInitWithRequest");
	return [THIS canInitWithRequest:request];
}

NSURLRequest * NSURLProtocol_canonicalRequestForRequest (NSURLProtocol* THIS, NSURLRequest * request) {
	NSLog(@"NSURLProtocol_canonicalRequestForRequest");
	return [THIS canonicalRequestForRequest:request];
}

BOOL NSURLProtocol_requestIsCacheEquivalent_toRequest (NSURLProtocol* THIS, NSURLRequest * a, NSURLRequest * b) {
	NSLog(@"NSURLProtocol_requestIsCacheEquivalent_toRequest");
	return [THIS requestIsCacheEquivalent:a toRequest:b];
}

void NSURLProtocol_startLoading (NSURLProtocol* THIS) {
	NSLog(@"NSURLProtocol_startLoading");
	[THIS startLoading];
}
void NSURLProtocol_stopLoading (NSURLProtocol* THIS) {
	NSLog(@"NSURLProtocol_stopLoading");
	[THIS stopLoading];
}
NSURLProtocol * NSURLProtocol_propertyForKey_inRequest (NSURLProtocol* THIS, NSString * key, NSURLRequest * request) {
	NSLog(@"NSURLProtocol_propertyForKey_inRequest");
	return [THIS propertyForKey:key inRequest:request];
}

void NSURLProtocol_setProperty_forKey_inRequest (NSURLProtocol* THIS, NSURLProtocol * value, NSString * key, NSMutableURLRequest * request) {
	NSLog(@"NSURLProtocol_setProperty_forKey_inRequest");
	[THIS setProperty:value forKey:key inRequest:request];
}

BOOL NSURLProtocol_registerClass (NSURLProtocol* THIS, Class protocolClass) {
	NSLog(@"NSURLProtocol_registerClass");
	return [THIS registerClass:protocolClass];
}

void NSURLProtocol_unregisterClass (NSURLProtocol* THIS, Class protocolClass) {
	NSLog(@"NSURLProtocol_unregisterClass");
	[THIS unregisterClass:protocolClass];
}

NSURLProtocol * NSURLProtocol_alloc() {
	NSLog(@"NSURLProtocol_alloc()");
	return [NSURLProtocol alloc];
}
