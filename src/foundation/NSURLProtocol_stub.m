/* Generated by genstubs.pl
 * (c) 2004 kangaroo, C.J. and Urs
 */

#include <Cocoa/Cocoa.h>

#include <AvailabilityMacros.h>
#include <Foundation/NSObject.h>
#include <Foundation/NSURLCache.h>

void NSURLProtocol_URLProtocol_wasRedirectedToRequest_redirectResponse (NSURLProtocol* THIS, NSURLProtocol * protocol, NSURLRequest * request, NSURLResponse * redirectResponse) {
	NSLog(@"NSURLProtocol_URLProtocol_wasRedirectedToRequest_redirectResponse");
	[THIS URLProtocol:protocol wasRedirectedToRequest:request redirectResponse:redirectResponse];
}

void NSURLProtocol_URLProtocol_cachedResponseIsValid (NSURLProtocol* THIS, NSURLProtocol * protocol, NSCachedURLResponse * cachedResponse) {
	NSLog(@"NSURLProtocol_URLProtocol_cachedResponseIsValid");
	[THIS URLProtocol:protocol cachedResponseIsValid:cachedResponse];
}

void NSURLProtocol_URLProtocol_didReceiveResponse_cacheStoragePolicy (NSURLProtocol* THIS, NSURLProtocol * protocol, NSURLResponse * response, NSURLCacheStoragePolicy policy) {
	NSLog(@"NSURLProtocol_URLProtocol_didReceiveResponse_cacheStoragePolicy");
	[THIS URLProtocol:protocol didReceiveResponse:response cacheStoragePolicy:policy];
}

void NSURLProtocol_URLProtocol_didLoadData (NSURLProtocol* THIS, NSURLProtocol * protocol, NSData * data) {
	NSLog(@"NSURLProtocol_URLProtocol_didLoadData");
	[THIS URLProtocol:protocol didLoadData:data];
}

void NSURLProtocol_URLProtocolDidFinishLoading (NSURLProtocol* THIS, NSURLProtocol * protocol) {
	NSLog(@"NSURLProtocol_URLProtocolDidFinishLoading");
	[THIS URLProtocolDidFinishLoading:protocol];
}

void NSURLProtocol_URLProtocol_didFailWithError (NSURLProtocol* THIS, NSURLProtocol * protocol, NSError * error) {
	NSLog(@"NSURLProtocol_URLProtocol_didFailWithError");
	[THIS URLProtocol:protocol didFailWithError:error];
}

void NSURLProtocol_URLProtocol_didReceiveAuthenticationChallenge (NSURLProtocol* THIS, NSURLProtocol * protocol, NSURLAuthenticationChallenge * challenge) {
	NSLog(@"NSURLProtocol_URLProtocol_didReceiveAuthenticationChallenge");
	[THIS URLProtocol:protocol didReceiveAuthenticationChallenge:challenge];
}

void NSURLProtocol_URLProtocol_didCancelAuthenticationChallenge (NSURLProtocol* THIS, NSURLProtocol * protocol, NSURLAuthenticationChallenge * challenge) {
	NSLog(@"NSURLProtocol_URLProtocol_didCancelAuthenticationChallenge");
	[THIS URLProtocol:protocol didCancelAuthenticationChallenge:challenge];
}

/* UNSUPPORTED: 
- (id)initWithRequest:(NSURLRequest *)request cachedResponse:(NSCachedURLResponse *)cachedResponse client:(id <NSURLProtocolClient>)client;
 */



/* UNSUPPORTED: 
- (id <NSURLProtocolClient>)client;
 */



NSURLRequest * NSURLProtocol_request (NSURLProtocol* THIS) {
	NSLog(@"NSURLProtocol_request");
	return [THIS request];
}

NSCachedURLResponse * NSURLProtocol_cachedResponse (NSURLProtocol* THIS) {
	NSLog(@"NSURLProtocol_cachedResponse");
	return [THIS cachedResponse];
}

BOOL NSURLProtocol$_canInitWithRequest (NSURLRequest * request) {
	NSLog(@"NSURLProtocol$_canInitWithRequest");
	return [NSURLProtocol canInitWithRequest:request];
}

NSURLRequest * NSURLProtocol$_canonicalRequestForRequest (NSURLRequest * request) {
	NSLog(@"NSURLProtocol$_canonicalRequestForRequest");
	return [NSURLProtocol canonicalRequestForRequest:request];
}

BOOL NSURLProtocol$_requestIsCacheEquivalent_toRequest (NSURLRequest * a, NSURLRequest * b) {
	NSLog(@"NSURLProtocol$_requestIsCacheEquivalent_toRequest");
	return [NSURLProtocol requestIsCacheEquivalent:a toRequest:b];
}

void NSURLProtocol_startLoading (NSURLProtocol* THIS) {
	NSLog(@"NSURLProtocol_startLoading");
	[THIS startLoading];
}

void NSURLProtocol_stopLoading (NSURLProtocol* THIS) {
	NSLog(@"NSURLProtocol_stopLoading");
	[THIS stopLoading];
}

NSURLProtocol * NSURLProtocol$_propertyForKey_inRequest (NSString * key, NSURLRequest * request) {
	NSLog(@"NSURLProtocol$_propertyForKey_inRequest");
	return [NSURLProtocol propertyForKey:key inRequest:request];
}

void NSURLProtocol$_setProperty_forKey_inRequest (id value, NSString * key, NSMutableURLRequest * request) {
	NSLog(@"NSURLProtocol$_setProperty_forKey_inRequest");
	[NSURLProtocol setProperty:value forKey:key inRequest:request];
}

BOOL NSURLProtocol$_registerClass (Class protocolClass) {
	NSLog(@"NSURLProtocol$_registerClass");
	return [NSURLProtocol registerClass:protocolClass];
}

void NSURLProtocol$_unregisterClass (Class protocolClass) {
	NSLog(@"NSURLProtocol$_unregisterClass");
	[NSURLProtocol unregisterClass:protocolClass];
}

NSURLProtocol * NSURLProtocol_alloc(){
	NSLog(@"NSURLProtocol_alloc()");
	return [ NSURLProtocol alloc ];
}