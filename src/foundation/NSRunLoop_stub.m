/* Generated by genstubs.pl
 (c) 2004 kangaroo
*/

#include <Cocoa/Cocoa.h>

#include <Foundation/NSObject.h>

#include <Foundation/NSDate.h>

#include <CoreFoundation/CFRunLoop.h>

NSRunLoop * NSRunLoop_currentRunLoop (NSRunLoop* THIS) {
	NSLog(@"NSRunLoop_currentRunLoop");
	return [THIS currentRunLoop];
}
NSString * NSRunLoop_currentMode (NSRunLoop* THIS) {
	NSLog(@"NSRunLoop_currentMode");
	return [THIS currentMode];
}
CFRunLoopRef NSRunLoop_getCFRunLoop (NSRunLoop* THIS) {
	NSLog(@"NSRunLoop_getCFRunLoop");
	return [THIS getCFRunLoop];
}
void NSRunLoop_addTimer_forMode (NSRunLoop* THIS, NSTimer * timer, NSString * mode) {
	NSLog(@"NSRunLoop_addTimer_forMode");
	[THIS addTimer:timer forMode:mode];
}

void NSRunLoop_addPort_forMode (NSRunLoop* THIS, NSPort * aPort, NSString * mode) {
	NSLog(@"NSRunLoop_addPort_forMode");
	[THIS addPort:aPort forMode:mode];
}

void NSRunLoop_removePort_forMode (NSRunLoop* THIS, NSPort * aPort, NSString * mode) {
	NSLog(@"NSRunLoop_removePort_forMode");
	[THIS removePort:aPort forMode:mode];
}

NSDate * NSRunLoop_limitDateForMode (NSRunLoop* THIS, NSString * mode) {
	NSLog(@"NSRunLoop_limitDateForMode");
	return [THIS limitDateForMode:mode];
}

void NSRunLoop_acceptInputForMode_beforeDate (NSRunLoop* THIS, NSString * mode, NSDate * limitDate) {
	NSLog(@"NSRunLoop_acceptInputForMode_beforeDate");
	[THIS acceptInputForMode:mode beforeDate:limitDate];
}

void NSRunLoop_run (NSRunLoop* THIS) {
	NSLog(@"NSRunLoop_run");
	[THIS run];
}
void NSRunLoop_runUntilDate (NSRunLoop* THIS, NSDate * limitDate) {
	NSLog(@"NSRunLoop_runUntilDate");
	[THIS runUntilDate:limitDate];
}

BOOL NSRunLoop_runMode_beforeDate (NSRunLoop* THIS, NSString * mode, NSDate * limitDate) {
	NSLog(@"NSRunLoop_runMode_beforeDate");
	return [THIS runMode:mode beforeDate:limitDate];
}

void NSRunLoop_configureAsServer (NSRunLoop* THIS) {
	NSLog(@"NSRunLoop_configureAsServer");
	[THIS configureAsServer];
}
void NSRunLoop_performSelector_withObject_afterDelay_inModes (NSRunLoop* THIS, SEL aSelector, NSRunLoop * anArgument, NSTimeInterval delay, NSArray * modes) {
	NSLog(@"NSRunLoop_performSelector_withObject_afterDelay_inModes");
	[THIS performSelector:aSelector withObject:anArgument afterDelay:delay inModes:modes];
}

void NSRunLoop_performSelector_withObject_afterDelay (NSRunLoop* THIS, SEL aSelector, NSRunLoop * anArgument, NSTimeInterval delay) {
	NSLog(@"NSRunLoop_performSelector_withObject_afterDelay");
	[THIS performSelector:aSelector withObject:anArgument afterDelay:delay];
}

void NSRunLoop_cancelPreviousPerformRequestsWithTarget_selector_object (NSRunLoop* THIS, NSRunLoop * aTarget, SEL aSelector, NSRunLoop * anArgument) {
	NSLog(@"NSRunLoop_cancelPreviousPerformRequestsWithTarget_selector_object");
	[THIS cancelPreviousPerformRequestsWithTarget:aTarget selector:aSelector object:anArgument];
}

void NSRunLoop_cancelPreviousPerformRequestsWithTarget (NSRunLoop* THIS, NSRunLoop * aTarget) {
	NSLog(@"NSRunLoop_cancelPreviousPerformRequestsWithTarget");
	[THIS cancelPreviousPerformRequestsWithTarget:aTarget];
}

void NSRunLoop_performSelector_target_argument_order_modes (NSRunLoop* THIS, SEL aSelector, NSRunLoop * target, NSRunLoop * arg, unsigned order, NSArray * modes) {
	NSLog(@"NSRunLoop_performSelector_target_argument_order_modes");
	[THIS performSelector:aSelector target:target argument:arg order:order modes:modes];
}

void NSRunLoop_cancelPerformSelector_target_argument (NSRunLoop* THIS, SEL aSelector, NSRunLoop * target, NSRunLoop * arg) {
	NSLog(@"NSRunLoop_cancelPerformSelector_target_argument");
	[THIS cancelPerformSelector:aSelector target:target argument:arg];
}

void NSRunLoop_cancelPerformSelectorsWithTarget (NSRunLoop* THIS, NSRunLoop * target) {
	NSLog(@"NSRunLoop_cancelPerformSelectorsWithTarget");
	[THIS cancelPerformSelectorsWithTarget:target];
}

NSRunLoop * NSRunLoop_alloc() {
	NSLog(@"NSRunLoop_alloc()");
	return [NSRunLoop alloc];
}
