/* Generated by genstubs.pl
 (c) 2004 kangaroo
*/

#include <Cocoa/Cocoa.h>

#include <Foundation/NSCoder.h>

NSArchiver * NSArchiver_initForWritingWithMutableData (NSArchiver* THIS, NSMutableData * mdata) {
	NSLog(@"NSArchiver_initForWritingWithMutableData");
	return [THIS initForWritingWithMutableData:mdata];
}

NSMutableData * NSArchiver_archiverData (NSArchiver* THIS) {
	NSLog(@"NSArchiver_archiverData");
	return [THIS archiverData];
}
void NSArchiver_encodeRootObject (NSArchiver* THIS, NSArchiver * rootObject) {
	NSLog(@"NSArchiver_encodeRootObject");
	[THIS encodeRootObject:rootObject];
}

void NSArchiver_encodeConditionalObject (NSArchiver* THIS, NSArchiver * object) {
	NSLog(@"NSArchiver_encodeConditionalObject");
	[THIS encodeConditionalObject:object];
}

NSData * NSArchiver_archivedDataWithRootObject (NSArchiver* THIS, NSArchiver * rootObject) {
	NSLog(@"NSArchiver_archivedDataWithRootObject");
	return [THIS archivedDataWithRootObject:rootObject];
}

BOOL NSArchiver_archiveRootObject_toFile (NSArchiver* THIS, NSArchiver * rootObject, NSString * path) {
	NSLog(@"NSArchiver_archiveRootObject_toFile");
	return [THIS archiveRootObject:rootObject toFile:path];
}

void NSArchiver_encodeClassName_intoClassName (NSArchiver* THIS, NSString * trueName, NSString * inArchiveName) {
	NSLog(@"NSArchiver_encodeClassName_intoClassName");
	[THIS encodeClassName:trueName intoClassName:inArchiveName];
}

NSString * NSArchiver_classNameEncodedForTrueClassName (NSArchiver* THIS, NSString * trueName) {
	NSLog(@"NSArchiver_classNameEncodedForTrueClassName");
	return [THIS classNameEncodedForTrueClassName:trueName];
}

void NSArchiver_replaceObject_withObject (NSArchiver* THIS, NSArchiver * object, NSArchiver * newObject) {
	NSLog(@"NSArchiver_replaceObject_withObject");
	[THIS replaceObject:object withObject:newObject];
}

NSArchiver * NSArchiver_initForReadingWithData (NSArchiver* THIS, NSData * data) {
	NSLog(@"NSArchiver_initForReadingWithData");
	return [THIS initForReadingWithData:data];
}

void NSArchiver_setObjectZone (NSArchiver* THIS, NSZone * zone) {
	NSLog(@"NSArchiver_setObjectZone");
	[THIS setObjectZone:zone];
}

NSZone * NSArchiver_objectZone (NSArchiver* THIS) {
	NSLog(@"NSArchiver_objectZone");
	return [THIS objectZone];
}
BOOL NSArchiver_isAtEnd (NSArchiver* THIS) {
	NSLog(@"NSArchiver_isAtEnd");
	return [THIS isAtEnd];
}
unsigned NSArchiver_systemVersion (NSArchiver* THIS) {
	NSLog(@"NSArchiver_systemVersion");
	return [THIS systemVersion];
}
NSArchiver * NSArchiver_unarchiveObjectWithData (NSArchiver* THIS, NSData * data) {
	NSLog(@"NSArchiver_unarchiveObjectWithData");
	return [THIS unarchiveObjectWithData:data];
}

NSArchiver * NSArchiver_unarchiveObjectWithFile (NSArchiver* THIS, NSString * path) {
	NSLog(@"NSArchiver_unarchiveObjectWithFile");
	return [THIS unarchiveObjectWithFile:path];
}

void NSArchiver_decodeClassName_asClassName (NSArchiver* THIS, NSString * inArchiveName, NSString * trueName) {
	NSLog(@"NSArchiver_decodeClassName_asClassName");
	[THIS decodeClassName:inArchiveName asClassName:trueName];
}

void NSArchiver_decodeClassName_asClassName (NSArchiver* THIS, NSString * inArchiveName, NSString * trueName) {
	NSLog(@"NSArchiver_decodeClassName_asClassName");
	[THIS decodeClassName:inArchiveName asClassName:trueName];
}

NSString * NSArchiver_classNameDecodedForArchiveClassName (NSArchiver* THIS, NSString * inArchiveName) {
	NSLog(@"NSArchiver_classNameDecodedForArchiveClassName");
	return [THIS classNameDecodedForArchiveClassName:inArchiveName];
}

NSString * NSArchiver_classNameDecodedForArchiveClassName (NSArchiver* THIS, NSString * inArchiveName) {
	NSLog(@"NSArchiver_classNameDecodedForArchiveClassName");
	return [THIS classNameDecodedForArchiveClassName:inArchiveName];
}

void NSArchiver_replaceObject_withObject (NSArchiver* THIS, NSArchiver * object, NSArchiver * newObject) {
	NSLog(@"NSArchiver_replaceObject_withObject");
	[THIS replaceObject:object withObject:newObject];
}

Class NSArchiver_classForArchiver (NSArchiver* THIS) {
	NSLog(@"NSArchiver_classForArchiver");
	return [THIS classForArchiver];
}
NSArchiver * NSArchiver_replacementObjectForArchiver (NSArchiver* THIS, NSArchiver * archiver) {
	NSLog(@"NSArchiver_replacementObjectForArchiver");
	return [THIS replacementObjectForArchiver:archiver];
}

NSArchiver * NSArchiver_alloc() {
	NSLog(@"NSArchiver_alloc()");
	return [NSArchiver alloc];
}
