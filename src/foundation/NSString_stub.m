/* Generated by genstubs.pl
 (c) 2004 kangaroo
*/

#include <Cocoa/Cocoa.h>

#include <limits.h>

#include <Foundation/NSObject.h>

#include <Foundation/NSRange.h>

#include <stdarg.h>

unsigned int NSString_length (NSString* THIS) {
	NSLog(@"NSString_length");
	return [THIS length];
}
unichar NSString_characterAtIndex (NSString* THIS, unsigned index) {
	NSLog(@"NSString_characterAtIndex");
	return [THIS characterAtIndex:index];
}

void NSString_getCharacters (NSString* THIS, unichar * buffer) {
	NSLog(@"NSString_getCharacters");
	[THIS getCharacters:buffer];
}

void NSString_getCharacters_range (NSString* THIS, unichar * buffer, NSRange aRange) {
	NSLog(@"NSString_getCharacters_range");
	[THIS getCharacters:buffer range:aRange];
}

NSString * NSString_substringFromIndex (NSString* THIS, unsigned from) {
	NSLog(@"NSString_substringFromIndex");
	return [THIS substringFromIndex:from];
}

NSString * NSString_substringToIndex (NSString* THIS, unsigned to) {
	NSLog(@"NSString_substringToIndex");
	return [THIS substringToIndex:to];
}

NSString * NSString_substringWithRange (NSString* THIS, NSRange range) {
	NSLog(@"NSString_substringWithRange");
	return [THIS substringWithRange:range];
}

NSComparisonResult NSString_compare (NSString* THIS, NSString * string) {
	NSLog(@"NSString_compare");
	return [THIS compare:string];
}

NSComparisonResult NSString_compare_options (NSString* THIS, NSString * string, unsigned mask) {
	NSLog(@"NSString_compare_options");
	return [THIS compare:string options:mask];
}

NSComparisonResult NSString_compare_options_range (NSString* THIS, NSString * string, unsigned mask, NSRange compareRange) {
	NSLog(@"NSString_compare_options_range");
	return [THIS compare:string options:mask range:compareRange];
}

NSComparisonResult NSString_compare_options_range_locale (NSString* THIS, NSString * string, unsigned mask, NSRange compareRange, NSDictionary * dict) {
	NSLog(@"NSString_compare_options_range_locale");
	return [THIS compare:string options:mask range:compareRange locale:dict];
}

NSComparisonResult NSString_caseInsensitiveCompare (NSString* THIS, NSString * string) {
	NSLog(@"NSString_caseInsensitiveCompare");
	return [THIS caseInsensitiveCompare:string];
}

NSComparisonResult NSString_localizedCompare (NSString* THIS, NSString * string) {
	NSLog(@"NSString_localizedCompare");
	return [THIS localizedCompare:string];
}

NSComparisonResult NSString_localizedCaseInsensitiveCompare (NSString* THIS, NSString * string) {
	NSLog(@"NSString_localizedCaseInsensitiveCompare");
	return [THIS localizedCaseInsensitiveCompare:string];
}

BOOL NSString_isEqualToString (NSString* THIS, NSString * aString) {
	NSLog(@"NSString_isEqualToString");
	return [THIS isEqualToString:aString];
}

BOOL NSString_hasPrefix (NSString* THIS, NSString * aString) {
	NSLog(@"NSString_hasPrefix");
	return [THIS hasPrefix:aString];
}

BOOL NSString_hasSuffix (NSString* THIS, NSString * aString) {
	NSLog(@"NSString_hasSuffix");
	return [THIS hasSuffix:aString];
}

NSRange NSString_rangeOfString (NSString* THIS, NSString * aString) {
	NSLog(@"NSString_rangeOfString");
	return [THIS rangeOfString:aString];
}

NSRange NSString_rangeOfString_options (NSString* THIS, NSString * aString, unsigned mask) {
	NSLog(@"NSString_rangeOfString_options");
	return [THIS rangeOfString:aString options:mask];
}

NSRange NSString_rangeOfString_options_range (NSString* THIS, NSString * aString, unsigned mask, NSRange searchRange) {
	NSLog(@"NSString_rangeOfString_options_range");
	return [THIS rangeOfString:aString options:mask range:searchRange];
}

NSRange NSString_rangeOfCharacterFromSet (NSString* THIS, NSCharacterSet * aSet) {
	NSLog(@"NSString_rangeOfCharacterFromSet");
	return [THIS rangeOfCharacterFromSet:aSet];
}

NSRange NSString_rangeOfCharacterFromSet_options (NSString* THIS, NSCharacterSet * aSet, unsigned int mask) {
	NSLog(@"NSString_rangeOfCharacterFromSet_options");
	return [THIS rangeOfCharacterFromSet:aSet options:mask];
}

NSRange NSString_rangeOfCharacterFromSet_options_range (NSString* THIS, NSCharacterSet * aSet, unsigned int mask, NSRange searchRange) {
	NSLog(@"NSString_rangeOfCharacterFromSet_options_range");
	return [THIS rangeOfCharacterFromSet:aSet options:mask range:searchRange];
}

NSRange NSString_rangeOfComposedCharacterSequenceAtIndex (NSString* THIS, unsigned index) {
	NSLog(@"NSString_rangeOfComposedCharacterSequenceAtIndex");
	return [THIS rangeOfComposedCharacterSequenceAtIndex:index];
}

NSString * NSString_stringByAppendingString (NSString* THIS, NSString * aString) {
	NSLog(@"NSString_stringByAppendingString");
	return [THIS stringByAppendingString:aString];
}

/* UNSUPPORTED: 
- (NSString *)stringByAppendingFormat:(NSString *)format, ...;
 */

double NSString_doubleValue (NSString* THIS) {
	NSLog(@"NSString_doubleValue");
	return [THIS doubleValue];
}
float NSString_floatValue (NSString* THIS) {
	NSLog(@"NSString_floatValue");
	return [THIS floatValue];
}
int NSString_intValue (NSString* THIS) {
	NSLog(@"NSString_intValue");
	return [THIS intValue];
}
NSArray * NSString_componentsSeparatedByString (NSString* THIS, NSString * separator) {
	NSLog(@"NSString_componentsSeparatedByString");
	return [THIS componentsSeparatedByString:separator];
}

NSString * NSString_commonPrefixWithString_options (NSString* THIS, NSString * aString, unsigned mask) {
	NSLog(@"NSString_commonPrefixWithString_options");
	return [THIS commonPrefixWithString:aString options:mask];
}

NSString * NSString_uppercaseString (NSString* THIS) {
	NSLog(@"NSString_uppercaseString");
	return [THIS uppercaseString];
}
NSString * NSString_lowercaseString (NSString* THIS) {
	NSLog(@"NSString_lowercaseString");
	return [THIS lowercaseString];
}
NSString * NSString_capitalizedString (NSString* THIS) {
	NSLog(@"NSString_capitalizedString");
	return [THIS capitalizedString];
}
NSString * NSString_stringByTrimmingCharactersInSet (NSString* THIS, NSCharacterSet * set) {
	NSLog(@"NSString_stringByTrimmingCharactersInSet");
	return [THIS stringByTrimmingCharactersInSet:set];
}

NSString * NSString_stringByPaddingToLength_withString_startingAtIndex (NSString* THIS, unsigned newLength, NSString * padString, unsigned padIndex) {
	NSLog(@"NSString_stringByPaddingToLength_withString_startingAtIndex");
	return [THIS stringByPaddingToLength:newLength withString:padString startingAtIndex:padIndex];
}

void NSString_getLineStart_end_contentsEnd_forRange (NSString* THIS, unsigned * startPtr, unsigned * lineEndPtr, unsigned * contentsEndPtr, NSRange range) {
	NSLog(@"NSString_getLineStart_end_contentsEnd_forRange");
	[THIS getLineStart:startPtr end:lineEndPtr contentsEnd:contentsEndPtr forRange:range];
}

NSRange NSString_lineRangeForRange (NSString* THIS, NSRange range) {
	NSLog(@"NSString_lineRangeForRange");
	return [THIS lineRangeForRange:range];
}

void NSString_getParagraphStart_end_contentsEnd_forRange (NSString* THIS, unsigned * startPtr, unsigned * parEndPtr, unsigned * contentsEndPtr, NSRange range) {
	NSLog(@"NSString_getParagraphStart_end_contentsEnd_forRange");
	[THIS getParagraphStart:startPtr end:parEndPtr contentsEnd:contentsEndPtr forRange:range];
}

NSRange NSString_paragraphRangeForRange (NSString* THIS, NSRange range) {
	NSLog(@"NSString_paragraphRangeForRange");
	return [THIS paragraphRangeForRange:range];
}

NSString * NSString_description (NSString* THIS) {
	NSLog(@"NSString_description");
	return [THIS description];
}
unsigned NSString_hash (NSString* THIS) {
	NSLog(@"NSString_hash");
	return [THIS hash];
}
NSStringEncoding NSString_fastestEncoding (NSString* THIS) {
	NSLog(@"NSString_fastestEncoding");
	return [THIS fastestEncoding];
}
NSStringEncoding NSString_smallestEncoding (NSString* THIS) {
	NSLog(@"NSString_smallestEncoding");
	return [THIS smallestEncoding];
}
NSData * NSString_dataUsingEncoding_allowLossyConversion (NSString* THIS, NSStringEncoding encoding, BOOL lossy) {
	NSLog(@"NSString_dataUsingEncoding_allowLossyConversion");
	return [THIS dataUsingEncoding:encoding allowLossyConversion:lossy];
}

NSData * NSString_dataUsingEncoding (NSString* THIS, NSStringEncoding encoding) {
	NSLog(@"NSString_dataUsingEncoding");
	return [THIS dataUsingEncoding:encoding];
}

BOOL NSString_canBeConvertedToEncoding (NSString* THIS, NSStringEncoding encoding) {
	NSLog(@"NSString_canBeConvertedToEncoding");
	return [THIS canBeConvertedToEncoding:encoding];
}

NSString * NSString_decomposedStringWithCanonicalMapping (NSString* THIS) {
	NSLog(@"NSString_decomposedStringWithCanonicalMapping");
	return [THIS decomposedStringWithCanonicalMapping];
}
NSString * NSString_precomposedStringWithCanonicalMapping (NSString* THIS) {
	NSLog(@"NSString_precomposedStringWithCanonicalMapping");
	return [THIS precomposedStringWithCanonicalMapping];
}
NSString * NSString_decomposedStringWithCompatibilityMapping (NSString* THIS) {
	NSLog(@"NSString_decomposedStringWithCompatibilityMapping");
	return [THIS decomposedStringWithCompatibilityMapping];
}
NSString * NSString_precomposedStringWithCompatibilityMapping (NSString* THIS) {
	NSLog(@"NSString_precomposedStringWithCompatibilityMapping");
	return [THIS precomposedStringWithCompatibilityMapping];
}
const char * NSString_UTF8String (NSString* THIS) {
	NSLog(@"NSString_UTF8String");
	return [THIS UTF8String];
}
const char * NSString_cString (NSString* THIS) {
	NSLog(@"NSString_cString");
	return [THIS cString];
}
const char * NSString_lossyCString (NSString* THIS) {
	NSLog(@"NSString_lossyCString");
	return [THIS lossyCString];
}
unsigned NSString_cStringLength (NSString* THIS) {
	NSLog(@"NSString_cStringLength");
	return [THIS cStringLength];
}
void NSString_getCString (NSString* THIS, char * bytes) {
	NSLog(@"NSString_getCString");
	[THIS getCString:bytes];
}

void NSString_getCString_maxLength (NSString* THIS, char * bytes, unsigned maxLength) {
	NSLog(@"NSString_getCString_maxLength");
	[THIS getCString:bytes maxLength:maxLength];
}

void NSString_getCString_maxLength_range_remainingRange (NSString* THIS, char * bytes, unsigned maxLength, NSRange aRange, NSRangePointer leftoverRange) {
	NSLog(@"NSString_getCString_maxLength_range_remainingRange");
	[THIS getCString:bytes maxLength:maxLength range:aRange remainingRange:leftoverRange];
}

NSStringEncoding NSString_defaultCStringEncoding (NSString* THIS) {
	NSLog(@"NSString_defaultCStringEncoding");
	return [THIS defaultCStringEncoding];
}
BOOL NSString_writeToFile_atomically (NSString* THIS, NSString * path, BOOL useAuxiliaryFile) {
	NSLog(@"NSString_writeToFile_atomically");
	return [THIS writeToFile:path atomically:useAuxiliaryFile];
}

BOOL NSString_writeToURL_atomically (NSString* THIS, NSURL * url, BOOL atomically) {
	NSLog(@"NSString_writeToURL_atomically");
	return [THIS writeToURL:url atomically:atomically];
}

const NSStringEncoding * NSString_availableStringEncodings (NSString* THIS) {
	NSLog(@"NSString_availableStringEncodings");
	return [THIS availableStringEncodings];
}
NSString * NSString_localizedNameOfStringEncoding (NSString* THIS, NSStringEncoding encoding) {
	NSLog(@"NSString_localizedNameOfStringEncoding");
	return [THIS localizedNameOfStringEncoding:encoding];
}

NSString * NSString_string (NSString* THIS) {
	NSLog(@"NSString_string");
	return [THIS string];
}
NSString * NSString_stringWithString (NSString* THIS, NSString * string) {
	NSLog(@"NSString_stringWithString");
	return [THIS stringWithString:string];
}

NSString * NSString_stringWithCharacters_length (NSString* THIS, const unichar * characters, unsigned length) {
	NSLog(@"NSString_stringWithCharacters_length");
	return [THIS stringWithCharacters:characters length:length];
}

NSString * NSString_stringWithCString_length (NSString* THIS, const char * bytes, unsigned length) {
	NSLog(@"NSString_stringWithCString_length");
	return [THIS stringWithCString:bytes length:length];
}

NSString * NSString_stringWithCString (NSString* THIS, const char * bytes) {
	NSLog(@"NSString_stringWithCString");
	return [THIS stringWithCString:bytes];
}

NSString * NSString_stringWithUTF8String (NSString* THIS, const char * bytes) {
	NSLog(@"NSString_stringWithUTF8String");
	return [THIS stringWithUTF8String:bytes];
}

/* UNSUPPORTED: 
+ (id)stringWithFormat:(NSString *)format, ...;
 */

NSString * NSString_stringWithContentsOfFile (NSString* THIS, NSString * path) {
	NSLog(@"NSString_stringWithContentsOfFile");
	return [THIS stringWithContentsOfFile:path];
}

NSString * NSString_stringWithContentsOfURL (NSString* THIS, NSURL * url) {
	NSLog(@"NSString_stringWithContentsOfURL");
	return [THIS stringWithContentsOfURL:url];
}

/* UNSUPPORTED: 
+ (id)localizedStringWithFormat:(NSString *)format, ...;
 */

NSString * NSString_init (NSString* THIS) {
	NSLog(@"NSString_init");
	return [THIS init];
}
NSString * NSString_initWithCharactersNoCopy_length_freeWhenDone (NSString* THIS, unichar * characters, unsigned length, BOOL freeBuffer) {
	NSLog(@"NSString_initWithCharactersNoCopy_length_freeWhenDone");
	return [THIS initWithCharactersNoCopy:characters length:length freeWhenDone:freeBuffer];
}

NSString * NSString_initWithCharacters_length (NSString* THIS, const unichar * characters, unsigned length) {
	NSLog(@"NSString_initWithCharacters_length");
	return [THIS initWithCharacters:characters length:length];
}

NSString * NSString_initWithBytes_length_encoding (NSString* THIS, const void * bytes, unsigned len, NSStringEncoding encoding) {
	NSLog(@"NSString_initWithBytes_length_encoding");
	return [THIS initWithBytes:bytes length:len encoding:encoding];
}

NSString * NSString_initWithBytesNoCopy_length_encoding_freeWhenDone (NSString* THIS, void * bytes, unsigned len, NSStringEncoding encoding, BOOL freeBuffer) {
	NSLog(@"NSString_initWithBytesNoCopy_length_encoding_freeWhenDone");
	return [THIS initWithBytesNoCopy:bytes length:len encoding:encoding freeWhenDone:freeBuffer];
}

NSString * NSString_initWithUTF8String (NSString* THIS, const char * bytes) {
	NSLog(@"NSString_initWithUTF8String");
	return [THIS initWithUTF8String:bytes];
}

NSString * NSString_initWithString (NSString* THIS, NSString * aString) {
	NSLog(@"NSString_initWithString");
	return [THIS initWithString:aString];
}

/* UNSUPPORTED: 
- (id)initWithFormat:(NSString *)format, ...;
 */

NSString * NSString_initWithFormat_arguments (NSString* THIS, NSString * format, va_list argList) {
	NSLog(@"NSString_initWithFormat_arguments");
	return [THIS initWithFormat:format arguments:argList];
}

/* UNSUPPORTED: 
- (id)initWithFormat:(NSString *)format locale:(NSDictionary *)dict, ...;
 */

NSString * NSString_initWithFormat_locale_arguments (NSString* THIS, NSString * format, NSDictionary * dict, va_list argList) {
	NSLog(@"NSString_initWithFormat_locale_arguments");
	return [THIS initWithFormat:format locale:dict arguments:argList];
}

NSString * NSString_initWithData_encoding (NSString* THIS, NSData * data, NSStringEncoding encoding) {
	NSLog(@"NSString_initWithData_encoding");
	return [THIS initWithData:data encoding:encoding];
}

NSString * NSString_initWithContentsOfFile (NSString* THIS, NSString * path) {
	NSLog(@"NSString_initWithContentsOfFile");
	return [THIS initWithContentsOfFile:path];
}

NSString * NSString_initWithContentsOfURL (NSString* THIS, NSURL * url) {
	NSLog(@"NSString_initWithContentsOfURL");
	return [THIS initWithContentsOfURL:url];
}

NSString * NSString_initWithCStringNoCopy_length_freeWhenDone (NSString* THIS, char * bytes, unsigned length, BOOL freeBuffer) {
	NSLog(@"NSString_initWithCStringNoCopy_length_freeWhenDone");
	return [THIS initWithCStringNoCopy:bytes length:length freeWhenDone:freeBuffer];
}

NSString * NSString_initWithCString_length (NSString* THIS, const char * bytes, unsigned length) {
	NSLog(@"NSString_initWithCString_length");
	return [THIS initWithCString:bytes length:length];
}

NSString * NSString_initWithCString (NSString* THIS, const char * bytes) {
	NSLog(@"NSString_initWithCString");
	return [THIS initWithCString:bytes];
}

void NSString_replaceCharactersInRange_withString (NSString* THIS, NSRange range, NSString * aString) {
	NSLog(@"NSString_replaceCharactersInRange_withString");
	[THIS replaceCharactersInRange:range withString:aString];
}

void NSString_insertString_atIndex (NSString* THIS, NSString * aString, unsigned loc) {
	NSLog(@"NSString_insertString_atIndex");
	[THIS insertString:aString atIndex:loc];
}

void NSString_deleteCharactersInRange (NSString* THIS, NSRange range) {
	NSLog(@"NSString_deleteCharactersInRange");
	[THIS deleteCharactersInRange:range];
}

void NSString_appendString (NSString* THIS, NSString * aString) {
	NSLog(@"NSString_appendString");
	[THIS appendString:aString];
}

/* UNSUPPORTED: 
- (void)appendFormat:(NSString *)format, ...;
 */

void NSString_setString (NSString* THIS, NSString * aString) {
	NSLog(@"NSString_setString");
	[THIS setString:aString];
}

NSString * NSString_stringWithCapacity (NSString* THIS, unsigned capacity) {
	NSLog(@"NSString_stringWithCapacity");
	return [THIS stringWithCapacity:capacity];
}

NSString * NSString_initWithCapacity (NSString* THIS, unsigned capacity) {
	NSLog(@"NSString_initWithCapacity");
	return [THIS initWithCapacity:capacity];
}

unsigned int NSString_replaceOccurrencesOfString_withString_options_range (NSString* THIS, NSString * target, NSString * replacement, unsigned opts, NSRange searchRange) {
	NSLog(@"NSString_replaceOccurrencesOfString_withString_options_range");
	return [THIS replaceOccurrencesOfString:target withString:replacement options:opts range:searchRange];
}

NSString * NSString_propertyList (NSString* THIS) {
	NSLog(@"NSString_propertyList");
	return [THIS propertyList];
}
NSDictionary * NSString_propertyListFromStringsFileFormat (NSString* THIS) {
	NSLog(@"NSString_propertyListFromStringsFileFormat");
	return [THIS propertyListFromStringsFileFormat];
}
NSString * NSString_alloc() {
	NSLog(@"NSString_alloc()");
	return [NSString alloc];
}
