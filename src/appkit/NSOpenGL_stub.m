/* Generated by genstubs.pl
 (c) 2004 kangaroo
*/

#include <Cocoa/Cocoa.h>

#include <Foundation/NSObject.h>

NSOpenGL * NSOpenGL_initWithAttributes (NSOpenGL* THIS, NSOpenGLPixelFormatAttribute* attribs) {
	NSLog(@"NSOpenGL_initWithAttributes");
	return [THIS initWithAttributes:attribs];
}

NSOpenGL * NSOpenGL_initWithData (NSOpenGL* THIS, NSData* attribs) {
	NSLog(@"NSOpenGL_initWithData");
	return [THIS initWithData:attribs];
}

NSData* NSOpenGL_attributes (NSOpenGL* THIS) {
	NSLog(@"NSOpenGL_attributes");
	return [THIS attributes];
}
void NSOpenGL_setAttributes (NSOpenGL* THIS, NSData* attribs) {
	NSLog(@"NSOpenGL_setAttributes");
	[THIS setAttributes:attribs];
}

void NSOpenGL_getValues_forAttribute_forVirtualScreen (NSOpenGL* THIS, long* vals, NSOpenGLPixelFormatAttribute attrib, int screen) {
	NSLog(@"NSOpenGL_getValues_forAttribute_forVirtualScreen");
	[THIS getValues:vals forAttribute:attrib forVirtualScreen:screen];
}

int NSOpenGL_numberOfVirtualScreens (NSOpenGL* THIS) {
	NSLog(@"NSOpenGL_numberOfVirtualScreens");
	return [THIS numberOfVirtualScreens];
}
void * NSOpenGL_CGLPixelFormatObj (NSOpenGL* THIS) {
	NSLog(@"NSOpenGL_CGLPixelFormatObj");
	[THIS CGLPixelFormatObj];
}
NSOpenGL * NSOpenGL_initWithTextureTarget_pixelsWide_pixelsHigh (NSOpenGL* THIS, int pixelsWide, int pixelsHigh) {
	NSLog(@"NSOpenGL_initWithTextureTarget_pixelsWide_pixelsHigh");
	return [THIS initWithTextureTargetpixelsWide:pixelsWide pixelsHigh:pixelsHigh];
}

int NSOpenGL_pixelsWide (NSOpenGL* THIS) {
	NSLog(@"NSOpenGL_pixelsWide");
	return [THIS pixelsWide];
}
int NSOpenGL_pixelsHigh (NSOpenGL* THIS) {
	NSLog(@"NSOpenGL_pixelsHigh");
	return [THIS pixelsHigh];
}
/* UNSUPPORTED: 
- (unsigned long*GLenum*)textureTarget;
 */

/* UNSUPPORTED: 
- (unsigned long*GLenum*)textureInternalFormat;
 */

/* UNSUPPORTED: 
- (long*GLint*)textureMaxMipMapLevel;
 */

NSOpenGL * NSOpenGL_initWithFormat_shareContext (NSOpenGL* THIS, NSOpenGLPixelFormat * format, NSOpenGLContext * share) {
	NSLog(@"NSOpenGL_initWithFormat_shareContext");
	return [THIS initWithFormat:format shareContext:share];
}

void NSOpenGL_setView (NSOpenGL* THIS, NSView * view) {
	NSLog(@"NSOpenGL_setView");
	[THIS setView:view];
}

NSView * NSOpenGL_view (NSOpenGL* THIS) {
	NSLog(@"NSOpenGL_view");
	return [THIS view];
}
void NSOpenGL_setFullScreen (NSOpenGL* THIS) {
	NSLog(@"NSOpenGL_setFullScreen");
	[THIS setFullScreen];
}
void NSOpenGL_setOffScreen_width_height_rowbytes (NSOpenGL* THIS, void * baseaddr, long width, long height, long rowbytes) {
	NSLog(@"NSOpenGL_setOffScreen_width_height_rowbytes");
	[THIS setOffScreen:baseaddr width:width height:height rowbytes:rowbytes];
}

void NSOpenGL_clearDrawable (NSOpenGL* THIS) {
	NSLog(@"NSOpenGL_clearDrawable");
	[THIS clearDrawable];
}
void NSOpenGL_update (NSOpenGL* THIS) {
	NSLog(@"NSOpenGL_update");
	[THIS update];
}
void NSOpenGL_flushBuffer (NSOpenGL* THIS) {
	NSLog(@"NSOpenGL_flushBuffer");
	[THIS flushBuffer];
}
void NSOpenGL_makeCurrentContext (NSOpenGL* THIS) {
	NSLog(@"NSOpenGL_makeCurrentContext");
	[THIS makeCurrentContext];
}
void NSOpenGL_clearCurrentContext (NSOpenGL* THIS) {
	NSLog(@"NSOpenGL_clearCurrentContext");
	[THIS clearCurrentContext];
}
NSOpenGLContext * NSOpenGL_currentContext (NSOpenGL* THIS) {
	NSLog(@"NSOpenGL_currentContext");
	return [THIS currentContext];
}
void NSOpenGL_copyAttributesFromContext_withMask (NSOpenGL* THIS, NSOpenGLContext * context, unsigned long mask) {
	NSLog(@"NSOpenGL_copyAttributesFromContext_withMask");
	[THIS copyAttributesFromContext:context withMask:mask];
}

void NSOpenGL_setValues_forParameter (NSOpenGL* THIS, const long * vals, NSOpenGLContextParameter param) {
	NSLog(@"NSOpenGL_setValues_forParameter");
	[THIS setValues:vals forParameter:param];
}

void NSOpenGL_getValues_forParameter (NSOpenGL* THIS, long * vals, NSOpenGLContextParameter param) {
	NSLog(@"NSOpenGL_getValues_forParameter");
	[THIS getValues:vals forParameter:param];
}

void NSOpenGL_setCurrentVirtualScreen (NSOpenGL* THIS, int screen) {
	NSLog(@"NSOpenGL_setCurrentVirtualScreen");
	[THIS setCurrentVirtualScreen:screen];
}

int NSOpenGL_currentVirtualScreen (NSOpenGL* THIS) {
	NSLog(@"NSOpenGL_currentVirtualScreen");
	return [THIS currentVirtualScreen];
}
/* UNSUPPORTED: 
- (void)createTexture:(unsigned long*GLenum*)target fromView:(NSView*)view internalFormat:(unsigned long*GLenum*)format;
 */

void * NSOpenGL_CGLContextObj (NSOpenGL* THIS) {
	NSLog(@"NSOpenGL_CGLContextObj");
	[THIS CGLContextObj];
}
void NSOpenGL_setPixelBuffer_currentVirtualScreen (NSOpenGL* THIS, NSOpenGLPixelBuffer * pixelBuffer, int screen) {
	NSLog(@"NSOpenGL_setPixelBuffer_currentVirtualScreen");
	[THIS setPixelBuffer:pixelBuffer currentVirtualScreen:screen];
}

NSOpenGLPixelBuffer * NSOpenGL_pixelBuffer (NSOpenGL* THIS) {
	NSLog(@"NSOpenGL_pixelBuffer");
	return [THIS pixelBuffer];
}
/* UNSUPPORTED: 
- (unsigned long*GLenum*)pixelBufferCubeMapFace;
 */

/* UNSUPPORTED: 
- (long*GLint*)pixelBufferMipMapLevel;
 */

/* UNSUPPORTED: 
- (void)setTextureImageToPixelBuffer:(NSOpenGLPixelBuffer *)pixelBuffer colorBuffer:(unsigned long*GLenum*)source;
 */

NSOpenGL * NSOpenGL_alloc() {
	NSLog(@"NSOpenGL_alloc()");
	return [NSOpenGL alloc];
}
