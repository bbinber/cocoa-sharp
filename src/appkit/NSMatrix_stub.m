/* Generated by genstubs.pl
 (c) 2004 kangaroo
*/

#include <Cocoa/Cocoa.h>

#include <AppKit/NSControl.h>

NSMatrix * NSMatrix_initWithFrame (NSMatrix* THIS, NSRect frameRect) {
	NSLog(@"NSMatrix_initWithFrame");
	return [THIS initWithFrame:frameRect];
}

NSMatrix * NSMatrix_initWithFrame_mode_prototype_numberOfRows_numberOfColumns (NSMatrix* THIS, NSRect frameRect, int aMode, NSCell * aCell, int rowsHigh, int colsWide) {
	NSLog(@"NSMatrix_initWithFrame_mode_prototype_numberOfRows_numberOfColumns");
	return [THIS initWithFrame:frameRect mode:aMode prototype:aCell numberOfRows:rowsHigh numberOfColumns:colsWide];
}

NSMatrix * NSMatrix_initWithFrame_mode_cellClass_numberOfRows_numberOfColumns (NSMatrix* THIS, NSRect frameRect, int aMode, Class factoryId, int rowsHigh, int colsWide) {
	NSLog(@"NSMatrix_initWithFrame_mode_cellClass_numberOfRows_numberOfColumns");
	return [THIS initWithFrame:frameRect mode:aMode cellClass:factoryId numberOfRows:rowsHigh numberOfColumns:colsWide];
}

void NSMatrix_setCellClass (NSMatrix* THIS, Class factoryId) {
	NSLog(@"NSMatrix_setCellClass");
	[THIS setCellClass:factoryId];
}

Class NSMatrix_cellClass (NSMatrix* THIS) {
	NSLog(@"NSMatrix_cellClass");
	return [THIS cellClass];
}
NSMatrix * NSMatrix_prototype (NSMatrix* THIS) {
	NSLog(@"NSMatrix_prototype");
	return [THIS prototype];
}
void NSMatrix_setPrototype (NSMatrix* THIS, NSCell * aCell) {
	NSLog(@"NSMatrix_setPrototype");
	[THIS setPrototype:aCell];
}

NSCell * NSMatrix_makeCellAtRow_column (NSMatrix* THIS, int row, int col) {
	NSLog(@"NSMatrix_makeCellAtRow_column");
	return [THIS makeCellAtRow:row column:col];
}

NSMatrixMode NSMatrix_mode (NSMatrix* THIS) {
	NSLog(@"NSMatrix_mode");
	return [THIS mode];
}
void NSMatrix_setMode (NSMatrix* THIS, NSMatrixMode aMode) {
	NSLog(@"NSMatrix_setMode");
	[THIS setMode:aMode];
}

void NSMatrix_setAllowsEmptySelection (NSMatrix* THIS, BOOL flag) {
	NSLog(@"NSMatrix_setAllowsEmptySelection");
	[THIS setAllowsEmptySelection:flag];
}

BOOL NSMatrix_allowsEmptySelection (NSMatrix* THIS) {
	NSLog(@"NSMatrix_allowsEmptySelection");
	return [THIS allowsEmptySelection];
}
void NSMatrix_sendAction_to_forAllCells (NSMatrix* THIS, SEL aSelector, NSMatrix * anObject, BOOL flag) {
	NSLog(@"NSMatrix_sendAction_to_forAllCells");
	[THIS sendAction:aSelector to:anObject forAllCells:flag];
}

NSArray * NSMatrix_cells (NSMatrix* THIS) {
	NSLog(@"NSMatrix_cells");
	return [THIS cells];
}
void NSMatrix_sortUsingSelector (NSMatrix* THIS, SEL comparator) {
	NSLog(@"NSMatrix_sortUsingSelector");
	[THIS sortUsingSelector:comparator];
}

void NSMatrix_sortUsingFunction_context (NSMatrix* THIS, void * context) {
	NSLog(@"NSMatrix_sortUsingFunction_context");
	[THIS sortUsingFunctioncontext:context];
}

NSMatrix * NSMatrix_selectedCell (NSMatrix* THIS) {
	NSLog(@"NSMatrix_selectedCell");
	return [THIS selectedCell];
}
NSArray * NSMatrix_selectedCells (NSMatrix* THIS) {
	NSLog(@"NSMatrix_selectedCells");
	return [THIS selectedCells];
}
int NSMatrix_selectedRow (NSMatrix* THIS) {
	NSLog(@"NSMatrix_selectedRow");
	return [THIS selectedRow];
}
int NSMatrix_selectedColumn (NSMatrix* THIS) {
	NSLog(@"NSMatrix_selectedColumn");
	return [THIS selectedColumn];
}
void NSMatrix_setSelectionByRect (NSMatrix* THIS, BOOL flag) {
	NSLog(@"NSMatrix_setSelectionByRect");
	[THIS setSelectionByRect:flag];
}

BOOL NSMatrix_isSelectionByRect (NSMatrix* THIS) {
	NSLog(@"NSMatrix_isSelectionByRect");
	return [THIS isSelectionByRect];
}
void NSMatrix_setSelectionFrom_to_anchor_highlight (NSMatrix* THIS, int startPos, int endPos, int anchorPos, BOOL lit) {
	NSLog(@"NSMatrix_setSelectionFrom_to_anchor_highlight");
	[THIS setSelectionFrom:startPos to:endPos anchor:anchorPos highlight:lit];
}

void NSMatrix_deselectSelectedCell (NSMatrix* THIS) {
	NSLog(@"NSMatrix_deselectSelectedCell");
	[THIS deselectSelectedCell];
}
void NSMatrix_deselectAllCells (NSMatrix* THIS) {
	NSLog(@"NSMatrix_deselectAllCells");
	[THIS deselectAllCells];
}
void NSMatrix_selectCellAtRow_column (NSMatrix* THIS, int row, int col) {
	NSLog(@"NSMatrix_selectCellAtRow_column");
	[THIS selectCellAtRow:row column:col];
}

void NSMatrix_selectAll (NSMatrix* THIS, NSMatrix * sender) {
	NSLog(@"NSMatrix_selectAll");
	[THIS selectAll:sender];
}

BOOL NSMatrix_selectCellWithTag (NSMatrix* THIS, int anInt) {
	NSLog(@"NSMatrix_selectCellWithTag");
	return [THIS selectCellWithTag:anInt];
}

NSSize NSMatrix_cellSize (NSMatrix* THIS) {
	NSLog(@"NSMatrix_cellSize");
	return [THIS cellSize];
}
void NSMatrix_setCellSize (NSMatrix* THIS, NSSize aSize) {
	NSLog(@"NSMatrix_setCellSize");
	[THIS setCellSize:aSize];
}

NSSize NSMatrix_intercellSpacing (NSMatrix* THIS) {
	NSLog(@"NSMatrix_intercellSpacing");
	return [THIS intercellSpacing];
}
void NSMatrix_setIntercellSpacing (NSMatrix* THIS, NSSize aSize) {
	NSLog(@"NSMatrix_setIntercellSpacing");
	[THIS setIntercellSpacing:aSize];
}

void NSMatrix_setScrollable (NSMatrix* THIS, BOOL flag) {
	NSLog(@"NSMatrix_setScrollable");
	[THIS setScrollable:flag];
}

void NSMatrix_setBackgroundColor (NSMatrix* THIS, NSColor * color) {
	NSLog(@"NSMatrix_setBackgroundColor");
	[THIS setBackgroundColor:color];
}

NSColor * NSMatrix_backgroundColor (NSMatrix* THIS) {
	NSLog(@"NSMatrix_backgroundColor");
	return [THIS backgroundColor];
}
void NSMatrix_setCellBackgroundColor (NSMatrix* THIS, NSColor * color) {
	NSLog(@"NSMatrix_setCellBackgroundColor");
	[THIS setCellBackgroundColor:color];
}

NSColor * NSMatrix_cellBackgroundColor (NSMatrix* THIS) {
	NSLog(@"NSMatrix_cellBackgroundColor");
	return [THIS cellBackgroundColor];
}
void NSMatrix_setDrawsCellBackground (NSMatrix* THIS, BOOL flag) {
	NSLog(@"NSMatrix_setDrawsCellBackground");
	[THIS setDrawsCellBackground:flag];
}

BOOL NSMatrix_drawsCellBackground (NSMatrix* THIS) {
	NSLog(@"NSMatrix_drawsCellBackground");
	return [THIS drawsCellBackground];
}
void NSMatrix_setDrawsBackground (NSMatrix* THIS, BOOL flag) {
	NSLog(@"NSMatrix_setDrawsBackground");
	[THIS setDrawsBackground:flag];
}

BOOL NSMatrix_drawsBackground (NSMatrix* THIS) {
	NSLog(@"NSMatrix_drawsBackground");
	return [THIS drawsBackground];
}
void NSMatrix_setState_atRow_column (NSMatrix* THIS, int value, int row, int col) {
	NSLog(@"NSMatrix_setState_atRow_column");
	[THIS setState:value atRow:row column:col];
}

void NSMatrix_getNumberOfRows_columns (NSMatrix* THIS, int * rowCount, int * colCount) {
	NSLog(@"NSMatrix_getNumberOfRows_columns");
	[THIS getNumberOfRows:rowCount columns:colCount];
}

int NSMatrix_numberOfRows (NSMatrix* THIS) {
	NSLog(@"NSMatrix_numberOfRows");
	return [THIS numberOfRows];
}
int NSMatrix_numberOfColumns (NSMatrix* THIS) {
	NSLog(@"NSMatrix_numberOfColumns");
	return [THIS numberOfColumns];
}
NSMatrix * NSMatrix_cellAtRow_column (NSMatrix* THIS, int row, int col) {
	NSLog(@"NSMatrix_cellAtRow_column");
	return [THIS cellAtRow:row column:col];
}

NSRect NSMatrix_cellFrameAtRow_column (NSMatrix* THIS, int row, int col) {
	NSLog(@"NSMatrix_cellFrameAtRow_column");
	return [THIS cellFrameAtRow:row column:col];
}

BOOL NSMatrix_getRow_column_ofCell (NSMatrix* THIS, int * row, int * col, NSCell * aCell) {
	NSLog(@"NSMatrix_getRow_column_ofCell");
	return [THIS getRow:row column:col ofCell:aCell];
}

BOOL NSMatrix_getRow_column_forPoint (NSMatrix* THIS, int * row, int * col, NSPoint aPoint) {
	NSLog(@"NSMatrix_getRow_column_forPoint");
	return [THIS getRow:row column:col forPoint:aPoint];
}

void NSMatrix_renewRows_columns (NSMatrix* THIS, int newRows, int newCols) {
	NSLog(@"NSMatrix_renewRows_columns");
	[THIS renewRows:newRows columns:newCols];
}

void NSMatrix_putCell_atRow_column (NSMatrix* THIS, NSCell * newCell, int row, int col) {
	NSLog(@"NSMatrix_putCell_atRow_column");
	[THIS putCell:newCell atRow:row column:col];
}

void NSMatrix_addRow (NSMatrix* THIS) {
	NSLog(@"NSMatrix_addRow");
	[THIS addRow];
}
void NSMatrix_addRowWithCells (NSMatrix* THIS, NSArray * newCells) {
	NSLog(@"NSMatrix_addRowWithCells");
	[THIS addRowWithCells:newCells];
}

void NSMatrix_insertRow (NSMatrix* THIS, int row) {
	NSLog(@"NSMatrix_insertRow");
	[THIS insertRow:row];
}

void NSMatrix_insertRow_withCells (NSMatrix* THIS, int row, NSArray * newCells) {
	NSLog(@"NSMatrix_insertRow_withCells");
	[THIS insertRow:row withCells:newCells];
}

void NSMatrix_removeRow (NSMatrix* THIS, int row) {
	NSLog(@"NSMatrix_removeRow");
	[THIS removeRow:row];
}

void NSMatrix_addColumn (NSMatrix* THIS) {
	NSLog(@"NSMatrix_addColumn");
	[THIS addColumn];
}
void NSMatrix_addColumnWithCells (NSMatrix* THIS, NSArray * newCells) {
	NSLog(@"NSMatrix_addColumnWithCells");
	[THIS addColumnWithCells:newCells];
}

void NSMatrix_insertColumn (NSMatrix* THIS, int column) {
	NSLog(@"NSMatrix_insertColumn");
	[THIS insertColumn:column];
}

void NSMatrix_insertColumn_withCells (NSMatrix* THIS, int column, NSArray * newCells) {
	NSLog(@"NSMatrix_insertColumn_withCells");
	[THIS insertColumn:column withCells:newCells];
}

void NSMatrix_removeColumn (NSMatrix* THIS, int col) {
	NSLog(@"NSMatrix_removeColumn");
	[THIS removeColumn:col];
}

NSMatrix * NSMatrix_cellWithTag (NSMatrix* THIS, int anInt) {
	NSLog(@"NSMatrix_cellWithTag");
	return [THIS cellWithTag:anInt];
}

SEL NSMatrix_doubleAction (NSMatrix* THIS) {
	NSLog(@"NSMatrix_doubleAction");
	return [THIS doubleAction];
}
void NSMatrix_setDoubleAction (NSMatrix* THIS, SEL aSelector) {
	NSLog(@"NSMatrix_setDoubleAction");
	[THIS setDoubleAction:aSelector];
}

void NSMatrix_setAutosizesCells (NSMatrix* THIS, BOOL flag) {
	NSLog(@"NSMatrix_setAutosizesCells");
	[THIS setAutosizesCells:flag];
}

BOOL NSMatrix_autosizesCells (NSMatrix* THIS) {
	NSLog(@"NSMatrix_autosizesCells");
	return [THIS autosizesCells];
}
void NSMatrix_sizeToCells (NSMatrix* THIS) {
	NSLog(@"NSMatrix_sizeToCells");
	[THIS sizeToCells];
}
void NSMatrix_setValidateSize (NSMatrix* THIS, BOOL flag) {
	NSLog(@"NSMatrix_setValidateSize");
	[THIS setValidateSize:flag];
}

void NSMatrix_drawCellAtRow_column (NSMatrix* THIS, int row, int col) {
	NSLog(@"NSMatrix_drawCellAtRow_column");
	[THIS drawCellAtRow:row column:col];
}

void NSMatrix_highlightCell_atRow_column (NSMatrix* THIS, BOOL flag, int row, int col) {
	NSLog(@"NSMatrix_highlightCell_atRow_column");
	[THIS highlightCell:flag atRow:row column:col];
}

void NSMatrix_setAutoscroll (NSMatrix* THIS, BOOL flag) {
	NSLog(@"NSMatrix_setAutoscroll");
	[THIS setAutoscroll:flag];
}

BOOL NSMatrix_isAutoscroll (NSMatrix* THIS) {
	NSLog(@"NSMatrix_isAutoscroll");
	return [THIS isAutoscroll];
}
void NSMatrix_scrollCellToVisibleAtRow_column (NSMatrix* THIS, int row, int col) {
	NSLog(@"NSMatrix_scrollCellToVisibleAtRow_column");
	[THIS scrollCellToVisibleAtRow:row column:col];
}

int NSMatrix_mouseDownFlags (NSMatrix* THIS) {
	NSLog(@"NSMatrix_mouseDownFlags");
	return [THIS mouseDownFlags];
}
void NSMatrix_mouseDown (NSMatrix* THIS, NSEvent * theEvent) {
	NSLog(@"NSMatrix_mouseDown");
	[THIS mouseDown:theEvent];
}

BOOL NSMatrix_performKeyEquivalent (NSMatrix* THIS, NSEvent * theEvent) {
	NSLog(@"NSMatrix_performKeyEquivalent");
	return [THIS performKeyEquivalent:theEvent];
}

BOOL NSMatrix_sendAction (NSMatrix* THIS) {
	NSLog(@"NSMatrix_sendAction");
	return [THIS sendAction];
}
void NSMatrix_sendDoubleAction (NSMatrix* THIS) {
	NSLog(@"NSMatrix_sendDoubleAction");
	[THIS sendDoubleAction];
}
NSMatrix * NSMatrix_delegate (NSMatrix* THIS) {
	NSLog(@"NSMatrix_delegate");
	return [THIS delegate];
}
void NSMatrix_setDelegate (NSMatrix* THIS, NSMatrix * anObject) {
	NSLog(@"NSMatrix_setDelegate");
	[THIS setDelegate:anObject];
}

BOOL NSMatrix_textShouldBeginEditing (NSMatrix* THIS, NSText * textObject) {
	NSLog(@"NSMatrix_textShouldBeginEditing");
	return [THIS textShouldBeginEditing:textObject];
}

BOOL NSMatrix_textShouldEndEditing (NSMatrix* THIS, NSText * textObject) {
	NSLog(@"NSMatrix_textShouldEndEditing");
	return [THIS textShouldEndEditing:textObject];
}

void NSMatrix_textDidBeginEditing (NSMatrix* THIS, NSNotification * notification) {
	NSLog(@"NSMatrix_textDidBeginEditing");
	[THIS textDidBeginEditing:notification];
}

void NSMatrix_textDidEndEditing (NSMatrix* THIS, NSNotification * notification) {
	NSLog(@"NSMatrix_textDidEndEditing");
	[THIS textDidEndEditing:notification];
}

void NSMatrix_textDidChange (NSMatrix* THIS, NSNotification * notification) {
	NSLog(@"NSMatrix_textDidChange");
	[THIS textDidChange:notification];
}

void NSMatrix_selectText (NSMatrix* THIS, NSMatrix * sender) {
	NSLog(@"NSMatrix_selectText");
	[THIS selectText:sender];
}

NSMatrix * NSMatrix_selectTextAtRow_column (NSMatrix* THIS, int row, int col) {
	NSLog(@"NSMatrix_selectTextAtRow_column");
	return [THIS selectTextAtRow:row column:col];
}

BOOL NSMatrix_acceptsFirstMouse (NSMatrix* THIS, NSEvent * theEvent) {
	NSLog(@"NSMatrix_acceptsFirstMouse");
	return [THIS acceptsFirstMouse:theEvent];
}

void NSMatrix_resetCursorRects (NSMatrix* THIS) {
	NSLog(@"NSMatrix_resetCursorRects");
	[THIS resetCursorRects];
}
void NSMatrix_setToolTip_forCell (NSMatrix* THIS, NSString * toolTipString, NSCell * cell) {
	NSLog(@"NSMatrix_setToolTip_forCell");
	[THIS setToolTip:toolTipString forCell:cell];
}

NSString * NSMatrix_toolTipForCell (NSMatrix* THIS, NSCell * cell) {
	NSLog(@"NSMatrix_toolTipForCell");
	return [THIS toolTipForCell:cell];
}

void NSMatrix_setTabKeyTraversesCells (NSMatrix* THIS, BOOL flag) {
	NSLog(@"NSMatrix_setTabKeyTraversesCells");
	[THIS setTabKeyTraversesCells:flag];
}

BOOL NSMatrix_tabKeyTraversesCells (NSMatrix* THIS) {
	NSLog(@"NSMatrix_tabKeyTraversesCells");
	return [THIS tabKeyTraversesCells];
}
void NSMatrix_setKeyCell (NSMatrix* THIS, NSCell * keyCell) {
	NSLog(@"NSMatrix_setKeyCell");
	[THIS setKeyCell:keyCell];
}

NSMatrix * NSMatrix_keyCell (NSMatrix* THIS) {
	NSLog(@"NSMatrix_keyCell");
	return [THIS keyCell];
}
NSMatrix * NSMatrix_alloc() {
	NSLog(@"NSMatrix_alloc()");
	return [NSMatrix alloc];
}
