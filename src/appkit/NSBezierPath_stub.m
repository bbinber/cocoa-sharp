/* Generated by genstubs.pl
 * (c) 2004 kangaroo, C.J. and Urs
 */

#include <Cocoa/Cocoa.h>

#include <Foundation/NSObject.h>
#include <Foundation/NSGeometry.h>
#include <AppKit/NSFont.h>

NSBezierPath * NSBezierPath$_bezierPath () {
	NSLog(@"NSBezierPath$_bezierPath");
	return [NSBezierPath bezierPath];
}

NSBezierPath * NSBezierPath$_bezierPathWithRect (NSRect rect) {
	NSLog(@"NSBezierPath$_bezierPathWithRect");
	return [NSBezierPath bezierPathWithRect:rect];
}

NSBezierPath * NSBezierPath$_bezierPathWithOvalInRect (NSRect rect) {
	NSLog(@"NSBezierPath$_bezierPathWithOvalInRect");
	return [NSBezierPath bezierPathWithOvalInRect:rect];
}

void NSBezierPath$_fillRect (NSRect rect) {
	NSLog(@"NSBezierPath$_fillRect");
	[NSBezierPath fillRect:rect];
}

void NSBezierPath$_strokeRect (NSRect rect) {
	NSLog(@"NSBezierPath$_strokeRect");
	[NSBezierPath strokeRect:rect];
}

void NSBezierPath$_clipRect (NSRect rect) {
	NSLog(@"NSBezierPath$_clipRect");
	[NSBezierPath clipRect:rect];
}

void NSBezierPath$_strokeLineFromPoint_toPoint (NSPoint point1, NSPoint point2) {
	NSLog(@"NSBezierPath$_strokeLineFromPoint_toPoint");
	[NSBezierPath strokeLineFromPoint:point1 toPoint:point2];
}

void NSBezierPath$_drawPackedGlyphs_atPoint (const char * packedGlyphs, NSPoint point) {
	NSLog(@"NSBezierPath$_drawPackedGlyphs_atPoint");
	[NSBezierPath drawPackedGlyphs:packedGlyphs atPoint:point];
}

void NSBezierPath$_setDefaultMiterLimit (float limit) {
	NSLog(@"NSBezierPath$_setDefaultMiterLimit");
	[NSBezierPath setDefaultMiterLimit:limit];
}

float NSBezierPath$_defaultMiterLimit () {
	NSLog(@"NSBezierPath$_defaultMiterLimit");
	return [NSBezierPath defaultMiterLimit];
}

void NSBezierPath$_setDefaultFlatness (float flatness) {
	NSLog(@"NSBezierPath$_setDefaultFlatness");
	[NSBezierPath setDefaultFlatness:flatness];
}

float NSBezierPath$_defaultFlatness () {
	NSLog(@"NSBezierPath$_defaultFlatness");
	return [NSBezierPath defaultFlatness];
}

void NSBezierPath$_setDefaultWindingRule (NSWindingRule windingRule) {
	NSLog(@"NSBezierPath$_setDefaultWindingRule");
	[NSBezierPath setDefaultWindingRule:windingRule];
}

NSWindingRule NSBezierPath$_defaultWindingRule () {
	NSLog(@"NSBezierPath$_defaultWindingRule");
	return [NSBezierPath defaultWindingRule];
}

void NSBezierPath$_setDefaultLineCapStyle (NSLineCapStyle lineCapStyle) {
	NSLog(@"NSBezierPath$_setDefaultLineCapStyle");
	[NSBezierPath setDefaultLineCapStyle:lineCapStyle];
}

NSLineCapStyle NSBezierPath$_defaultLineCapStyle () {
	NSLog(@"NSBezierPath$_defaultLineCapStyle");
	return [NSBezierPath defaultLineCapStyle];
}

void NSBezierPath$_setDefaultLineJoinStyle (NSLineJoinStyle lineJoinStyle) {
	NSLog(@"NSBezierPath$_setDefaultLineJoinStyle");
	[NSBezierPath setDefaultLineJoinStyle:lineJoinStyle];
}

NSLineJoinStyle NSBezierPath$_defaultLineJoinStyle () {
	NSLog(@"NSBezierPath$_defaultLineJoinStyle");
	return [NSBezierPath defaultLineJoinStyle];
}

void NSBezierPath$_setDefaultLineWidth (float lineWidth) {
	NSLog(@"NSBezierPath$_setDefaultLineWidth");
	[NSBezierPath setDefaultLineWidth:lineWidth];
}

float NSBezierPath$_defaultLineWidth () {
	NSLog(@"NSBezierPath$_defaultLineWidth");
	return [NSBezierPath defaultLineWidth];
}

void NSBezierPath_moveToPoint (NSBezierPath* THIS, NSPoint point) {
	NSLog(@"NSBezierPath_moveToPoint");
	[THIS moveToPoint:point];
}

void NSBezierPath_lineToPoint (NSBezierPath* THIS, NSPoint point) {
	NSLog(@"NSBezierPath_lineToPoint");
	[THIS lineToPoint:point];
}

void NSBezierPath_curveToPoint_controlPoint1_controlPoint2 (NSBezierPath* THIS, NSPoint endPoint, NSPoint controlPoint1, NSPoint controlPoint2) {
	NSLog(@"NSBezierPath_curveToPoint_controlPoint1_controlPoint2");
	[THIS curveToPoint:endPoint controlPoint1:controlPoint1 controlPoint2:controlPoint2];
}

void NSBezierPath_closePath (NSBezierPath* THIS) {
	NSLog(@"NSBezierPath_closePath");
	[THIS closePath];
}

void NSBezierPath_removeAllPoints (NSBezierPath* THIS) {
	NSLog(@"NSBezierPath_removeAllPoints");
	[THIS removeAllPoints];
}

void NSBezierPath_relativeMoveToPoint (NSBezierPath* THIS, NSPoint point) {
	NSLog(@"NSBezierPath_relativeMoveToPoint");
	[THIS relativeMoveToPoint:point];
}

void NSBezierPath_relativeLineToPoint (NSBezierPath* THIS, NSPoint point) {
	NSLog(@"NSBezierPath_relativeLineToPoint");
	[THIS relativeLineToPoint:point];
}

void NSBezierPath_relativeCurveToPoint_controlPoint1_controlPoint2 (NSBezierPath* THIS, NSPoint endPoint, NSPoint controlPoint1, NSPoint controlPoint2) {
	NSLog(@"NSBezierPath_relativeCurveToPoint_controlPoint1_controlPoint2");
	[THIS relativeCurveToPoint:endPoint controlPoint1:controlPoint1 controlPoint2:controlPoint2];
}

float NSBezierPath_lineWidth (NSBezierPath* THIS) {
	NSLog(@"NSBezierPath_lineWidth");
	return [THIS lineWidth];
}

void NSBezierPath_setLineWidth (NSBezierPath* THIS, float lineWidth) {
	NSLog(@"NSBezierPath_setLineWidth");
	[THIS setLineWidth:lineWidth];
}

NSLineCapStyle NSBezierPath_lineCapStyle (NSBezierPath* THIS) {
	NSLog(@"NSBezierPath_lineCapStyle");
	return [THIS lineCapStyle];
}

void NSBezierPath_setLineCapStyle (NSBezierPath* THIS, NSLineCapStyle lineCapStyle) {
	NSLog(@"NSBezierPath_setLineCapStyle");
	[THIS setLineCapStyle:lineCapStyle];
}

NSLineJoinStyle NSBezierPath_lineJoinStyle (NSBezierPath* THIS) {
	NSLog(@"NSBezierPath_lineJoinStyle");
	return [THIS lineJoinStyle];
}

void NSBezierPath_setLineJoinStyle (NSBezierPath* THIS, NSLineJoinStyle lineJoinStyle) {
	NSLog(@"NSBezierPath_setLineJoinStyle");
	[THIS setLineJoinStyle:lineJoinStyle];
}

NSWindingRule NSBezierPath_windingRule (NSBezierPath* THIS) {
	NSLog(@"NSBezierPath_windingRule");
	return [THIS windingRule];
}

void NSBezierPath_setWindingRule (NSBezierPath* THIS, NSWindingRule windingRule) {
	NSLog(@"NSBezierPath_setWindingRule");
	[THIS setWindingRule:windingRule];
}

float NSBezierPath_miterLimit (NSBezierPath* THIS) {
	NSLog(@"NSBezierPath_miterLimit");
	return [THIS miterLimit];
}

void NSBezierPath_setMiterLimit (NSBezierPath* THIS, float miterLimit) {
	NSLog(@"NSBezierPath_setMiterLimit");
	[THIS setMiterLimit:miterLimit];
}

float NSBezierPath_flatness (NSBezierPath* THIS) {
	NSLog(@"NSBezierPath_flatness");
	return [THIS flatness];
}

void NSBezierPath_setFlatness (NSBezierPath* THIS, float flatness) {
	NSLog(@"NSBezierPath_setFlatness");
	[THIS setFlatness:flatness];
}

void NSBezierPath_getLineDash_count_phase (NSBezierPath* THIS, float * pattern, int * count, float * phase) {
	NSLog(@"NSBezierPath_getLineDash_count_phase");
	[THIS getLineDash:pattern count:count phase:phase];
}

void NSBezierPath_setLineDash_count_phase (NSBezierPath* THIS, const float * pattern, int count, float phase) {
	NSLog(@"NSBezierPath_setLineDash_count_phase");
	[THIS setLineDash:pattern count:count phase:phase];
}

void NSBezierPath_stroke (NSBezierPath* THIS) {
	NSLog(@"NSBezierPath_stroke");
	[THIS stroke];
}

void NSBezierPath_fill (NSBezierPath* THIS) {
	NSLog(@"NSBezierPath_fill");
	[THIS fill];
}

void NSBezierPath_addClip (NSBezierPath* THIS) {
	NSLog(@"NSBezierPath_addClip");
	[THIS addClip];
}

void NSBezierPath_setClip (NSBezierPath* THIS) {
	NSLog(@"NSBezierPath_setClip");
	[THIS setClip];
}

NSBezierPath * NSBezierPath_bezierPathByFlatteningPath (NSBezierPath* THIS) {
	NSLog(@"NSBezierPath_bezierPathByFlatteningPath");
	return [THIS bezierPathByFlatteningPath];
}

NSBezierPath * NSBezierPath_bezierPathByReversingPath (NSBezierPath* THIS) {
	NSLog(@"NSBezierPath_bezierPathByReversingPath");
	return [THIS bezierPathByReversingPath];
}

void NSBezierPath_transformUsingAffineTransform (NSBezierPath* THIS, NSAffineTransform * transform) {
	NSLog(@"NSBezierPath_transformUsingAffineTransform");
	[THIS transformUsingAffineTransform:transform];
}

BOOL NSBezierPath_isEmpty (NSBezierPath* THIS) {
	NSLog(@"NSBezierPath_isEmpty");
	return [THIS isEmpty];
}

NSPoint NSBezierPath_currentPoint (NSBezierPath* THIS) {
	NSLog(@"NSBezierPath_currentPoint");
	return [THIS currentPoint];
}

NSRect NSBezierPath_controlPointBounds (NSBezierPath* THIS) {
	NSLog(@"NSBezierPath_controlPointBounds");
	return [THIS controlPointBounds];
}

NSRect NSBezierPath_bounds (NSBezierPath* THIS) {
	NSLog(@"NSBezierPath_bounds");
	return [THIS bounds];
}

int NSBezierPath_elementCount (NSBezierPath* THIS) {
	NSLog(@"NSBezierPath_elementCount");
	return [THIS elementCount];
}

NSBezierPathElement NSBezierPath_elementAtIndex_associatedPoints (NSBezierPath* THIS, int index, NSPointArray points) {
	NSLog(@"NSBezierPath_elementAtIndex_associatedPoints");
	return [THIS elementAtIndex:index associatedPoints:points];
}

NSBezierPathElement NSBezierPath_elementAtIndex (NSBezierPath* THIS, int index) {
	NSLog(@"NSBezierPath_elementAtIndex");
	return [THIS elementAtIndex:index];
}

void NSBezierPath_setAssociatedPoints_atIndex (NSBezierPath* THIS, NSPointArray points, int index) {
	NSLog(@"NSBezierPath_setAssociatedPoints_atIndex");
	[THIS setAssociatedPoints:points atIndex:index];
}

void NSBezierPath_appendBezierPath (NSBezierPath* THIS, NSBezierPath * path) {
	NSLog(@"NSBezierPath_appendBezierPath");
	[THIS appendBezierPath:path];
}

void NSBezierPath_appendBezierPathWithRect (NSBezierPath* THIS, NSRect rect) {
	NSLog(@"NSBezierPath_appendBezierPathWithRect");
	[THIS appendBezierPathWithRect:rect];
}

void NSBezierPath_appendBezierPathWithPoints_count (NSBezierPath* THIS, NSPointArray points, int count) {
	NSLog(@"NSBezierPath_appendBezierPathWithPoints_count");
	[THIS appendBezierPathWithPoints:points count:count];
}

void NSBezierPath_appendBezierPathWithOvalInRect (NSBezierPath* THIS, NSRect rect) {
	NSLog(@"NSBezierPath_appendBezierPathWithOvalInRect");
	[THIS appendBezierPathWithOvalInRect:rect];
}

void NSBezierPath_appendBezierPathWithArcWithCenter_radius_startAngle_endAngle_clockwise (NSBezierPath* THIS, NSPoint center, float radius, float startAngle, float endAngle, BOOL clockwise) {
	NSLog(@"NSBezierPath_appendBezierPathWithArcWithCenter_radius_startAngle_endAngle_clockwise");
	[THIS appendBezierPathWithArcWithCenter:center radius:radius startAngle:startAngle endAngle:endAngle clockwise:clockwise];
}

void NSBezierPath_appendBezierPathWithArcWithCenter_radius_startAngle_endAngle (NSBezierPath* THIS, NSPoint center, float radius, float startAngle, float endAngle) {
	NSLog(@"NSBezierPath_appendBezierPathWithArcWithCenter_radius_startAngle_endAngle");
	[THIS appendBezierPathWithArcWithCenter:center radius:radius startAngle:startAngle endAngle:endAngle];
}

void NSBezierPath_appendBezierPathWithArcFromPoint_toPoint_radius (NSBezierPath* THIS, NSPoint point1, NSPoint point2, float radius) {
	NSLog(@"NSBezierPath_appendBezierPathWithArcFromPoint_toPoint_radius");
	[THIS appendBezierPathWithArcFromPoint:point1 toPoint:point2 radius:radius];
}

void NSBezierPath_appendBezierPathWithGlyph_inFont (NSBezierPath* THIS, NSGlyph glyph, NSFont * font) {
	NSLog(@"NSBezierPath_appendBezierPathWithGlyph_inFont");
	[THIS appendBezierPathWithGlyph:glyph inFont:font];
}

void NSBezierPath_appendBezierPathWithGlyphs_count_inFont (NSBezierPath* THIS, NSGlyph * glyphs, int count, NSFont * font) {
	NSLog(@"NSBezierPath_appendBezierPathWithGlyphs_count_inFont");
	[THIS appendBezierPathWithGlyphs:glyphs count:count inFont:font];
}

void NSBezierPath_appendBezierPathWithPackedGlyphs (NSBezierPath* THIS, const char * packedGlyphs) {
	NSLog(@"NSBezierPath_appendBezierPathWithPackedGlyphs");
	[THIS appendBezierPathWithPackedGlyphs:packedGlyphs];
}

BOOL NSBezierPath_containsPoint (NSBezierPath* THIS, NSPoint point) {
	NSLog(@"NSBezierPath_containsPoint");
	return [THIS containsPoint:point];
}

BOOL NSBezierPath_cachesBezierPath (NSBezierPath* THIS) {
	NSLog(@"NSBezierPath_cachesBezierPath");
	return [THIS cachesBezierPath];
}

void NSBezierPath_setCachesBezierPath (NSBezierPath* THIS, BOOL flag) {
	NSLog(@"NSBezierPath_setCachesBezierPath");
	[THIS setCachesBezierPath:flag];
}

NSBezierPath * NSBezierPath_alloc(){
	NSLog(@"NSBezierPath_alloc()");
	return [ NSBezierPath alloc ];
}