/* Generated by genstubs.pl
 (c) 2004 kangaroo
*/

#include <Cocoa/Cocoa.h>

#include <Foundation/NSObject.h>

#include <Foundation/NSGeometry.h>

#include <AppKit/NSFont.h>

NSBezierPath * NSBezierPath_bezierPath (NSBezierPath* THIS) {
	NSLog(@"NSBezierPath_bezierPath");
	return [THIS bezierPath];
}
NSBezierPath * NSBezierPath_bezierPathWithRect (NSBezierPath* THIS, NSRect rect) {
	NSLog(@"NSBezierPath_bezierPathWithRect");
	return [THIS bezierPathWithRect:rect];
}

NSBezierPath * NSBezierPath_bezierPathWithOvalInRect (NSBezierPath* THIS, NSRect rect) {
	NSLog(@"NSBezierPath_bezierPathWithOvalInRect");
	return [THIS bezierPathWithOvalInRect:rect];
}

void NSBezierPath_fillRect (NSBezierPath* THIS, NSRect rect) {
	NSLog(@"NSBezierPath_fillRect");
	[THIS fillRect:rect];
}

void NSBezierPath_strokeRect (NSBezierPath* THIS, NSRect rect) {
	NSLog(@"NSBezierPath_strokeRect");
	[THIS strokeRect:rect];
}

void NSBezierPath_clipRect (NSBezierPath* THIS, NSRect rect) {
	NSLog(@"NSBezierPath_clipRect");
	[THIS clipRect:rect];
}

void NSBezierPath_strokeLineFromPoint_toPoint (NSBezierPath* THIS, NSPoint point1, NSPoint point2) {
	NSLog(@"NSBezierPath_strokeLineFromPoint_toPoint");
	[THIS strokeLineFromPoint:point1 toPoint:point2];
}

void NSBezierPath_drawPackedGlyphs_atPoint (NSBezierPath* THIS, const char * packedGlyphs, NSPoint point) {
	NSLog(@"NSBezierPath_drawPackedGlyphs_atPoint");
	[THIS drawPackedGlyphs:packedGlyphs atPoint:point];
}

void NSBezierPath_setDefaultMiterLimit (NSBezierPath* THIS, float limit) {
	NSLog(@"NSBezierPath_setDefaultMiterLimit");
	[THIS setDefaultMiterLimit:limit];
}

float NSBezierPath_defaultMiterLimit (NSBezierPath* THIS) {
	NSLog(@"NSBezierPath_defaultMiterLimit");
	return [THIS defaultMiterLimit];
}
void NSBezierPath_setDefaultFlatness (NSBezierPath* THIS, float flatness) {
	NSLog(@"NSBezierPath_setDefaultFlatness");
	[THIS setDefaultFlatness:flatness];
}

float NSBezierPath_defaultFlatness (NSBezierPath* THIS) {
	NSLog(@"NSBezierPath_defaultFlatness");
	return [THIS defaultFlatness];
}
void NSBezierPath_setDefaultWindingRule (NSBezierPath* THIS, NSWindingRule windingRule) {
	NSLog(@"NSBezierPath_setDefaultWindingRule");
	[THIS setDefaultWindingRule:windingRule];
}

NSWindingRule NSBezierPath_defaultWindingRule (NSBezierPath* THIS) {
	NSLog(@"NSBezierPath_defaultWindingRule");
	return [THIS defaultWindingRule];
}
void NSBezierPath_setDefaultLineCapStyle (NSBezierPath* THIS, NSLineCapStyle lineCapStyle) {
	NSLog(@"NSBezierPath_setDefaultLineCapStyle");
	[THIS setDefaultLineCapStyle:lineCapStyle];
}

NSLineCapStyle NSBezierPath_defaultLineCapStyle (NSBezierPath* THIS) {
	NSLog(@"NSBezierPath_defaultLineCapStyle");
	return [THIS defaultLineCapStyle];
}
void NSBezierPath_setDefaultLineJoinStyle (NSBezierPath* THIS, NSLineJoinStyle lineJoinStyle) {
	NSLog(@"NSBezierPath_setDefaultLineJoinStyle");
	[THIS setDefaultLineJoinStyle:lineJoinStyle];
}

NSLineJoinStyle NSBezierPath_defaultLineJoinStyle (NSBezierPath* THIS) {
	NSLog(@"NSBezierPath_defaultLineJoinStyle");
	return [THIS defaultLineJoinStyle];
}
void NSBezierPath_setDefaultLineWidth (NSBezierPath* THIS, float lineWidth) {
	NSLog(@"NSBezierPath_setDefaultLineWidth");
	[THIS setDefaultLineWidth:lineWidth];
}

float NSBezierPath_defaultLineWidth (NSBezierPath* THIS) {
	NSLog(@"NSBezierPath_defaultLineWidth");
	return [THIS defaultLineWidth];
}
void NSBezierPath_moveToPoint (NSBezierPath* THIS, NSPoint point) {
	NSLog(@"NSBezierPath_moveToPoint");
	[THIS moveToPoint:point];
}

void NSBezierPath_lineToPoint (NSBezierPath* THIS, NSPoint point) {
	NSLog(@"NSBezierPath_lineToPoint");
	[THIS lineToPoint:point];
}

/* UNSUPPORTED: 
- (void)curveToPoint:(NSPoint)endPoint
 */

void NSBezierPath_closePath (NSBezierPath* THIS) {
	NSLog(@"NSBezierPath_closePath");
	[THIS closePath];
}
void NSBezierPath_removeAllPoints (NSBezierPath* THIS) {
	NSLog(@"NSBezierPath_removeAllPoints");
	[THIS removeAllPoints];
}
void NSBezierPath_relativeMoveToPoint (NSBezierPath* THIS, NSPoint point) {
	NSLog(@"NSBezierPath_relativeMoveToPoint");
	[THIS relativeMoveToPoint:point];
}

void NSBezierPath_relativeLineToPoint (NSBezierPath* THIS, NSPoint point) {
	NSLog(@"NSBezierPath_relativeLineToPoint");
	[THIS relativeLineToPoint:point];
}

/* UNSUPPORTED: 
- (void)relativeCurveToPoint:(NSPoint)endPoint
 */

float NSBezierPath_lineWidth (NSBezierPath* THIS) {
	NSLog(@"NSBezierPath_lineWidth");
	return [THIS lineWidth];
}
void NSBezierPath_setLineWidth (NSBezierPath* THIS, float lineWidth) {
	NSLog(@"NSBezierPath_setLineWidth");
	[THIS setLineWidth:lineWidth];
}

NSLineCapStyle NSBezierPath_lineCapStyle (NSBezierPath* THIS) {
	NSLog(@"NSBezierPath_lineCapStyle");
	return [THIS lineCapStyle];
}
void NSBezierPath_setLineCapStyle (NSBezierPath* THIS, NSLineCapStyle lineCapStyle) {
	NSLog(@"NSBezierPath_setLineCapStyle");
	[THIS setLineCapStyle:lineCapStyle];
}

NSLineJoinStyle NSBezierPath_lineJoinStyle (NSBezierPath* THIS) {
	NSLog(@"NSBezierPath_lineJoinStyle");
	return [THIS lineJoinStyle];
}
void NSBezierPath_setLineJoinStyle (NSBezierPath* THIS, NSLineJoinStyle lineJoinStyle) {
	NSLog(@"NSBezierPath_setLineJoinStyle");
	[THIS setLineJoinStyle:lineJoinStyle];
}

NSWindingRule NSBezierPath_windingRule (NSBezierPath* THIS) {
	NSLog(@"NSBezierPath_windingRule");
	return [THIS windingRule];
}
void NSBezierPath_setWindingRule (NSBezierPath* THIS, NSWindingRule windingRule) {
	NSLog(@"NSBezierPath_setWindingRule");
	[THIS setWindingRule:windingRule];
}

float NSBezierPath_miterLimit (NSBezierPath* THIS) {
	NSLog(@"NSBezierPath_miterLimit");
	return [THIS miterLimit];
}
void NSBezierPath_setMiterLimit (NSBezierPath* THIS, float miterLimit) {
	NSLog(@"NSBezierPath_setMiterLimit");
	[THIS setMiterLimit:miterLimit];
}

float NSBezierPath_flatness (NSBezierPath* THIS) {
	NSLog(@"NSBezierPath_flatness");
	return [THIS flatness];
}
void NSBezierPath_setFlatness (NSBezierPath* THIS, float flatness) {
	NSLog(@"NSBezierPath_setFlatness");
	[THIS setFlatness:flatness];
}

void NSBezierPath_getLineDash_count_phase (NSBezierPath* THIS, float * pattern, int * count, float * phase) {
	NSLog(@"NSBezierPath_getLineDash_count_phase");
	[THIS getLineDash:pattern count:count phase:phase];
}

void NSBezierPath_setLineDash_count_phase (NSBezierPath* THIS, const float * pattern, int count, float phase) {
	NSLog(@"NSBezierPath_setLineDash_count_phase");
	[THIS setLineDash:pattern count:count phase:phase];
}

void NSBezierPath_stroke (NSBezierPath* THIS) {
	NSLog(@"NSBezierPath_stroke");
	[THIS stroke];
}
void NSBezierPath_fill (NSBezierPath* THIS) {
	NSLog(@"NSBezierPath_fill");
	[THIS fill];
}
void NSBezierPath_addClip (NSBezierPath* THIS) {
	NSLog(@"NSBezierPath_addClip");
	[THIS addClip];
}
void NSBezierPath_setClip (NSBezierPath* THIS) {
	NSLog(@"NSBezierPath_setClip");
	[THIS setClip];
}
NSBezierPath * NSBezierPath_bezierPathByFlatteningPath (NSBezierPath* THIS) {
	NSLog(@"NSBezierPath_bezierPathByFlatteningPath");
	return [THIS bezierPathByFlatteningPath];
}
NSBezierPath * NSBezierPath_bezierPathByReversingPath (NSBezierPath* THIS) {
	NSLog(@"NSBezierPath_bezierPathByReversingPath");
	return [THIS bezierPathByReversingPath];
}
void NSBezierPath_transformUsingAffineTransform (NSBezierPath* THIS, NSAffineTransform * transform) {
	NSLog(@"NSBezierPath_transformUsingAffineTransform");
	[THIS transformUsingAffineTransform:transform];
}

BOOL NSBezierPath_isEmpty (NSBezierPath* THIS) {
	NSLog(@"NSBezierPath_isEmpty");
	return [THIS isEmpty];
}
NSPoint NSBezierPath_currentPoint (NSBezierPath* THIS) {
	NSLog(@"NSBezierPath_currentPoint");
	return [THIS currentPoint];
}
NSRect NSBezierPath_controlPointBounds (NSBezierPath* THIS) {
	NSLog(@"NSBezierPath_controlPointBounds");
	return [THIS controlPointBounds];
}
NSRect NSBezierPath_bounds (NSBezierPath* THIS) {
	NSLog(@"NSBezierPath_bounds");
	return [THIS bounds];
}
int NSBezierPath_elementCount (NSBezierPath* THIS) {
	NSLog(@"NSBezierPath_elementCount");
	return [THIS elementCount];
}
/* UNSUPPORTED: 
- (NSBezierPathElement)elementAtIndex:(int)index
 */

NSBezierPathElement NSBezierPath_elementAtIndex (NSBezierPath* THIS, int index) {
	NSLog(@"NSBezierPath_elementAtIndex");
	return [THIS elementAtIndex:index];
}

void NSBezierPath_setAssociatedPoints_atIndex (NSBezierPath* THIS, NSPointArray points, int index) {
	NSLog(@"NSBezierPath_setAssociatedPoints_atIndex");
	[THIS setAssociatedPoints:points atIndex:index];
}

void NSBezierPath_appendBezierPath (NSBezierPath* THIS, NSBezierPath * path) {
	NSLog(@"NSBezierPath_appendBezierPath");
	[THIS appendBezierPath:path];
}

void NSBezierPath_appendBezierPathWithRect (NSBezierPath* THIS, NSRect rect) {
	NSLog(@"NSBezierPath_appendBezierPathWithRect");
	[THIS appendBezierPathWithRect:rect];
}

void NSBezierPath_appendBezierPathWithPoints_count (NSBezierPath* THIS, NSPointArray points, int count) {
	NSLog(@"NSBezierPath_appendBezierPathWithPoints_count");
	[THIS appendBezierPathWithPoints:points count:count];
}

void NSBezierPath_appendBezierPathWithOvalInRect (NSBezierPath* THIS, NSRect rect) {
	NSLog(@"NSBezierPath_appendBezierPathWithOvalInRect");
	[THIS appendBezierPathWithOvalInRect:rect];
}

/* UNSUPPORTED: 
- (void)appendBezierPathWithArcWithCenter:(NSPoint)center radius:(float)radius
 */

/* UNSUPPORTED: 
- (void)appendBezierPathWithArcWithCenter:(NSPoint)center radius:(float)radius
 */

/* UNSUPPORTED: 
- (void)appendBezierPathWithArcFromPoint:(NSPoint)point1
 */

void NSBezierPath_appendBezierPathWithGlyph_inFont (NSBezierPath* THIS, NSGlyph glyph, NSFont * font) {
	NSLog(@"NSBezierPath_appendBezierPathWithGlyph_inFont");
	[THIS appendBezierPathWithGlyph:glyph inFont:font];
}

/* UNSUPPORTED: 
- (void)appendBezierPathWithGlyphs:(NSGlyph *)glyphs count:(int)count
 */

void NSBezierPath_appendBezierPathWithPackedGlyphs (NSBezierPath* THIS, const char * packedGlyphs) {
	NSLog(@"NSBezierPath_appendBezierPathWithPackedGlyphs");
	[THIS appendBezierPathWithPackedGlyphs:packedGlyphs];
}

BOOL NSBezierPath_containsPoint (NSBezierPath* THIS, NSPoint point) {
	NSLog(@"NSBezierPath_containsPoint");
	return [THIS containsPoint:point];
}

BOOL NSBezierPath_cachesBezierPath (NSBezierPath* THIS) {
	NSLog(@"NSBezierPath_cachesBezierPath");
	return [THIS cachesBezierPath];
}
void NSBezierPath_setCachesBezierPath (NSBezierPath* THIS, BOOL flag) {
	NSLog(@"NSBezierPath_setCachesBezierPath");
	[THIS setCachesBezierPath:flag];
}

NSBezierPath * NSBezierPath_alloc() {
	NSLog(@"NSBezierPath_alloc()");
	return [NSBezierPath alloc];
}
