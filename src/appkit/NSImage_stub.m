/* Generated by genstubs.pl
 (c) 2004 kangaroo
*/

#include <Cocoa/Cocoa.h>

#include <Foundation/NSObject.h>

#include <Foundation/NSGeometry.h>

#include <Foundation/NSBundle.h>

#include <AppKit/NSGraphics.h>

#include <AppKit/NSBitmapImageRep.h>

NSImage * NSImage_imageNamed (NSImage* THIS, NSString * name) {
	NSLog(@"NSImage_imageNamed");
	return [THIS imageNamed:name];
}

NSImage * NSImage_initWithSize (NSImage* THIS, NSSize aSize) {
	NSLog(@"NSImage_initWithSize");
	return [THIS initWithSize:aSize];
}

NSImage * NSImage_initWithData (NSImage* THIS, NSData * data) {
	NSLog(@"NSImage_initWithData");
	return [THIS initWithData:data];
}

NSImage * NSImage_initWithContentsOfFile (NSImage* THIS, NSString * fileName) {
	NSLog(@"NSImage_initWithContentsOfFile");
	return [THIS initWithContentsOfFile:fileName];
}

NSImage * NSImage_initWithContentsOfURL (NSImage* THIS, NSURL * url) {
	NSLog(@"NSImage_initWithContentsOfURL");
	return [THIS initWithContentsOfURL:url];
}

NSImage * NSImage_initByReferencingFile (NSImage* THIS, NSString * fileName) {
	NSLog(@"NSImage_initByReferencingFile");
	return [THIS initByReferencingFile:fileName];
}

NSImage * NSImage_initByReferencingURL (NSImage* THIS, NSURL * url) {
	NSLog(@"NSImage_initByReferencingURL");
	return [THIS initByReferencingURL:url];
}

NSImage * NSImage_initWithPasteboard (NSImage* THIS, NSPasteboard * pasteboard) {
	NSLog(@"NSImage_initWithPasteboard");
	return [THIS initWithPasteboard:pasteboard];
}

void NSImage_setSize (NSImage* THIS, NSSize aSize) {
	NSLog(@"NSImage_setSize");
	[THIS setSize:aSize];
}

NSSize NSImage_size (NSImage* THIS) {
	NSLog(@"NSImage_size");
	return [THIS size];
}
BOOL NSImage_setName (NSImage* THIS, NSString * string) {
	NSLog(@"NSImage_setName");
	return [THIS setName:string];
}

NSString * NSImage_name (NSImage* THIS) {
	NSLog(@"NSImage_name");
	return [THIS name];
}
void NSImage_setScalesWhenResized (NSImage* THIS, BOOL flag) {
	NSLog(@"NSImage_setScalesWhenResized");
	[THIS setScalesWhenResized:flag];
}

BOOL NSImage_scalesWhenResized (NSImage* THIS) {
	NSLog(@"NSImage_scalesWhenResized");
	return [THIS scalesWhenResized];
}
void NSImage_setDataRetained (NSImage* THIS, BOOL flag) {
	NSLog(@"NSImage_setDataRetained");
	[THIS setDataRetained:flag];
}

BOOL NSImage_isDataRetained (NSImage* THIS) {
	NSLog(@"NSImage_isDataRetained");
	return [THIS isDataRetained];
}
void NSImage_setCachedSeparately (NSImage* THIS, BOOL flag) {
	NSLog(@"NSImage_setCachedSeparately");
	[THIS setCachedSeparately:flag];
}

BOOL NSImage_isCachedSeparately (NSImage* THIS) {
	NSLog(@"NSImage_isCachedSeparately");
	return [THIS isCachedSeparately];
}
void NSImage_setCacheDepthMatchesImageDepth (NSImage* THIS, BOOL flag) {
	NSLog(@"NSImage_setCacheDepthMatchesImageDepth");
	[THIS setCacheDepthMatchesImageDepth:flag];
}

BOOL NSImage_cacheDepthMatchesImageDepth (NSImage* THIS) {
	NSLog(@"NSImage_cacheDepthMatchesImageDepth");
	return [THIS cacheDepthMatchesImageDepth];
}
void NSImage_setBackgroundColor (NSImage* THIS, NSColor * aColor) {
	NSLog(@"NSImage_setBackgroundColor");
	[THIS setBackgroundColor:aColor];
}

NSColor * NSImage_backgroundColor (NSImage* THIS) {
	NSLog(@"NSImage_backgroundColor");
	return [THIS backgroundColor];
}
void NSImage_setUsesEPSOnResolutionMismatch (NSImage* THIS, BOOL flag) {
	NSLog(@"NSImage_setUsesEPSOnResolutionMismatch");
	[THIS setUsesEPSOnResolutionMismatch:flag];
}

BOOL NSImage_usesEPSOnResolutionMismatch (NSImage* THIS) {
	NSLog(@"NSImage_usesEPSOnResolutionMismatch");
	return [THIS usesEPSOnResolutionMismatch];
}
void NSImage_setPrefersColorMatch (NSImage* THIS, BOOL flag) {
	NSLog(@"NSImage_setPrefersColorMatch");
	[THIS setPrefersColorMatch:flag];
}

BOOL NSImage_prefersColorMatch (NSImage* THIS) {
	NSLog(@"NSImage_prefersColorMatch");
	return [THIS prefersColorMatch];
}
void NSImage_setMatchesOnMultipleResolution (NSImage* THIS, BOOL flag) {
	NSLog(@"NSImage_setMatchesOnMultipleResolution");
	[THIS setMatchesOnMultipleResolution:flag];
}

BOOL NSImage_matchesOnMultipleResolution (NSImage* THIS) {
	NSLog(@"NSImage_matchesOnMultipleResolution");
	return [THIS matchesOnMultipleResolution];
}
void NSImage_dissolveToPoint_fraction (NSImage* THIS, NSPoint point, float aFloat) {
	NSLog(@"NSImage_dissolveToPoint_fraction");
	[THIS dissolveToPoint:point fraction:aFloat];
}

void NSImage_dissolveToPoint_fromRect_fraction (NSImage* THIS, NSPoint point, NSRect rect, float aFloat) {
	NSLog(@"NSImage_dissolveToPoint_fromRect_fraction");
	[THIS dissolveToPoint:point fromRect:rect fraction:aFloat];
}

void NSImage_compositeToPoint_operation (NSImage* THIS, NSPoint point, NSCompositingOperation op) {
	NSLog(@"NSImage_compositeToPoint_operation");
	[THIS compositeToPoint:point operation:op];
}

void NSImage_compositeToPoint_fromRect_operation (NSImage* THIS, NSPoint point, NSRect rect, NSCompositingOperation op) {
	NSLog(@"NSImage_compositeToPoint_fromRect_operation");
	[THIS compositeToPoint:point fromRect:rect operation:op];
}

void NSImage_compositeToPoint_operation_fraction (NSImage* THIS, NSPoint point, NSCompositingOperation op, float delta) {
	NSLog(@"NSImage_compositeToPoint_operation_fraction");
	[THIS compositeToPoint:point operation:op fraction:delta];
}

void NSImage_compositeToPoint_fromRect_operation_fraction (NSImage* THIS, NSPoint point, NSRect rect, NSCompositingOperation op, float delta) {
	NSLog(@"NSImage_compositeToPoint_fromRect_operation_fraction");
	[THIS compositeToPoint:point fromRect:rect operation:op fraction:delta];
}

void NSImage_drawAtPoint_fromRect_operation_fraction (NSImage* THIS, NSPoint point, NSRect fromRect, NSCompositingOperation op, float delta) {
	NSLog(@"NSImage_drawAtPoint_fromRect_operation_fraction");
	[THIS drawAtPoint:point fromRect:fromRect operation:op fraction:delta];
}

void NSImage_drawInRect_fromRect_operation_fraction (NSImage* THIS, NSRect rect, NSRect fromRect, NSCompositingOperation op, float delta) {
	NSLog(@"NSImage_drawInRect_fromRect_operation_fraction");
	[THIS drawInRect:rect fromRect:fromRect operation:op fraction:delta];
}

BOOL NSImage_drawRepresentation_inRect (NSImage* THIS, NSImageRep * imageRep, NSRect rect) {
	NSLog(@"NSImage_drawRepresentation_inRect");
	return [THIS drawRepresentation:imageRep inRect:rect];
}

void NSImage_recache (NSImage* THIS) {
	NSLog(@"NSImage_recache");
	[THIS recache];
}
NSData * NSImage_TIFFRepresentation (NSImage* THIS) {
	NSLog(@"NSImage_TIFFRepresentation");
	return [THIS TIFFRepresentation];
}
NSData * NSImage_TIFFRepresentationUsingCompression_factor (NSImage* THIS, NSTIFFCompression comp, float aFloat) {
	NSLog(@"NSImage_TIFFRepresentationUsingCompression_factor");
	return [THIS TIFFRepresentationUsingCompression:comp factor:aFloat];
}

NSArray * NSImage_representations (NSImage* THIS) {
	NSLog(@"NSImage_representations");
	return [THIS representations];
}
void NSImage_addRepresentations (NSImage* THIS, NSArray * imageReps) {
	NSLog(@"NSImage_addRepresentations");
	[THIS addRepresentations:imageReps];
}

void NSImage_addRepresentation (NSImage* THIS, NSImageRep * imageRep) {
	NSLog(@"NSImage_addRepresentation");
	[THIS addRepresentation:imageRep];
}

void NSImage_removeRepresentation (NSImage* THIS, NSImageRep * imageRep) {
	NSLog(@"NSImage_removeRepresentation");
	[THIS removeRepresentation:imageRep];
}

BOOL NSImage_isValid (NSImage* THIS) {
	NSLog(@"NSImage_isValid");
	return [THIS isValid];
}
void NSImage_lockFocus (NSImage* THIS) {
	NSLog(@"NSImage_lockFocus");
	[THIS lockFocus];
}
void NSImage_lockFocusOnRepresentation (NSImage* THIS, NSImageRep * imageRepresentation) {
	NSLog(@"NSImage_lockFocusOnRepresentation");
	[THIS lockFocusOnRepresentation:imageRepresentation];
}

void NSImage_unlockFocus (NSImage* THIS) {
	NSLog(@"NSImage_unlockFocus");
	[THIS unlockFocus];
}
NSImageRep * NSImage_bestRepresentationForDevice (NSImage* THIS, NSDictionary * deviceDescription) {
	NSLog(@"NSImage_bestRepresentationForDevice");
	return [THIS bestRepresentationForDevice:deviceDescription];
}

void NSImage_setDelegate (NSImage* THIS, NSImage * anObject) {
	NSLog(@"NSImage_setDelegate");
	[THIS setDelegate:anObject];
}

NSImage * NSImage_delegate (NSImage* THIS) {
	NSLog(@"NSImage_delegate");
	return [THIS delegate];
}
NSArray * NSImage_imageUnfilteredFileTypes (NSImage* THIS) {
	NSLog(@"NSImage_imageUnfilteredFileTypes");
	return [THIS imageUnfilteredFileTypes];
}
NSArray * NSImage_imageUnfilteredPasteboardTypes (NSImage* THIS) {
	NSLog(@"NSImage_imageUnfilteredPasteboardTypes");
	return [THIS imageUnfilteredPasteboardTypes];
}
NSArray * NSImage_imageFileTypes (NSImage* THIS) {
	NSLog(@"NSImage_imageFileTypes");
	return [THIS imageFileTypes];
}
NSArray * NSImage_imagePasteboardTypes (NSImage* THIS) {
	NSLog(@"NSImage_imagePasteboardTypes");
	return [THIS imagePasteboardTypes];
}
BOOL NSImage_canInitWithPasteboard (NSImage* THIS, NSPasteboard * pasteboard) {
	NSLog(@"NSImage_canInitWithPasteboard");
	return [THIS canInitWithPasteboard:pasteboard];
}

void NSImage_setFlipped (NSImage* THIS, BOOL flag) {
	NSLog(@"NSImage_setFlipped");
	[THIS setFlipped:flag];
}

BOOL NSImage_isFlipped (NSImage* THIS) {
	NSLog(@"NSImage_isFlipped");
	return [THIS isFlipped];
}
void NSImage_cancelIncrementalLoad (NSImage* THIS) {
	NSLog(@"NSImage_cancelIncrementalLoad");
	[THIS cancelIncrementalLoad];
}
/* UNSUPPORTED: 
-(void)setCacheMode:(NSImageCacheMode)mode;
 */

/* UNSUPPORTED: 
-(NSImageCacheMode)cacheMode;
 */

/* UNSUPPORTED: 
- (id)initWithIconHandle:(void * * HICON *)icon;
 */

/* UNSUPPORTED: 
- (id)initWithBitmapHandle:(void * * HBITMAP *)bitmap;
 */

NSImage * NSImage_imageDidNotDraw_inRect (NSImage* THIS, NSImage * sender, NSRect aRect) {
	NSLog(@"NSImage_imageDidNotDraw_inRect");
	return [THIS imageDidNotDraw:sender inRect:aRect];
}

void NSImage_image_willLoadRepresentation (NSImage* THIS, NSImage* image, NSImageRep* rep) {
	NSLog(@"NSImage_image_willLoadRepresentation");
	[THIS image:image willLoadRepresentation:rep];
}

void NSImage_image_didLoadRepresentationHeader (NSImage* THIS, NSImage* image, NSImageRep* rep) {
	NSLog(@"NSImage_image_didLoadRepresentationHeader");
	[THIS image:image didLoadRepresentationHeader:rep];
}

void NSImage_image_didLoadPartOfRepresentation_withValidRows (NSImage* THIS, NSImage* image, NSImageRep* rep, int rows) {
	NSLog(@"NSImage_image_didLoadPartOfRepresentation_withValidRows");
	[THIS image:image didLoadPartOfRepresentation:rep withValidRows:rows];
}

void NSImage_image_didLoadRepresentation_withStatus (NSImage* THIS, NSImage* image, NSImageRep* rep, NSImageLoadStatus status) {
	NSLog(@"NSImage_image_didLoadRepresentation_withStatus");
	[THIS image:image didLoadRepresentation:rep withStatus:status];
}

NSString * NSImage_pathForImageResource (NSImage* THIS, NSString * name) {
	NSLog(@"NSImage_pathForImageResource");
	return [THIS pathForImageResource:name];
}

NSImage * NSImage_alloc() {
	NSLog(@"NSImage_alloc()");
	return [NSImage alloc];
}
