/* Generated by genstubs.pl
 * (c) 2004 kangaroo, C.J. and Urs
 */

#include <Cocoa/Cocoa.h>

#include <AppKit/NSView.h>

void NSRulerView$_registerUnitWithName_abbreviation_unitToPointsConversionFactor_stepUpCycle_stepDownCycle (NSString * unitName, NSString * abbreviation, float conversionFactor, NSArray * stepUpCycle, NSArray * stepDownCycle) {
	NSLog(@"NSRulerView$_registerUnitWithName_abbreviation_unitToPointsConversionFactor_stepUpCycle_stepDownCycle");
	[NSRulerView registerUnitWithName:unitName abbreviation:abbreviation unitToPointsConversionFactor:conversionFactor stepUpCycle:stepUpCycle stepDownCycle:stepDownCycle];
}

NSRulerView * NSRulerView_initWithScrollView_orientation (NSRulerView* THIS, NSScrollView * scrollView, NSRulerOrientation orientation) {
	NSLog(@"NSRulerView_initWithScrollView_orientation");
	return [THIS initWithScrollView:scrollView orientation:orientation];
}

void NSRulerView_setScrollView (NSRulerView* THIS, NSScrollView * scrollView) {
	NSLog(@"NSRulerView_setScrollView");
	[THIS setScrollView:scrollView];
}

NSScrollView * NSRulerView_scrollView (NSRulerView* THIS) {
	NSLog(@"NSRulerView_scrollView");
	return [THIS scrollView];
}

void NSRulerView_setOrientation (NSRulerView* THIS, NSRulerOrientation orientation) {
	NSLog(@"NSRulerView_setOrientation");
	[THIS setOrientation:orientation];
}

NSRulerOrientation NSRulerView_orientation (NSRulerView* THIS) {
	NSLog(@"NSRulerView_orientation");
	return [THIS orientation];
}

float NSRulerView_baselineLocation (NSRulerView* THIS) {
	NSLog(@"NSRulerView_baselineLocation");
	return [THIS baselineLocation];
}

float NSRulerView_requiredThickness (NSRulerView* THIS) {
	NSLog(@"NSRulerView_requiredThickness");
	return [THIS requiredThickness];
}

void NSRulerView_setRuleThickness (NSRulerView* THIS, float thickness) {
	NSLog(@"NSRulerView_setRuleThickness");
	[THIS setRuleThickness:thickness];
}

float NSRulerView_ruleThickness (NSRulerView* THIS) {
	NSLog(@"NSRulerView_ruleThickness");
	return [THIS ruleThickness];
}

void NSRulerView_setReservedThicknessForMarkers (NSRulerView* THIS, float thickness) {
	NSLog(@"NSRulerView_setReservedThicknessForMarkers");
	[THIS setReservedThicknessForMarkers:thickness];
}

float NSRulerView_reservedThicknessForMarkers (NSRulerView* THIS) {
	NSLog(@"NSRulerView_reservedThicknessForMarkers");
	return [THIS reservedThicknessForMarkers];
}

void NSRulerView_setReservedThicknessForAccessoryView (NSRulerView* THIS, float thickness) {
	NSLog(@"NSRulerView_setReservedThicknessForAccessoryView");
	[THIS setReservedThicknessForAccessoryView:thickness];
}

float NSRulerView_reservedThicknessForAccessoryView (NSRulerView* THIS) {
	NSLog(@"NSRulerView_reservedThicknessForAccessoryView");
	return [THIS reservedThicknessForAccessoryView];
}

void NSRulerView_setMeasurementUnits (NSRulerView* THIS, NSString * unitName) {
	NSLog(@"NSRulerView_setMeasurementUnits");
	[THIS setMeasurementUnits:unitName];
}

NSString * NSRulerView_measurementUnits (NSRulerView* THIS) {
	NSLog(@"NSRulerView_measurementUnits");
	return [THIS measurementUnits];
}

void NSRulerView_setOriginOffset (NSRulerView* THIS, float offset) {
	NSLog(@"NSRulerView_setOriginOffset");
	[THIS setOriginOffset:offset];
}

float NSRulerView_originOffset (NSRulerView* THIS) {
	NSLog(@"NSRulerView_originOffset");
	return [THIS originOffset];
}

void NSRulerView_setClientView (NSRulerView* THIS, NSView * client) {
	NSLog(@"NSRulerView_setClientView");
	[THIS setClientView:client];
}

NSView * NSRulerView_clientView (NSRulerView* THIS) {
	NSLog(@"NSRulerView_clientView");
	return [THIS clientView];
}

void NSRulerView_setMarkers (NSRulerView* THIS, NSArray * markers) {
	NSLog(@"NSRulerView_setMarkers");
	[THIS setMarkers:markers];
}

void NSRulerView_addMarker (NSRulerView* THIS, NSRulerMarker * marker) {
	NSLog(@"NSRulerView_addMarker");
	[THIS addMarker:marker];
}

void NSRulerView_removeMarker (NSRulerView* THIS, NSRulerMarker * marker) {
	NSLog(@"NSRulerView_removeMarker");
	[THIS removeMarker:marker];
}

NSArray * NSRulerView_markers (NSRulerView* THIS) {
	NSLog(@"NSRulerView_markers");
	return [THIS markers];
}

BOOL NSRulerView_trackMarker_withMouseEvent (NSRulerView* THIS, NSRulerMarker * marker, NSEvent * event) {
	NSLog(@"NSRulerView_trackMarker_withMouseEvent");
	return [THIS trackMarker:marker withMouseEvent:event];
}

void NSRulerView_setAccessoryView (NSRulerView* THIS, NSView * accessory) {
	NSLog(@"NSRulerView_setAccessoryView");
	[THIS setAccessoryView:accessory];
}

NSView * NSRulerView_accessoryView (NSRulerView* THIS) {
	NSLog(@"NSRulerView_accessoryView");
	return [THIS accessoryView];
}

void NSRulerView_moveRulerlineFromLocation_toLocation (NSRulerView* THIS, float oldLocation, float newLocation) {
	NSLog(@"NSRulerView_moveRulerlineFromLocation_toLocation");
	[THIS moveRulerlineFromLocation:oldLocation toLocation:newLocation];
}

void NSRulerView_invalidateHashMarks (NSRulerView* THIS) {
	NSLog(@"NSRulerView_invalidateHashMarks");
	[THIS invalidateHashMarks];
}

void NSRulerView_drawHashMarksAndLabelsInRect (NSRulerView* THIS, NSRect rect) {
	NSLog(@"NSRulerView_drawHashMarksAndLabelsInRect");
	[THIS drawHashMarksAndLabelsInRect:rect];
}

void NSRulerView_drawMarkersInRect (NSRulerView* THIS, NSRect rect) {
	NSLog(@"NSRulerView_drawMarkersInRect");
	[THIS drawMarkersInRect:rect];
}

BOOL NSRulerView_isFlipped (NSRulerView* THIS) {
	NSLog(@"NSRulerView_isFlipped");
	return [THIS isFlipped];
}

BOOL NSRulerView_rulerView_shouldMoveMarker (NSRulerView* THIS, NSRulerView * ruler, NSRulerMarker * marker) {
	NSLog(@"NSRulerView_rulerView_shouldMoveMarker");
	return [THIS rulerView:ruler shouldMoveMarker:marker];
}

float NSRulerView_rulerView_willMoveMarker_toLocation (NSRulerView* THIS, NSRulerView * ruler, NSRulerMarker * marker, float location) {
	NSLog(@"NSRulerView_rulerView_willMoveMarker_toLocation");
	return [THIS rulerView:ruler willMoveMarker:marker toLocation:location];
}

void NSRulerView_rulerView_didMoveMarker (NSRulerView* THIS, NSRulerView * ruler, NSRulerMarker * marker) {
	NSLog(@"NSRulerView_rulerView_didMoveMarker");
	[THIS rulerView:ruler didMoveMarker:marker];
}

BOOL NSRulerView_rulerView_shouldRemoveMarker (NSRulerView* THIS, NSRulerView * ruler, NSRulerMarker * marker) {
	NSLog(@"NSRulerView_rulerView_shouldRemoveMarker");
	return [THIS rulerView:ruler shouldRemoveMarker:marker];
}

void NSRulerView_rulerView_didRemoveMarker (NSRulerView* THIS, NSRulerView * ruler, NSRulerMarker * marker) {
	NSLog(@"NSRulerView_rulerView_didRemoveMarker");
	[THIS rulerView:ruler didRemoveMarker:marker];
}

BOOL NSRulerView_rulerView_shouldAddMarker (NSRulerView* THIS, NSRulerView * ruler, NSRulerMarker * marker) {
	NSLog(@"NSRulerView_rulerView_shouldAddMarker");
	return [THIS rulerView:ruler shouldAddMarker:marker];
}

float NSRulerView_rulerView_willAddMarker_atLocation (NSRulerView* THIS, NSRulerView * ruler, NSRulerMarker * marker, float location) {
	NSLog(@"NSRulerView_rulerView_willAddMarker_atLocation");
	return [THIS rulerView:ruler willAddMarker:marker atLocation:location];
}

void NSRulerView_rulerView_didAddMarker (NSRulerView* THIS, NSRulerView * ruler, NSRulerMarker * marker) {
	NSLog(@"NSRulerView_rulerView_didAddMarker");
	[THIS rulerView:ruler didAddMarker:marker];
}

void NSRulerView_rulerView_handleMouseDown (NSRulerView* THIS, NSRulerView * ruler, NSEvent * event) {
	NSLog(@"NSRulerView_rulerView_handleMouseDown");
	[THIS rulerView:ruler handleMouseDown:event];
}

void NSRulerView_rulerView_willSetClientView (NSRulerView* THIS, NSRulerView * ruler, NSView * newClient) {
	NSLog(@"NSRulerView_rulerView_willSetClientView");
	[THIS rulerView:ruler willSetClientView:newClient];
}

NSRulerView * NSRulerView_alloc(){
	NSLog(@"NSRulerView_alloc()");
	return [ NSRulerView alloc ];
}