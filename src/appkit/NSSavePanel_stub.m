/* Generated by genstubs.pl
 * (c) 2004 kangaroo, C.J. and Urs
 */

#include <Cocoa/Cocoa.h>

#include <AppKit/NSNibDeclarations.h>
#include <AppKit/NSPanel.h>

NSSavePanel * NSSavePanel$_savePanel () {
	NSLog(@"NSSavePanel$_savePanel");
	return [NSSavePanel savePanel];
}

NSURL * NSSavePanel_URL (NSSavePanel* THIS) {
	NSLog(@"NSSavePanel_URL");
	return [THIS URL];
}

NSString * NSSavePanel_filename (NSSavePanel* THIS) {
	NSLog(@"NSSavePanel_filename");
	return [THIS filename];
}

NSString * NSSavePanel_directory (NSSavePanel* THIS) {
	NSLog(@"NSSavePanel_directory");
	return [THIS directory];
}

void NSSavePanel_setDirectory (NSSavePanel* THIS, NSString * path) {
	NSLog(@"NSSavePanel_setDirectory");
	[THIS setDirectory:path];
}

NSString * NSSavePanel_requiredFileType (NSSavePanel* THIS) {
	NSLog(@"NSSavePanel_requiredFileType");
	return [THIS requiredFileType];
}

void NSSavePanel_setRequiredFileType (NSSavePanel* THIS, NSString * type) {
	NSLog(@"NSSavePanel_setRequiredFileType");
	[THIS setRequiredFileType:type];
}

NSArray * NSSavePanel_allowedFileTypes (NSSavePanel* THIS) {
	NSLog(@"NSSavePanel_allowedFileTypes");
	return [THIS allowedFileTypes];
}

void NSSavePanel_setAllowedFileTypes (NSSavePanel* THIS, NSArray * types) {
	NSLog(@"NSSavePanel_setAllowedFileTypes");
	[THIS setAllowedFileTypes:types];
}

BOOL NSSavePanel_allowsOtherFileTypes (NSSavePanel* THIS) {
	NSLog(@"NSSavePanel_allowsOtherFileTypes");
	return [THIS allowsOtherFileTypes];
}

void NSSavePanel_setAllowsOtherFileTypes (NSSavePanel* THIS, BOOL flag) {
	NSLog(@"NSSavePanel_setAllowsOtherFileTypes");
	[THIS setAllowsOtherFileTypes:flag];
}

NSView * NSSavePanel_accessoryView (NSSavePanel* THIS) {
	NSLog(@"NSSavePanel_accessoryView");
	return [THIS accessoryView];
}

void NSSavePanel_setAccessoryView (NSSavePanel* THIS, NSView * view) {
	NSLog(@"NSSavePanel_setAccessoryView");
	[THIS setAccessoryView:view];
}

NSSavePanel * NSSavePanel_delegate (NSSavePanel* THIS) {
	NSLog(@"NSSavePanel_delegate");
	return [THIS delegate];
}

void NSSavePanel_setDelegate (NSSavePanel* THIS, id delegate) {
	NSLog(@"NSSavePanel_setDelegate");
	[THIS setDelegate:delegate];
}

BOOL NSSavePanel_isExpanded (NSSavePanel* THIS) {
	NSLog(@"NSSavePanel_isExpanded");
	return [THIS isExpanded];
}

BOOL NSSavePanel_canCreateDirectories (NSSavePanel* THIS) {
	NSLog(@"NSSavePanel_canCreateDirectories");
	return [THIS canCreateDirectories];
}

void NSSavePanel_setCanCreateDirectories (NSSavePanel* THIS, BOOL flag) {
	NSLog(@"NSSavePanel_setCanCreateDirectories");
	[THIS setCanCreateDirectories:flag];
}

BOOL NSSavePanel_canSelectHiddenExtension (NSSavePanel* THIS) {
	NSLog(@"NSSavePanel_canSelectHiddenExtension");
	return [THIS canSelectHiddenExtension];
}

void NSSavePanel_setCanSelectHiddenExtension (NSSavePanel* THIS, BOOL flag) {
	NSLog(@"NSSavePanel_setCanSelectHiddenExtension");
	[THIS setCanSelectHiddenExtension:flag];
}

BOOL NSSavePanel_isExtensionHidden (NSSavePanel* THIS) {
	NSLog(@"NSSavePanel_isExtensionHidden");
	return [THIS isExtensionHidden];
}

void NSSavePanel_setExtensionHidden (NSSavePanel* THIS, BOOL flag) {
	NSLog(@"NSSavePanel_setExtensionHidden");
	[THIS setExtensionHidden:flag];
}

BOOL NSSavePanel_treatsFilePackagesAsDirectories (NSSavePanel* THIS) {
	NSLog(@"NSSavePanel_treatsFilePackagesAsDirectories");
	return [THIS treatsFilePackagesAsDirectories];
}

void NSSavePanel_setTreatsFilePackagesAsDirectories (NSSavePanel* THIS, BOOL flag) {
	NSLog(@"NSSavePanel_setTreatsFilePackagesAsDirectories");
	[THIS setTreatsFilePackagesAsDirectories:flag];
}

NSString * NSSavePanel_prompt (NSSavePanel* THIS) {
	NSLog(@"NSSavePanel_prompt");
	return [THIS prompt];
}

void NSSavePanel_setPrompt (NSSavePanel* THIS, NSString * prompt) {
	NSLog(@"NSSavePanel_setPrompt");
	[THIS setPrompt:prompt];
}

NSString * NSSavePanel_title (NSSavePanel* THIS) {
	NSLog(@"NSSavePanel_title");
	return [THIS title];
}

void NSSavePanel_setTitle (NSSavePanel* THIS, NSString * title) {
	NSLog(@"NSSavePanel_setTitle");
	[THIS setTitle:title];
}

NSString * NSSavePanel_nameFieldLabel (NSSavePanel* THIS) {
	NSLog(@"NSSavePanel_nameFieldLabel");
	return [THIS nameFieldLabel];
}

void NSSavePanel_setNameFieldLabel (NSSavePanel* THIS, NSString * label) {
	NSLog(@"NSSavePanel_setNameFieldLabel");
	[THIS setNameFieldLabel:label];
}

NSString * NSSavePanel_message (NSSavePanel* THIS) {
	NSLog(@"NSSavePanel_message");
	return [THIS message];
}

void NSSavePanel_setMessage (NSSavePanel* THIS, NSString * message) {
	NSLog(@"NSSavePanel_setMessage");
	[THIS setMessage:message];
}

void NSSavePanel_validateVisibleColumns (NSSavePanel* THIS) {
	NSLog(@"NSSavePanel_validateVisibleColumns");
	[THIS validateVisibleColumns];
}

IBAction NSSavePanel_selectText (NSSavePanel* THIS, id sender) {
	NSLog(@"NSSavePanel_selectText");
	return [THIS selectText:sender];
}

IBAction NSSavePanel_ok (NSSavePanel* THIS, id sender) {
	NSLog(@"NSSavePanel_ok");
	return [THIS ok:sender];
}

IBAction NSSavePanel_cancel (NSSavePanel* THIS, id sender) {
	NSLog(@"NSSavePanel_cancel");
	return [THIS cancel:sender];
}

void NSSavePanel_beginSheetForDirectory_file_modalForWindow_modalDelegate_didEndSelector_contextInfo (NSSavePanel* THIS, NSString * path, NSString * name, NSWindow * docWindow, id delegate, SEL didEndSelector, void * contextInfo) {
	NSLog(@"NSSavePanel_beginSheetForDirectory_file_modalForWindow_modalDelegate_didEndSelector_contextInfo");
	[THIS beginSheetForDirectory:path file:name modalForWindow:docWindow modalDelegate:delegate didEndSelector:didEndSelector contextInfo:contextInfo];
}

int NSSavePanel_runModalForDirectory_file (NSSavePanel* THIS, NSString * path, NSString * name) {
	NSLog(@"NSSavePanel_runModalForDirectory_file");
	return [THIS runModalForDirectory:path file:name];
}

int NSSavePanel_runModal (NSSavePanel* THIS) {
	NSLog(@"NSSavePanel_runModal");
	return [THIS runModal];
}

BOOL NSSavePanel_panel_shouldShowFilename (NSSavePanel* THIS, id sender, NSString * filename) {
	NSLog(@"NSSavePanel_panel_shouldShowFilename");
	return [THIS panel:sender shouldShowFilename:filename];
}

NSComparisonResult NSSavePanel_panel_compareFilename_with_caseSensitive (NSSavePanel* THIS, id sender, NSString * name1, NSString * name2, BOOL caseSensitive) {
	NSLog(@"NSSavePanel_panel_compareFilename_with_caseSensitive");
	return [THIS panel:sender compareFilename:name1 with:name2 caseSensitive:caseSensitive];
}

BOOL NSSavePanel_panel_isValidFilename (NSSavePanel* THIS, id sender, NSString * filename) {
	NSLog(@"NSSavePanel_panel_isValidFilename");
	return [THIS panel:sender isValidFilename:filename];
}

NSString * NSSavePanel_panel_userEnteredFilename_confirmed (NSSavePanel* THIS, id sender, NSString * filename, BOOL okFlag) {
	NSLog(@"NSSavePanel_panel_userEnteredFilename_confirmed");
	return [THIS panel:sender userEnteredFilename:filename confirmed:okFlag];
}

void NSSavePanel_panel_willExpand (NSSavePanel* THIS, id sender, BOOL expanding) {
	NSLog(@"NSSavePanel_panel_willExpand");
	[THIS panel:sender willExpand:expanding];
}

void NSSavePanel_panel_directoryDidChange (NSSavePanel* THIS, id sender, NSString * path) {
	NSLog(@"NSSavePanel_panel_directoryDidChange");
	[THIS panel:sender directoryDidChange:path];
}

void NSSavePanel_panelSelectionDidChange (NSSavePanel* THIS, id sender) {
	NSLog(@"NSSavePanel_panelSelectionDidChange");
	[THIS panelSelectionDidChange:sender];
}

NSSavePanel * NSSavePanel_alloc(){
	NSLog(@"NSSavePanel_alloc()");
	return [ NSSavePanel alloc ];
}