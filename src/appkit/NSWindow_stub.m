/* Generated by genstubs.pl
 * (c) 2004 kangaroo, C.J. and Urs
 */

#include <Cocoa/Cocoa.h>

#include <Foundation/NSGeometry.h>
#include <AppKit/NSResponder.h>
#include <AppKit/NSGraphics.h>
#include <AppKit/AppKitDefines.h>
#include <Foundation/NSDate.h>
#include <ApplicationServices/ApplicationServices.h>

NSRect NSWindow$_frameRectForContentRect_styleMask (NSRect cRect, unsigned int aStyle) {
	NSLog(@"NSWindow$_frameRectForContentRect_styleMask");
	return [NSWindow frameRectForContentRect:cRect styleMask:aStyle];
}

NSRect NSWindow$_contentRectForFrameRect_styleMask (NSRect fRect, unsigned int aStyle) {
	NSLog(@"NSWindow$_contentRectForFrameRect_styleMask");
	return [NSWindow contentRectForFrameRect:fRect styleMask:aStyle];
}

float NSWindow$_minFrameWidthWithTitle_styleMask (NSString * aTitle, unsigned int aStyle) {
	NSLog(@"NSWindow$_minFrameWidthWithTitle_styleMask");
	return [NSWindow minFrameWidthWithTitle:aTitle styleMask:aStyle];
}

NSWindowDepth NSWindow$_defaultDepthLimit () {
	NSLog(@"NSWindow$_defaultDepthLimit");
	return [NSWindow defaultDepthLimit];
}

NSRect NSWindow_frameRectForContentRect (NSWindow* THIS, NSRect contentRect) {
	NSLog(@"NSWindow_frameRectForContentRect");
	return [THIS frameRectForContentRect:contentRect];
}

NSRect NSWindow_contentRectForFrameRect (NSWindow* THIS, NSRect frameRect) {
	NSLog(@"NSWindow_contentRectForFrameRect");
	return [THIS contentRectForFrameRect:frameRect];
}

NSWindow * NSWindow_initWithContentRect_styleMask_backing_defer (NSWindow* THIS, NSRect contentRect, unsigned int aStyle, NSBackingStoreType bufferingType, BOOL flag) {
	NSLog(@"NSWindow_initWithContentRect_styleMask_backing_defer");
	return [THIS initWithContentRect:contentRect styleMask:aStyle backing:bufferingType defer:flag];
}

NSWindow * NSWindow_initWithContentRect_styleMask_backing_defer_screen (NSWindow* THIS, NSRect contentRect, unsigned int aStyle, NSBackingStoreType bufferingType, BOOL flag, NSScreen * screen) {
	NSLog(@"NSWindow_initWithContentRect_styleMask_backing_defer_screen");
	return [THIS initWithContentRect:contentRect styleMask:aStyle backing:bufferingType defer:flag screen:screen];
}

NSString * NSWindow_title (NSWindow* THIS) {
	NSLog(@"NSWindow_title");
	return [THIS title];
}

void NSWindow_setTitle (NSWindow* THIS, NSString * aString) {
	NSLog(@"NSWindow_setTitle");
	[THIS setTitle:aString];
}

NSString * NSWindow_representedFilename (NSWindow* THIS) {
	NSLog(@"NSWindow_representedFilename");
	return [THIS representedFilename];
}

void NSWindow_setRepresentedFilename (NSWindow* THIS, NSString * aString) {
	NSLog(@"NSWindow_setRepresentedFilename");
	[THIS setRepresentedFilename:aString];
}

void NSWindow_setTitleWithRepresentedFilename (NSWindow* THIS, NSString * filename) {
	NSLog(@"NSWindow_setTitleWithRepresentedFilename");
	[THIS setTitleWithRepresentedFilename:filename];
}

void NSWindow_setExcludedFromWindowsMenu (NSWindow* THIS, BOOL flag) {
	NSLog(@"NSWindow_setExcludedFromWindowsMenu");
	[THIS setExcludedFromWindowsMenu:flag];
}

BOOL NSWindow_isExcludedFromWindowsMenu (NSWindow* THIS) {
	NSLog(@"NSWindow_isExcludedFromWindowsMenu");
	return [THIS isExcludedFromWindowsMenu];
}

void NSWindow_setContentView (NSWindow* THIS, NSView * aView) {
	NSLog(@"NSWindow_setContentView");
	[THIS setContentView:aView];
}

NSWindow * NSWindow_contentView (NSWindow* THIS) {
	NSLog(@"NSWindow_contentView");
	return [THIS contentView];
}

void NSWindow_setDelegate (NSWindow* THIS, id anObject) {
	NSLog(@"NSWindow_setDelegate");
	[THIS setDelegate:anObject];
}

NSWindow * NSWindow_delegate (NSWindow* THIS) {
	NSLog(@"NSWindow_delegate");
	return [THIS delegate];
}

int NSWindow_windowNumber (NSWindow* THIS) {
	NSLog(@"NSWindow_windowNumber");
	return [THIS windowNumber];
}

unsigned int NSWindow_styleMask (NSWindow* THIS) {
	NSLog(@"NSWindow_styleMask");
	return [THIS styleMask];
}

NSText * NSWindow_fieldEditor_forObject (NSWindow* THIS, BOOL createFlag, id anObject) {
	NSLog(@"NSWindow_fieldEditor_forObject");
	return [THIS fieldEditor:createFlag forObject:anObject];
}

void NSWindow_endEditingFor (NSWindow* THIS, id anObject) {
	NSLog(@"NSWindow_endEditingFor");
	[THIS endEditingFor:anObject];
}

NSRect NSWindow_constrainFrameRect_toScreen (NSWindow* THIS, NSRect frameRect, NSScreen * screen) {
	NSLog(@"NSWindow_constrainFrameRect_toScreen");
	return [THIS constrainFrameRect:frameRect toScreen:screen];
}

void NSWindow_setFrame_display (NSWindow* THIS, NSRect frameRect, BOOL flag) {
	NSLog(@"NSWindow_setFrame_display");
	[THIS setFrame:frameRect display:flag];
}

void NSWindow_setContentSize (NSWindow* THIS, NSSize aSize) {
	NSLog(@"NSWindow_setContentSize");
	[THIS setContentSize:aSize];
}

void NSWindow_setFrameOrigin (NSWindow* THIS, NSPoint aPoint) {
	NSLog(@"NSWindow_setFrameOrigin");
	[THIS setFrameOrigin:aPoint];
}

void NSWindow_setFrameTopLeftPoint (NSWindow* THIS, NSPoint aPoint) {
	NSLog(@"NSWindow_setFrameTopLeftPoint");
	[THIS setFrameTopLeftPoint:aPoint];
}

NSPoint NSWindow_cascadeTopLeftFromPoint (NSWindow* THIS, NSPoint topLeftPoint) {
	NSLog(@"NSWindow_cascadeTopLeftFromPoint");
	return [THIS cascadeTopLeftFromPoint:topLeftPoint];
}

NSRect NSWindow_frame (NSWindow* THIS) {
	NSLog(@"NSWindow_frame");
	return [THIS frame];
}

NSTimeInterval NSWindow_animationResizeTime (NSWindow* THIS, NSRect newFrame) {
	NSLog(@"NSWindow_animationResizeTime");
	return [THIS animationResizeTime:newFrame];
}

void NSWindow_setFrame_display_animate (NSWindow* THIS, NSRect frameRect, BOOL displayFlag, BOOL animateFlag) {
	NSLog(@"NSWindow_setFrame_display_animate");
	[THIS setFrame:frameRect display:displayFlag animate:animateFlag];
}

void NSWindow_setShowsResizeIndicator (NSWindow* THIS, BOOL show) {
	NSLog(@"NSWindow_setShowsResizeIndicator");
	[THIS setShowsResizeIndicator:show];
}

BOOL NSWindow_showsResizeIndicator (NSWindow* THIS) {
	NSLog(@"NSWindow_showsResizeIndicator");
	return [THIS showsResizeIndicator];
}

void NSWindow_setResizeIncrements (NSWindow* THIS, NSSize increments) {
	NSLog(@"NSWindow_setResizeIncrements");
	[THIS setResizeIncrements:increments];
}

NSSize NSWindow_resizeIncrements (NSWindow* THIS) {
	NSLog(@"NSWindow_resizeIncrements");
	return [THIS resizeIncrements];
}

void NSWindow_setAspectRatio (NSWindow* THIS, NSSize ratio) {
	NSLog(@"NSWindow_setAspectRatio");
	[THIS setAspectRatio:ratio];
}

NSSize NSWindow_aspectRatio (NSWindow* THIS) {
	NSLog(@"NSWindow_aspectRatio");
	return [THIS aspectRatio];
}

void NSWindow_setContentResizeIncrements (NSWindow* THIS, NSSize increments) {
	NSLog(@"NSWindow_setContentResizeIncrements");
	[THIS setContentResizeIncrements:increments];
}

NSSize NSWindow_contentResizeIncrements (NSWindow* THIS) {
	NSLog(@"NSWindow_contentResizeIncrements");
	return [THIS contentResizeIncrements];
}

void NSWindow_setContentAspectRatio (NSWindow* THIS, NSSize ratio) {
	NSLog(@"NSWindow_setContentAspectRatio");
	[THIS setContentAspectRatio:ratio];
}

NSSize NSWindow_contentAspectRatio (NSWindow* THIS) {
	NSLog(@"NSWindow_contentAspectRatio");
	return [THIS contentAspectRatio];
}

void NSWindow_useOptimizedDrawing (NSWindow* THIS, BOOL flag) {
	NSLog(@"NSWindow_useOptimizedDrawing");
	[THIS useOptimizedDrawing:flag];
}

void NSWindow_disableFlushWindow (NSWindow* THIS) {
	NSLog(@"NSWindow_disableFlushWindow");
	[THIS disableFlushWindow];
}

void NSWindow_enableFlushWindow (NSWindow* THIS) {
	NSLog(@"NSWindow_enableFlushWindow");
	[THIS enableFlushWindow];
}

BOOL NSWindow_isFlushWindowDisabled (NSWindow* THIS) {
	NSLog(@"NSWindow_isFlushWindowDisabled");
	return [THIS isFlushWindowDisabled];
}

void NSWindow_flushWindow (NSWindow* THIS) {
	NSLog(@"NSWindow_flushWindow");
	[THIS flushWindow];
}

void NSWindow_flushWindowIfNeeded (NSWindow* THIS) {
	NSLog(@"NSWindow_flushWindowIfNeeded");
	[THIS flushWindowIfNeeded];
}

void NSWindow_setViewsNeedDisplay (NSWindow* THIS, BOOL flag) {
	NSLog(@"NSWindow_setViewsNeedDisplay");
	[THIS setViewsNeedDisplay:flag];
}

BOOL NSWindow_viewsNeedDisplay (NSWindow* THIS) {
	NSLog(@"NSWindow_viewsNeedDisplay");
	return [THIS viewsNeedDisplay];
}

void NSWindow_displayIfNeeded (NSWindow* THIS) {
	NSLog(@"NSWindow_displayIfNeeded");
	[THIS displayIfNeeded];
}

void NSWindow_display (NSWindow* THIS) {
	NSLog(@"NSWindow_display");
	[THIS display];
}

void NSWindow_setAutodisplay (NSWindow* THIS, BOOL flag) {
	NSLog(@"NSWindow_setAutodisplay");
	[THIS setAutodisplay:flag];
}

BOOL NSWindow_isAutodisplay (NSWindow* THIS) {
	NSLog(@"NSWindow_isAutodisplay");
	return [THIS isAutodisplay];
}

void NSWindow_update (NSWindow* THIS) {
	NSLog(@"NSWindow_update");
	[THIS update];
}

BOOL NSWindow_makeFirstResponder (NSWindow* THIS, NSResponder * aResponder) {
	NSLog(@"NSWindow_makeFirstResponder");
	return [THIS makeFirstResponder:aResponder];
}

NSResponder * NSWindow_firstResponder (NSWindow* THIS) {
	NSLog(@"NSWindow_firstResponder");
	return [THIS firstResponder];
}

int NSWindow_resizeFlags (NSWindow* THIS) {
	NSLog(@"NSWindow_resizeFlags");
	return [THIS resizeFlags];
}

void NSWindow_keyDown (NSWindow* THIS, NSEvent * theEvent) {
	NSLog(@"NSWindow_keyDown");
	[THIS keyDown:theEvent];
}

void NSWindow_close (NSWindow* THIS) {
	NSLog(@"NSWindow_close");
	[THIS close];
}

void NSWindow_setReleasedWhenClosed (NSWindow* THIS, BOOL flag) {
	NSLog(@"NSWindow_setReleasedWhenClosed");
	[THIS setReleasedWhenClosed:flag];
}

BOOL NSWindow_isReleasedWhenClosed (NSWindow* THIS) {
	NSLog(@"NSWindow_isReleasedWhenClosed");
	return [THIS isReleasedWhenClosed];
}

void NSWindow_miniaturize (NSWindow* THIS, id sender) {
	NSLog(@"NSWindow_miniaturize");
	[THIS miniaturize:sender];
}

void NSWindow_deminiaturize (NSWindow* THIS, id sender) {
	NSLog(@"NSWindow_deminiaturize");
	[THIS deminiaturize:sender];
}

BOOL NSWindow_isZoomed (NSWindow* THIS) {
	NSLog(@"NSWindow_isZoomed");
	return [THIS isZoomed];
}

void NSWindow_zoom (NSWindow* THIS, id sender) {
	NSLog(@"NSWindow_zoom");
	[THIS zoom:sender];
}

BOOL NSWindow_isMiniaturized (NSWindow* THIS) {
	NSLog(@"NSWindow_isMiniaturized");
	return [THIS isMiniaturized];
}

BOOL NSWindow_tryToPerform_with (NSWindow* THIS, SEL anAction, id anObject) {
	NSLog(@"NSWindow_tryToPerform_with");
	return [THIS tryToPerform:anAction with:anObject];
}

NSWindow * NSWindow_validRequestorForSendType_returnType (NSWindow* THIS, NSString * sendType, NSString * returnType) {
	NSLog(@"NSWindow_validRequestorForSendType_returnType");
	return [THIS validRequestorForSendType:sendType returnType:returnType];
}

void NSWindow_setBackgroundColor (NSWindow* THIS, NSColor * color) {
	NSLog(@"NSWindow_setBackgroundColor");
	[THIS setBackgroundColor:color];
}

NSColor * NSWindow_backgroundColor (NSWindow* THIS) {
	NSLog(@"NSWindow_backgroundColor");
	return [THIS backgroundColor];
}

void NSWindow_setMovableByWindowBackground (NSWindow* THIS, BOOL flag) {
	NSLog(@"NSWindow_setMovableByWindowBackground");
	[THIS setMovableByWindowBackground:flag];
}

BOOL NSWindow_isMovableByWindowBackground (NSWindow* THIS) {
	NSLog(@"NSWindow_isMovableByWindowBackground");
	return [THIS isMovableByWindowBackground];
}

void NSWindow_setHidesOnDeactivate (NSWindow* THIS, BOOL flag) {
	NSLog(@"NSWindow_setHidesOnDeactivate");
	[THIS setHidesOnDeactivate:flag];
}

BOOL NSWindow_hidesOnDeactivate (NSWindow* THIS) {
	NSLog(@"NSWindow_hidesOnDeactivate");
	return [THIS hidesOnDeactivate];
}

void NSWindow_setCanHide (NSWindow* THIS, BOOL flag) {
	NSLog(@"NSWindow_setCanHide");
	[THIS setCanHide:flag];
}

BOOL NSWindow_canHide (NSWindow* THIS) {
	NSLog(@"NSWindow_canHide");
	return [THIS canHide];
}

void NSWindow_center (NSWindow* THIS) {
	NSLog(@"NSWindow_center");
	[THIS center];
}

void NSWindow_makeKeyAndOrderFront (NSWindow* THIS, id sender) {
	NSLog(@"NSWindow_makeKeyAndOrderFront");
	[THIS makeKeyAndOrderFront:sender];
}

void NSWindow_orderFront (NSWindow* THIS, id sender) {
	NSLog(@"NSWindow_orderFront");
	[THIS orderFront:sender];
}

void NSWindow_orderBack (NSWindow* THIS, id sender) {
	NSLog(@"NSWindow_orderBack");
	[THIS orderBack:sender];
}

void NSWindow_orderOut (NSWindow* THIS, id sender) {
	NSLog(@"NSWindow_orderOut");
	[THIS orderOut:sender];
}

void NSWindow_orderWindow_relativeTo (NSWindow* THIS, NSWindowOrderingMode place, int otherWin) {
	NSLog(@"NSWindow_orderWindow_relativeTo");
	[THIS orderWindow:place relativeTo:otherWin];
}

void NSWindow_orderFrontRegardless (NSWindow* THIS) {
	NSLog(@"NSWindow_orderFrontRegardless");
	[THIS orderFrontRegardless];
}

void NSWindow_setMiniwindowImage (NSWindow* THIS, NSImage * image) {
	NSLog(@"NSWindow_setMiniwindowImage");
	[THIS setMiniwindowImage:image];
}

void NSWindow_setMiniwindowTitle (NSWindow* THIS, NSString * title) {
	NSLog(@"NSWindow_setMiniwindowTitle");
	[THIS setMiniwindowTitle:title];
}

NSImage * NSWindow_miniwindowImage (NSWindow* THIS) {
	NSLog(@"NSWindow_miniwindowImage");
	return [THIS miniwindowImage];
}

NSString * NSWindow_miniwindowTitle (NSWindow* THIS) {
	NSLog(@"NSWindow_miniwindowTitle");
	return [THIS miniwindowTitle];
}

void NSWindow_setDocumentEdited (NSWindow* THIS, BOOL flag) {
	NSLog(@"NSWindow_setDocumentEdited");
	[THIS setDocumentEdited:flag];
}

BOOL NSWindow_isDocumentEdited (NSWindow* THIS) {
	NSLog(@"NSWindow_isDocumentEdited");
	return [THIS isDocumentEdited];
}

BOOL NSWindow_isVisible (NSWindow* THIS) {
	NSLog(@"NSWindow_isVisible");
	return [THIS isVisible];
}

BOOL NSWindow_isKeyWindow (NSWindow* THIS) {
	NSLog(@"NSWindow_isKeyWindow");
	return [THIS isKeyWindow];
}

BOOL NSWindow_isMainWindow (NSWindow* THIS) {
	NSLog(@"NSWindow_isMainWindow");
	return [THIS isMainWindow];
}

BOOL NSWindow_canBecomeKeyWindow (NSWindow* THIS) {
	NSLog(@"NSWindow_canBecomeKeyWindow");
	return [THIS canBecomeKeyWindow];
}

BOOL NSWindow_canBecomeMainWindow (NSWindow* THIS) {
	NSLog(@"NSWindow_canBecomeMainWindow");
	return [THIS canBecomeMainWindow];
}

void NSWindow_makeKeyWindow (NSWindow* THIS) {
	NSLog(@"NSWindow_makeKeyWindow");
	[THIS makeKeyWindow];
}

void NSWindow_makeMainWindow (NSWindow* THIS) {
	NSLog(@"NSWindow_makeMainWindow");
	[THIS makeMainWindow];
}

void NSWindow_becomeKeyWindow (NSWindow* THIS) {
	NSLog(@"NSWindow_becomeKeyWindow");
	[THIS becomeKeyWindow];
}

void NSWindow_resignKeyWindow (NSWindow* THIS) {
	NSLog(@"NSWindow_resignKeyWindow");
	[THIS resignKeyWindow];
}

void NSWindow_becomeMainWindow (NSWindow* THIS) {
	NSLog(@"NSWindow_becomeMainWindow");
	[THIS becomeMainWindow];
}

void NSWindow_resignMainWindow (NSWindow* THIS) {
	NSLog(@"NSWindow_resignMainWindow");
	[THIS resignMainWindow];
}

BOOL NSWindow_worksWhenModal (NSWindow* THIS) {
	NSLog(@"NSWindow_worksWhenModal");
	return [THIS worksWhenModal];
}

NSPoint NSWindow_convertBaseToScreen (NSWindow* THIS, NSPoint aPoint) {
	NSLog(@"NSWindow_convertBaseToScreen");
	return [THIS convertBaseToScreen:aPoint];
}

NSPoint NSWindow_convertScreenToBase (NSWindow* THIS, NSPoint aPoint) {
	NSLog(@"NSWindow_convertScreenToBase");
	return [THIS convertScreenToBase:aPoint];
}

void NSWindow_performClose (NSWindow* THIS, id sender) {
	NSLog(@"NSWindow_performClose");
	[THIS performClose:sender];
}

void NSWindow_performMiniaturize (NSWindow* THIS, id sender) {
	NSLog(@"NSWindow_performMiniaturize");
	[THIS performMiniaturize:sender];
}

void NSWindow_performZoom (NSWindow* THIS, id sender) {
	NSLog(@"NSWindow_performZoom");
	[THIS performZoom:sender];
}

int NSWindow_gState (NSWindow* THIS) {
	NSLog(@"NSWindow_gState");
	return [THIS gState];
}

void NSWindow_setOneShot (NSWindow* THIS, BOOL flag) {
	NSLog(@"NSWindow_setOneShot");
	[THIS setOneShot:flag];
}

BOOL NSWindow_isOneShot (NSWindow* THIS) {
	NSLog(@"NSWindow_isOneShot");
	return [THIS isOneShot];
}

NSData * NSWindow_dataWithEPSInsideRect (NSWindow* THIS, NSRect rect) {
	NSLog(@"NSWindow_dataWithEPSInsideRect");
	return [THIS dataWithEPSInsideRect:rect];
}

NSData * NSWindow_dataWithPDFInsideRect (NSWindow* THIS, NSRect rect) {
	NSLog(@"NSWindow_dataWithPDFInsideRect");
	return [THIS dataWithPDFInsideRect:rect];
}

void NSWindow_print (NSWindow* THIS, id sender) {
	NSLog(@"NSWindow_print");
	[THIS print:sender];
}

void NSWindow_disableCursorRects (NSWindow* THIS) {
	NSLog(@"NSWindow_disableCursorRects");
	[THIS disableCursorRects];
}

void NSWindow_enableCursorRects (NSWindow* THIS) {
	NSLog(@"NSWindow_enableCursorRects");
	[THIS enableCursorRects];
}

void NSWindow_discardCursorRects (NSWindow* THIS) {
	NSLog(@"NSWindow_discardCursorRects");
	[THIS discardCursorRects];
}

BOOL NSWindow_areCursorRectsEnabled (NSWindow* THIS) {
	NSLog(@"NSWindow_areCursorRectsEnabled");
	return [THIS areCursorRectsEnabled];
}

void NSWindow_invalidateCursorRectsForView (NSWindow* THIS, NSView * aView) {
	NSLog(@"NSWindow_invalidateCursorRectsForView");
	[THIS invalidateCursorRectsForView:aView];
}

void NSWindow_resetCursorRects (NSWindow* THIS) {
	NSLog(@"NSWindow_resetCursorRects");
	[THIS resetCursorRects];
}

void NSWindow_setAllowsToolTipsWhenApplicationIsInactive (NSWindow* THIS, BOOL allowWhenInactive) {
	NSLog(@"NSWindow_setAllowsToolTipsWhenApplicationIsInactive");
	[THIS setAllowsToolTipsWhenApplicationIsInactive:allowWhenInactive];
}

BOOL NSWindow_allowsToolTipsWhenApplicationIsInactive (NSWindow* THIS) {
	NSLog(@"NSWindow_allowsToolTipsWhenApplicationIsInactive");
	return [THIS allowsToolTipsWhenApplicationIsInactive];
}

void NSWindow_setBackingType (NSWindow* THIS, NSBackingStoreType bufferingType) {
	NSLog(@"NSWindow_setBackingType");
	[THIS setBackingType:bufferingType];
}

NSBackingStoreType NSWindow_backingType (NSWindow* THIS) {
	NSLog(@"NSWindow_backingType");
	return [THIS backingType];
}

void NSWindow_setLevel (NSWindow* THIS, int newLevel) {
	NSLog(@"NSWindow_setLevel");
	[THIS setLevel:newLevel];
}

int NSWindow_level (NSWindow* THIS) {
	NSLog(@"NSWindow_level");
	return [THIS level];
}

void NSWindow_setDepthLimit (NSWindow* THIS, NSWindowDepth limit) {
	NSLog(@"NSWindow_setDepthLimit");
	[THIS setDepthLimit:limit];
}

NSWindowDepth NSWindow_depthLimit (NSWindow* THIS) {
	NSLog(@"NSWindow_depthLimit");
	return [THIS depthLimit];
}

void NSWindow_setDynamicDepthLimit (NSWindow* THIS, BOOL flag) {
	NSLog(@"NSWindow_setDynamicDepthLimit");
	[THIS setDynamicDepthLimit:flag];
}

BOOL NSWindow_hasDynamicDepthLimit (NSWindow* THIS) {
	NSLog(@"NSWindow_hasDynamicDepthLimit");
	return [THIS hasDynamicDepthLimit];
}

NSScreen * NSWindow_screen (NSWindow* THIS) {
	NSLog(@"NSWindow_screen");
	return [THIS screen];
}

NSScreen * NSWindow_deepestScreen (NSWindow* THIS) {
	NSLog(@"NSWindow_deepestScreen");
	return [THIS deepestScreen];
}

BOOL NSWindow_canStoreColor (NSWindow* THIS) {
	NSLog(@"NSWindow_canStoreColor");
	return [THIS canStoreColor];
}

void NSWindow_setHasShadow (NSWindow* THIS, BOOL hasShadow) {
	NSLog(@"NSWindow_setHasShadow");
	[THIS setHasShadow:hasShadow];
}

BOOL NSWindow_hasShadow (NSWindow* THIS) {
	NSLog(@"NSWindow_hasShadow");
	return [THIS hasShadow];
}

void NSWindow_invalidateShadow (NSWindow* THIS) {
	NSLog(@"NSWindow_invalidateShadow");
	[THIS invalidateShadow];
}

void NSWindow_setAlphaValue (NSWindow* THIS, float windowAlpha) {
	NSLog(@"NSWindow_setAlphaValue");
	[THIS setAlphaValue:windowAlpha];
}

float NSWindow_alphaValue (NSWindow* THIS) {
	NSLog(@"NSWindow_alphaValue");
	return [THIS alphaValue];
}

void NSWindow_setOpaque (NSWindow* THIS, BOOL isOpaque) {
	NSLog(@"NSWindow_setOpaque");
	[THIS setOpaque:isOpaque];
}

BOOL NSWindow_isOpaque (NSWindow* THIS) {
	NSLog(@"NSWindow_isOpaque");
	return [THIS isOpaque];
}

NSString * NSWindow_stringWithSavedFrame (NSWindow* THIS) {
	NSLog(@"NSWindow_stringWithSavedFrame");
	return [THIS stringWithSavedFrame];
}

void NSWindow_setFrameFromString (NSWindow* THIS, NSString * string) {
	NSLog(@"NSWindow_setFrameFromString");
	[THIS setFrameFromString:string];
}

void NSWindow_saveFrameUsingName (NSWindow* THIS, NSString * name) {
	NSLog(@"NSWindow_saveFrameUsingName");
	[THIS saveFrameUsingName:name];
}

BOOL NSWindow_setFrameUsingName_force (NSWindow* THIS, NSString * name, BOOL force) {
	NSLog(@"NSWindow_setFrameUsingName_force");
	return [THIS setFrameUsingName:name force:force];
}

BOOL NSWindow_setFrameUsingName (NSWindow* THIS, NSString * name) {
	NSLog(@"NSWindow_setFrameUsingName");
	return [THIS setFrameUsingName:name];
}

BOOL NSWindow_setFrameAutosaveName (NSWindow* THIS, NSString * name) {
	NSLog(@"NSWindow_setFrameAutosaveName");
	return [THIS setFrameAutosaveName:name];
}

NSString * NSWindow_frameAutosaveName (NSWindow* THIS) {
	NSLog(@"NSWindow_frameAutosaveName");
	return [THIS frameAutosaveName];
}

void NSWindow$_removeFrameUsingName (NSString * name) {
	NSLog(@"NSWindow$_removeFrameUsingName");
	[NSWindow removeFrameUsingName:name];
}

void NSWindow_cacheImageInRect (NSWindow* THIS, NSRect aRect) {
	NSLog(@"NSWindow_cacheImageInRect");
	[THIS cacheImageInRect:aRect];
}

void NSWindow_restoreCachedImage (NSWindow* THIS) {
	NSLog(@"NSWindow_restoreCachedImage");
	[THIS restoreCachedImage];
}

void NSWindow_discardCachedImage (NSWindow* THIS) {
	NSLog(@"NSWindow_discardCachedImage");
	[THIS discardCachedImage];
}

NSSize NSWindow_minSize (NSWindow* THIS) {
	NSLog(@"NSWindow_minSize");
	return [THIS minSize];
}

NSSize NSWindow_maxSize (NSWindow* THIS) {
	NSLog(@"NSWindow_maxSize");
	return [THIS maxSize];
}

void NSWindow_setMinSize (NSWindow* THIS, NSSize size) {
	NSLog(@"NSWindow_setMinSize");
	[THIS setMinSize:size];
}

void NSWindow_setMaxSize (NSWindow* THIS, NSSize size) {
	NSLog(@"NSWindow_setMaxSize");
	[THIS setMaxSize:size];
}

NSSize NSWindow_contentMinSize (NSWindow* THIS) {
	NSLog(@"NSWindow_contentMinSize");
	return [THIS contentMinSize];
}

NSSize NSWindow_contentMaxSize (NSWindow* THIS) {
	NSLog(@"NSWindow_contentMaxSize");
	return [THIS contentMaxSize];
}

void NSWindow_setContentMinSize (NSWindow* THIS, NSSize size) {
	NSLog(@"NSWindow_setContentMinSize");
	[THIS setContentMinSize:size];
}

void NSWindow_setContentMaxSize (NSWindow* THIS, NSSize size) {
	NSLog(@"NSWindow_setContentMaxSize");
	[THIS setContentMaxSize:size];
}

NSEvent * NSWindow_nextEventMatchingMask (NSWindow* THIS, unsigned int mask) {
	NSLog(@"NSWindow_nextEventMatchingMask");
	return [THIS nextEventMatchingMask:mask];
}

NSEvent * NSWindow_nextEventMatchingMask_untilDate_inMode_dequeue (NSWindow* THIS, unsigned int mask, NSDate * expiration, NSString * mode, BOOL deqFlag) {
	NSLog(@"NSWindow_nextEventMatchingMask_untilDate_inMode_dequeue");
	return [THIS nextEventMatchingMask:mask untilDate:expiration inMode:mode dequeue:deqFlag];
}

void NSWindow_discardEventsMatchingMask_beforeEvent (NSWindow* THIS, unsigned int mask, NSEvent * lastEvent) {
	NSLog(@"NSWindow_discardEventsMatchingMask_beforeEvent");
	[THIS discardEventsMatchingMask:mask beforeEvent:lastEvent];
}

void NSWindow_postEvent_atStart (NSWindow* THIS, NSEvent * event, BOOL flag) {
	NSLog(@"NSWindow_postEvent_atStart");
	[THIS postEvent:event atStart:flag];
}

NSEvent * NSWindow_currentEvent (NSWindow* THIS) {
	NSLog(@"NSWindow_currentEvent");
	return [THIS currentEvent];
}

void NSWindow_setAcceptsMouseMovedEvents (NSWindow* THIS, BOOL flag) {
	NSLog(@"NSWindow_setAcceptsMouseMovedEvents");
	[THIS setAcceptsMouseMovedEvents:flag];
}

BOOL NSWindow_acceptsMouseMovedEvents (NSWindow* THIS) {
	NSLog(@"NSWindow_acceptsMouseMovedEvents");
	return [THIS acceptsMouseMovedEvents];
}

void NSWindow_setIgnoresMouseEvents (NSWindow* THIS, BOOL flag) {
	NSLog(@"NSWindow_setIgnoresMouseEvents");
	[THIS setIgnoresMouseEvents:flag];
}

BOOL NSWindow_ignoresMouseEvents (NSWindow* THIS) {
	NSLog(@"NSWindow_ignoresMouseEvents");
	return [THIS ignoresMouseEvents];
}

NSDictionary * NSWindow_deviceDescription (NSWindow* THIS) {
	NSLog(@"NSWindow_deviceDescription");
	return [THIS deviceDescription];
}

void NSWindow_sendEvent (NSWindow* THIS, NSEvent * theEvent) {
	NSLog(@"NSWindow_sendEvent");
	[THIS sendEvent:theEvent];
}

NSPoint NSWindow_mouseLocationOutsideOfEventStream (NSWindow* THIS) {
	NSLog(@"NSWindow_mouseLocationOutsideOfEventStream");
	return [THIS mouseLocationOutsideOfEventStream];
}

void NSWindow$_menuChanged (NSMenu * menu) {
	NSLog(@"NSWindow$_menuChanged");
	[NSWindow menuChanged:menu];
}

NSWindow * NSWindow_windowController (NSWindow* THIS) {
	NSLog(@"NSWindow_windowController");
	return [THIS windowController];
}

void NSWindow_setWindowController (NSWindow* THIS, NSWindowController * windowController) {
	NSLog(@"NSWindow_setWindowController");
	[THIS setWindowController:windowController];
}

BOOL NSWindow_isSheet (NSWindow* THIS) {
	NSLog(@"NSWindow_isSheet");
	return [THIS isSheet];
}

NSWindow * NSWindow_attachedSheet (NSWindow* THIS) {
	NSLog(@"NSWindow_attachedSheet");
	return [THIS attachedSheet];
}

NSButton * NSWindow$_standardWindowButton_forStyleMask (NSWindowButton b, unsigned int styleMask) {
	NSLog(@"NSWindow$_standardWindowButton_forStyleMask");
	return [NSWindow standardWindowButton:b forStyleMask:styleMask];
}

NSButton * NSWindow_standardWindowButton (NSWindow* THIS, NSWindowButton b) {
	NSLog(@"NSWindow_standardWindowButton");
	return [THIS standardWindowButton:b];
}

void NSWindow_addChildWindow_ordered (NSWindow* THIS, NSWindow * childWin, NSWindowOrderingMode place) {
	NSLog(@"NSWindow_addChildWindow_ordered");
	[THIS addChildWindow:childWin ordered:place];
}

void NSWindow_removeChildWindow (NSWindow* THIS, NSWindow * childWin) {
	NSLog(@"NSWindow_removeChildWindow");
	[THIS removeChildWindow:childWin];
}

NSArray * NSWindow_childWindows (NSWindow* THIS) {
	NSLog(@"NSWindow_childWindows");
	return [THIS childWindows];
}

NSWindow * NSWindow_parentWindow (NSWindow* THIS) {
	NSLog(@"NSWindow_parentWindow");
	return [THIS parentWindow];
}

void NSWindow_setParentWindow (NSWindow* THIS, NSWindow * window) {
	NSLog(@"NSWindow_setParentWindow");
	[THIS setParentWindow:window];
}

void NSWindow_setInitialFirstResponder (NSWindow* THIS, NSView * view) {
	NSLog(@"NSWindow_setInitialFirstResponder");
	[THIS setInitialFirstResponder:view];
}

NSView * NSWindow_initialFirstResponder (NSWindow* THIS) {
	NSLog(@"NSWindow_initialFirstResponder");
	return [THIS initialFirstResponder];
}

void NSWindow_selectNextKeyView (NSWindow* THIS, id sender) {
	NSLog(@"NSWindow_selectNextKeyView");
	[THIS selectNextKeyView:sender];
}

void NSWindow_selectPreviousKeyView (NSWindow* THIS, id sender) {
	NSLog(@"NSWindow_selectPreviousKeyView");
	[THIS selectPreviousKeyView:sender];
}

void NSWindow_selectKeyViewFollowingView (NSWindow* THIS, NSView * aView) {
	NSLog(@"NSWindow_selectKeyViewFollowingView");
	[THIS selectKeyViewFollowingView:aView];
}

void NSWindow_selectKeyViewPrecedingView (NSWindow* THIS, NSView * aView) {
	NSLog(@"NSWindow_selectKeyViewPrecedingView");
	[THIS selectKeyViewPrecedingView:aView];
}

NSSelectionDirection NSWindow_keyViewSelectionDirection (NSWindow* THIS) {
	NSLog(@"NSWindow_keyViewSelectionDirection");
	return [THIS keyViewSelectionDirection];
}

void NSWindow_setDefaultButtonCell (NSWindow* THIS, NSButtonCell * defButt) {
	NSLog(@"NSWindow_setDefaultButtonCell");
	[THIS setDefaultButtonCell:defButt];
}

NSButtonCell * NSWindow_defaultButtonCell (NSWindow* THIS) {
	NSLog(@"NSWindow_defaultButtonCell");
	return [THIS defaultButtonCell];
}

void NSWindow_disableKeyEquivalentForDefaultButtonCell (NSWindow* THIS) {
	NSLog(@"NSWindow_disableKeyEquivalentForDefaultButtonCell");
	[THIS disableKeyEquivalentForDefaultButtonCell];
}

void NSWindow_enableKeyEquivalentForDefaultButtonCell (NSWindow* THIS) {
	NSLog(@"NSWindow_enableKeyEquivalentForDefaultButtonCell");
	[THIS enableKeyEquivalentForDefaultButtonCell];
}

void NSWindow_setToolbar (NSWindow* THIS, NSToolbar* toolbar) {
	NSLog(@"NSWindow_setToolbar");
	[THIS setToolbar:toolbar];
}

NSToolbar * NSWindow_toolbar (NSWindow* THIS) {
	NSLog(@"NSWindow_toolbar");
	return [THIS toolbar];
}

void NSWindow_toggleToolbarShown (NSWindow* THIS, id sender) {
	NSLog(@"NSWindow_toggleToolbarShown");
	[THIS toggleToolbarShown:sender];
}

void NSWindow_runToolbarCustomizationPalette (NSWindow* THIS, id sender) {
	NSLog(@"NSWindow_runToolbarCustomizationPalette");
	[THIS runToolbarCustomizationPalette:sender];
}

void NSWindow_dragImage_at_offset_event_pasteboard_source_slideBack (NSWindow* THIS, NSImage * anImage, NSPoint baseLocation, NSSize initialOffset, NSEvent * event, NSPasteboard * pboard, id sourceObj, BOOL slideFlag) {
	NSLog(@"NSWindow_dragImage_at_offset_event_pasteboard_source_slideBack");
	[THIS dragImage:anImage at:baseLocation offset:initialOffset event:event pasteboard:pboard source:sourceObj slideBack:slideFlag];
}

void NSWindow_registerForDraggedTypes (NSWindow* THIS, NSArray * newTypes) {
	NSLog(@"NSWindow_registerForDraggedTypes");
	[THIS registerForDraggedTypes:newTypes];
}

void NSWindow_unregisterDraggedTypes (NSWindow* THIS) {
	NSLog(@"NSWindow_unregisterDraggedTypes");
	[THIS unregisterDraggedTypes];
}

void * /*HWND*/ NSWindow_windowHandle (NSWindow* THIS) {
	NSLog(@"NSWindow_windowHandle");
	[THIS windowHandle];
}

NSWindow * NSWindow_initWithWindowRef (NSWindow* THIS, void *  windowRef) {
	NSLog(@"NSWindow_initWithWindowRef");
	return [THIS initWithWindowRef:windowRef];
}

void * /* WindowRef */ NSWindow_windowRef (NSWindow* THIS) {
	NSLog(@"NSWindow_windowRef");
	[THIS windowRef];
}

void NSWindow_windowDidResize (NSWindow* THIS, NSNotification * notification) {
	NSLog(@"NSWindow_windowDidResize");
	[THIS windowDidResize:notification];
}

void NSWindow_windowDidExpose (NSWindow* THIS, NSNotification * notification) {
	NSLog(@"NSWindow_windowDidExpose");
	[THIS windowDidExpose:notification];
}

void NSWindow_windowWillMove (NSWindow* THIS, NSNotification * notification) {
	NSLog(@"NSWindow_windowWillMove");
	[THIS windowWillMove:notification];
}

void NSWindow_windowDidMove (NSWindow* THIS, NSNotification * notification) {
	NSLog(@"NSWindow_windowDidMove");
	[THIS windowDidMove:notification];
}

void NSWindow_windowDidBecomeKey (NSWindow* THIS, NSNotification * notification) {
	NSLog(@"NSWindow_windowDidBecomeKey");
	[THIS windowDidBecomeKey:notification];
}

void NSWindow_windowDidResignKey (NSWindow* THIS, NSNotification * notification) {
	NSLog(@"NSWindow_windowDidResignKey");
	[THIS windowDidResignKey:notification];
}

void NSWindow_windowDidBecomeMain (NSWindow* THIS, NSNotification * notification) {
	NSLog(@"NSWindow_windowDidBecomeMain");
	[THIS windowDidBecomeMain:notification];
}

void NSWindow_windowDidResignMain (NSWindow* THIS, NSNotification * notification) {
	NSLog(@"NSWindow_windowDidResignMain");
	[THIS windowDidResignMain:notification];
}

void NSWindow_windowWillClose (NSWindow* THIS, NSNotification * notification) {
	NSLog(@"NSWindow_windowWillClose");
	[THIS windowWillClose:notification];
}

void NSWindow_windowWillMiniaturize (NSWindow* THIS, NSNotification * notification) {
	NSLog(@"NSWindow_windowWillMiniaturize");
	[THIS windowWillMiniaturize:notification];
}

void NSWindow_windowDidMiniaturize (NSWindow* THIS, NSNotification * notification) {
	NSLog(@"NSWindow_windowDidMiniaturize");
	[THIS windowDidMiniaturize:notification];
}

void NSWindow_windowDidDeminiaturize (NSWindow* THIS, NSNotification * notification) {
	NSLog(@"NSWindow_windowDidDeminiaturize");
	[THIS windowDidDeminiaturize:notification];
}

void NSWindow_windowDidUpdate (NSWindow* THIS, NSNotification * notification) {
	NSLog(@"NSWindow_windowDidUpdate");
	[THIS windowDidUpdate:notification];
}

void NSWindow_windowDidChangeScreen (NSWindow* THIS, NSNotification * notification) {
	NSLog(@"NSWindow_windowDidChangeScreen");
	[THIS windowDidChangeScreen:notification];
}

void NSWindow_windowWillBeginSheet (NSWindow* THIS, NSNotification * notification) {
	NSLog(@"NSWindow_windowWillBeginSheet");
	[THIS windowWillBeginSheet:notification];
}

void NSWindow_windowDidEndSheet (NSWindow* THIS, NSNotification * notification) {
	NSLog(@"NSWindow_windowDidEndSheet");
	[THIS windowDidEndSheet:notification];
}

BOOL NSWindow_windowShouldClose (NSWindow* THIS, id sender) {
	NSLog(@"NSWindow_windowShouldClose");
	return [THIS windowShouldClose:sender];
}

NSWindow * NSWindow_windowWillReturnFieldEditor_toObject (NSWindow* THIS, NSWindow * sender, id client) {
	NSLog(@"NSWindow_windowWillReturnFieldEditor_toObject");
	return [THIS windowWillReturnFieldEditor:sender toObject:client];
}

NSSize NSWindow_windowWillResize_toSize (NSWindow* THIS, NSWindow * sender, NSSize frameSize) {
	NSLog(@"NSWindow_windowWillResize_toSize");
	return [THIS windowWillResize:sender toSize:frameSize];
}

NSRect NSWindow_windowWillUseStandardFrame_defaultFrame (NSWindow* THIS, NSWindow * window, NSRect newFrame) {
	NSLog(@"NSWindow_windowWillUseStandardFrame_defaultFrame");
	return [THIS windowWillUseStandardFrame:window defaultFrame:newFrame];
}

BOOL NSWindow_windowShouldZoom_toFrame (NSWindow* THIS, NSWindow * window, NSRect newFrame) {
	NSLog(@"NSWindow_windowShouldZoom_toFrame");
	return [THIS windowShouldZoom:window toFrame:newFrame];
}

NSUndoManager * NSWindow_windowWillReturnUndoManager (NSWindow* THIS, NSWindow * window) {
	NSLog(@"NSWindow_windowWillReturnUndoManager");
	return [THIS windowWillReturnUndoManager:window];
}

NSRect NSWindow_window_willPositionSheet_usingRect (NSWindow* THIS, NSWindow * window, NSWindow * sheet, NSRect rect) {
	NSLog(@"NSWindow_window_willPositionSheet_usingRect");
	return [THIS window:window willPositionSheet:sheet usingRect:rect];
}

NSWindow * NSWindow_alloc(){
	NSLog(@"NSWindow_alloc()");
	return [ NSWindow alloc ];
}