/* Generated by genstubs.pl
 * (c) 2004 kangaroo, C.J. and Urs
 */

#include <Cocoa/Cocoa.h>

#include <Foundation/NSObject.h>
#include <AppKit/NSNibDeclarations.h>
#include <AppKit/NSUserInterfaceValidation.h>

NSDocumentController * NSDocumentController$_sharedDocumentController () {
	NSLog(@"NSDocumentController$_sharedDocumentController");
	return [NSDocumentController sharedDocumentController];
}

NSDocumentController * NSDocumentController_init (NSDocumentController* THIS) {
	NSLog(@"NSDocumentController_init");
	return [THIS init];
}

NSArray * NSDocumentController_documents (NSDocumentController* THIS) {
	NSLog(@"NSDocumentController_documents");
	return [THIS documents];
}

NSDocumentController * NSDocumentController_currentDocument (NSDocumentController* THIS) {
	NSLog(@"NSDocumentController_currentDocument");
	return [THIS currentDocument];
}

NSString * NSDocumentController_currentDirectory (NSDocumentController* THIS) {
	NSLog(@"NSDocumentController_currentDirectory");
	return [THIS currentDirectory];
}

NSDocumentController * NSDocumentController_documentForWindow (NSDocumentController* THIS, NSWindow * window) {
	NSLog(@"NSDocumentController_documentForWindow");
	return [THIS documentForWindow:window];
}

NSDocumentController * NSDocumentController_documentForFileName (NSDocumentController* THIS, NSString * fileName) {
	NSLog(@"NSDocumentController_documentForFileName");
	return [THIS documentForFileName:fileName];
}

void NSDocumentController_addDocument (NSDocumentController* THIS, NSDocument * document) {
	NSLog(@"NSDocumentController_addDocument");
	[THIS addDocument:document];
}

void NSDocumentController_removeDocument (NSDocumentController* THIS, NSDocument * document) {
	NSLog(@"NSDocumentController_removeDocument");
	[THIS removeDocument:document];
}

NSDocumentController * NSDocumentController_makeUntitledDocumentOfType (NSDocumentController* THIS, NSString * type) {
	NSLog(@"NSDocumentController_makeUntitledDocumentOfType");
	return [THIS makeUntitledDocumentOfType:type];
}

NSDocumentController * NSDocumentController_makeDocumentWithContentsOfFile_ofType (NSDocumentController* THIS, NSString * fileName, NSString * type) {
	NSLog(@"NSDocumentController_makeDocumentWithContentsOfFile_ofType");
	return [THIS makeDocumentWithContentsOfFile:fileName ofType:type];
}

NSDocumentController * NSDocumentController_makeDocumentWithContentsOfURL_ofType (NSDocumentController* THIS, NSURL * url, NSString * type) {
	NSLog(@"NSDocumentController_makeDocumentWithContentsOfURL_ofType");
	return [THIS makeDocumentWithContentsOfURL:url ofType:type];
}

NSDocumentController * NSDocumentController_openUntitledDocumentOfType_display (NSDocumentController* THIS, NSString* type, BOOL display) {
	NSLog(@"NSDocumentController_openUntitledDocumentOfType_display");
	return [THIS openUntitledDocumentOfType:type display:display];
}

NSDocumentController * NSDocumentController_openDocumentWithContentsOfFile_display (NSDocumentController* THIS, NSString * fileName, BOOL display) {
	NSLog(@"NSDocumentController_openDocumentWithContentsOfFile_display");
	return [THIS openDocumentWithContentsOfFile:fileName display:display];
}

NSDocumentController * NSDocumentController_openDocumentWithContentsOfURL_display (NSDocumentController* THIS, NSURL * url, BOOL display) {
	NSLog(@"NSDocumentController_openDocumentWithContentsOfURL_display");
	return [THIS openDocumentWithContentsOfURL:url display:display];
}

BOOL NSDocumentController_shouldCreateUI (NSDocumentController* THIS) {
	NSLog(@"NSDocumentController_shouldCreateUI");
	return [THIS shouldCreateUI];
}

void NSDocumentController_setShouldCreateUI (NSDocumentController* THIS, BOOL flag) {
	NSLog(@"NSDocumentController_setShouldCreateUI");
	[THIS setShouldCreateUI:flag];
}

IBAction NSDocumentController_saveAllDocuments (NSDocumentController* THIS, id sender) {
	NSLog(@"NSDocumentController_saveAllDocuments");
	return [THIS saveAllDocuments:sender];
}

IBAction NSDocumentController_openDocument (NSDocumentController* THIS, id sender) {
	NSLog(@"NSDocumentController_openDocument");
	return [THIS openDocument:sender];
}

IBAction NSDocumentController_newDocument (NSDocumentController* THIS, id sender) {
	NSLog(@"NSDocumentController_newDocument");
	return [THIS newDocument:sender];
}

/* UNSUPPORTED: 
- (BOOL)validateUserInterfaceItem:(id <NSValidatedUserInterfaceItem>)anItem;
 */



BOOL NSDocumentController_validateMenuItem (NSDocumentController* THIS, NSMenuItem * anItem) {
	NSLog(@"NSDocumentController_validateMenuItem");
	return [THIS validateMenuItem:anItem];
}

NSArray * NSDocumentController_fileNamesFromRunningOpenPanel (NSDocumentController* THIS) {
	NSLog(@"NSDocumentController_fileNamesFromRunningOpenPanel");
	return [THIS fileNamesFromRunningOpenPanel];
}

NSArray * NSDocumentController_URLsFromRunningOpenPanel (NSDocumentController* THIS) {
	NSLog(@"NSDocumentController_URLsFromRunningOpenPanel");
	return [THIS URLsFromRunningOpenPanel];
}

int NSDocumentController_runModalOpenPanel_forTypes (NSDocumentController* THIS, NSOpenPanel * openPanel, NSArray * openableFileExtensions) {
	NSLog(@"NSDocumentController_runModalOpenPanel_forTypes");
	return [THIS runModalOpenPanel:openPanel forTypes:openableFileExtensions];
}

BOOL NSDocumentController_closeAllDocuments (NSDocumentController* THIS) {
	NSLog(@"NSDocumentController_closeAllDocuments");
	return [THIS closeAllDocuments];
}

void NSDocumentController_closeAllDocumentsWithDelegate_didCloseAllSelector_contextInfo (NSDocumentController* THIS, id delegate, SEL didAllCloseSelector, void * contextInfo) {
	NSLog(@"NSDocumentController_closeAllDocumentsWithDelegate_didCloseAllSelector_contextInfo");
	[THIS closeAllDocumentsWithDelegate:delegate didCloseAllSelector:didAllCloseSelector contextInfo:contextInfo];
}

BOOL NSDocumentController_reviewUnsavedDocumentsWithAlertTitle_cancellable (NSDocumentController* THIS, NSString * title, BOOL cancellable) {
	NSLog(@"NSDocumentController_reviewUnsavedDocumentsWithAlertTitle_cancellable");
	return [THIS reviewUnsavedDocumentsWithAlertTitle:title cancellable:cancellable];
}

void NSDocumentController_reviewUnsavedDocumentsWithAlertTitle_cancellable_delegate_didReviewAllSelector_contextInfo (NSDocumentController* THIS, NSString * title, BOOL cancellable, id delegate, SEL didReviewAllSelector, void * contextInfo) {
	NSLog(@"NSDocumentController_reviewUnsavedDocumentsWithAlertTitle_cancellable_delegate_didReviewAllSelector_contextInfo");
	[THIS reviewUnsavedDocumentsWithAlertTitle:title cancellable:cancellable delegate:delegate didReviewAllSelector:didReviewAllSelector contextInfo:contextInfo];
}

BOOL NSDocumentController_hasEditedDocuments (NSDocumentController* THIS) {
	NSLog(@"NSDocumentController_hasEditedDocuments");
	return [THIS hasEditedDocuments];
}

NSString * NSDocumentController_displayNameForType (NSDocumentController* THIS, NSString * documentTypeName) {
	NSLog(@"NSDocumentController_displayNameForType");
	return [THIS displayNameForType:documentTypeName];
}

NSString * NSDocumentController_typeFromFileExtension (NSDocumentController* THIS, NSString * fileNameExtensionOrHFSFileType) {
	NSLog(@"NSDocumentController_typeFromFileExtension");
	return [THIS typeFromFileExtension:fileNameExtensionOrHFSFileType];
}

NSArray * NSDocumentController_fileExtensionsFromType (NSDocumentController* THIS, NSString * documentTypeName) {
	NSLog(@"NSDocumentController_fileExtensionsFromType");
	return [THIS fileExtensionsFromType:documentTypeName];
}

Class NSDocumentController_documentClassForType (NSDocumentController* THIS, NSString * documentTypeName) {
	NSLog(@"NSDocumentController_documentClassForType");
	return [THIS documentClassForType:documentTypeName];
}

NSArray * NSDocumentController_recentDocumentURLs (NSDocumentController* THIS) {
	NSLog(@"NSDocumentController_recentDocumentURLs");
	return [THIS recentDocumentURLs];
}

void NSDocumentController_noteNewRecentDocumentURL (NSDocumentController* THIS, NSURL * url) {
	NSLog(@"NSDocumentController_noteNewRecentDocumentURL");
	[THIS noteNewRecentDocumentURL:url];
}

void NSDocumentController_noteNewRecentDocument (NSDocumentController* THIS, NSDocument * document) {
	NSLog(@"NSDocumentController_noteNewRecentDocument");
	[THIS noteNewRecentDocument:document];
}

IBAction NSDocumentController_clearRecentDocuments (NSDocumentController* THIS, id sender) {
	NSLog(@"NSDocumentController_clearRecentDocuments");
	return [THIS clearRecentDocuments:sender];
}

NSDocumentController * NSDocumentController_alloc(){
	NSLog(@"NSDocumentController_alloc()");
	return [ NSDocumentController alloc ];
}