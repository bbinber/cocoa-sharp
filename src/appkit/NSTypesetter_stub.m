/* Generated by genstubs.pl
 (c) 2004 kangaroo
*/

#include <Cocoa/Cocoa.h>

#include <Foundation/NSObject.h>

#include <AppKit/NSFont.h>

#include <AppKit/NSText.h>	/* For NSTextAlignment */

#include <AppKit/NSLayoutManager.h>

NSTypesetter * NSTypesetter_sharedSystemTypesetter (NSTypesetter* THIS) {
	NSLog(@"NSTypesetter_sharedSystemTypesetter");
	return [THIS sharedSystemTypesetter];
}
void NSTypesetter_layoutGlyphsInLayoutManager_startingAtGlyphIndex_maxNumberOfLineFragments_nextGlyphIndex (NSTypesetter* THIS, NSLayoutManager * layoutManager, unsigned startGlyphIndex, unsigned maxNumLines, unsigned * nextGlyph) {
	NSLog(@"NSTypesetter_layoutGlyphsInLayoutManager_startingAtGlyphIndex_maxNumberOfLineFragments_nextGlyphIndex");
	[THIS layoutGlyphsInLayoutManager:layoutManager startingAtGlyphIndex:startGlyphIndex maxNumberOfLineFragments:maxNumLines nextGlyphIndex:nextGlyph];
}

NSSize NSTypesetter_printingAdjustmentInLayoutManager_forNominallySpacedGlyphRange_packedGlyphs_count (NSTypesetter* THIS, NSLayoutManager * layoutMgr, NSRange nominallySpacedGlyphsRange, const unsigned char * packedGlyphs, unsigned packedGlyphsCount) {
	NSLog(@"NSTypesetter_printingAdjustmentInLayoutManager_forNominallySpacedGlyphRange_packedGlyphs_count");
	return [THIS printingAdjustmentInLayoutManager:layoutMgr forNominallySpacedGlyphRange:nominallySpacedGlyphsRange packedGlyphs:packedGlyphs count:packedGlyphsCount];
}

float NSTypesetter_baselineOffsetInLayoutManager_glyphIndex (NSTypesetter* THIS, NSLayoutManager * layoutMgr, unsigned glyphIndex) {
	NSLog(@"NSTypesetter_baselineOffsetInLayoutManager_glyphIndex");
	return [THIS baselineOffsetInLayoutManager:layoutMgr glyphIndex:glyphIndex];
}

NSTypesetterBehavior NSTypesetter_defaultTypesetterBehavior (NSTypesetter* THIS) {
	NSLog(@"NSTypesetter_defaultTypesetterBehavior");
	return [THIS defaultTypesetterBehavior];
}
NSTypesetter * NSTypesetter_sharedSystemTypesetterForBehavior (NSTypesetter* THIS, NSTypesetterBehavior theBehavior) {
	NSLog(@"NSTypesetter_sharedSystemTypesetterForBehavior");
	return [THIS sharedSystemTypesetterForBehavior:theBehavior];
}

NSTypesetter * NSTypesetter_sharedInstance (NSTypesetter* THIS) {
	NSLog(@"NSTypesetter_sharedInstance");
	return [THIS sharedInstance];
}
NSLayoutManager * NSTypesetter_currentLayoutManager (NSTypesetter* THIS) {
	NSLog(@"NSTypesetter_currentLayoutManager");
	return [THIS currentLayoutManager];
}
NSTextContainer * NSTypesetter_currentContainer (NSTypesetter* THIS) {
	NSLog(@"NSTypesetter_currentContainer");
	return [THIS currentContainer];
}
NSParagraphStyle * NSTypesetter_currentParagraphStyle (NSTypesetter* THIS) {
	NSLog(@"NSTypesetter_currentParagraphStyle");
	return [THIS currentParagraphStyle];
}
NSTextStorage * NSTypesetter_currentTextStorage (NSTypesetter* THIS) {
	NSLog(@"NSTypesetter_currentTextStorage");
	return [THIS currentTextStorage];
}
NSTypesetterGlyphInfo * NSTypesetter_baseOfTypesetterGlyphInfo (NSTypesetter* THIS) {
	NSLog(@"NSTypesetter_baseOfTypesetterGlyphInfo");
	return [THIS baseOfTypesetterGlyphInfo];
}
unsigned NSTypesetter_sizeOfTypesetterGlyphInfo (NSTypesetter* THIS) {
	NSLog(@"NSTypesetter_sizeOfTypesetterGlyphInfo");
	return [THIS sizeOfTypesetterGlyphInfo];
}
unsigned NSTypesetter_capacityOfTypesetterGlyphInfo (NSTypesetter* THIS) {
	NSLog(@"NSTypesetter_capacityOfTypesetterGlyphInfo");
	return [THIS capacityOfTypesetterGlyphInfo];
}
unsigned NSTypesetter_firstGlyphIndexOfCurrentLineFragment (NSTypesetter* THIS) {
	NSLog(@"NSTypesetter_firstGlyphIndexOfCurrentLineFragment");
	return [THIS firstGlyphIndexOfCurrentLineFragment];
}
void NSTypesetter_layoutGlyphsInLayoutManager_startingAtGlyphIndex_maxNumberOfLineFragments_nextGlyphIndex (NSTypesetter* THIS, NSLayoutManager * layoutManager, unsigned startGlyphIndex, unsigned maxNumLines, unsigned * nextGlyph) {
	NSLog(@"NSTypesetter_layoutGlyphsInLayoutManager_startingAtGlyphIndex_maxNumberOfLineFragments_nextGlyphIndex");
	[THIS layoutGlyphsInLayoutManager:layoutManager startingAtGlyphIndex:startGlyphIndex maxNumberOfLineFragments:maxNumLines nextGlyphIndex:nextGlyph];
}

NSLayoutStatus NSTypesetter_layoutGlyphsInHorizontalLineFragment_baseline (NSTypesetter* THIS, NSRect * lineFragmentRect, float * baseline) {
	NSLog(@"NSTypesetter_layoutGlyphsInHorizontalLineFragment_baseline");
	return [THIS layoutGlyphsInHorizontalLineFragment:lineFragmentRect baseline:baseline];
}

void NSTypesetter_clearGlyphCache (NSTypesetter* THIS) {
	NSLog(@"NSTypesetter_clearGlyphCache");
	[THIS clearGlyphCache];
}
void NSTypesetter_fillAttributesCache (NSTypesetter* THIS) {
	NSLog(@"NSTypesetter_fillAttributesCache");
	[THIS fillAttributesCache];
}
void NSTypesetter_clearAttributesCache (NSTypesetter* THIS) {
	NSLog(@"NSTypesetter_clearAttributesCache");
	[THIS clearAttributesCache];
}
unsigned NSTypesetter_growGlyphCaches_fillGlyphInfo (NSTypesetter* THIS, unsigned desiredCapacity, BOOL fillGlyphInfo) {
	NSLog(@"NSTypesetter_growGlyphCaches_fillGlyphInfo");
	return [THIS growGlyphCaches:desiredCapacity fillGlyphInfo:fillGlyphInfo];
}

void NSTypesetter_updateCurGlyphOffset (NSTypesetter* THIS) {
	NSLog(@"NSTypesetter_updateCurGlyphOffset");
	[THIS updateCurGlyphOffset];
}
void NSTypesetter_insertGlyph_atGlyphIndex_characterIndex (NSTypesetter* THIS, NSGlyph glyph, unsigned glyphIndex, unsigned charIndex) {
	NSLog(@"NSTypesetter_insertGlyph_atGlyphIndex_characterIndex");
	[THIS insertGlyph:glyph atGlyphIndex:glyphIndex characterIndex:charIndex];
}

NSLayoutStatus NSTypesetter_layoutControlGlyphForLineFragment (NSTypesetter* THIS, NSRect lineFrag) {
	NSLog(@"NSTypesetter_layoutControlGlyphForLineFragment");
	return [THIS layoutControlGlyphForLineFragment:lineFrag];
}

void NSTypesetter_layoutTab (NSTypesetter* THIS) {
	NSLog(@"NSTypesetter_layoutTab");
	[THIS layoutTab];
}
void NSTypesetter_breakLineAtIndex (NSTypesetter* THIS, unsigned location) {
	NSLog(@"NSTypesetter_breakLineAtIndex");
	[THIS breakLineAtIndex:location];
}

unsigned NSTypesetter_glyphIndexToBreakLineByHyphenatingWordAtIndex (NSTypesetter* THIS, unsigned charIndex) {
	NSLog(@"NSTypesetter_glyphIndexToBreakLineByHyphenatingWordAtIndex");
	return [THIS glyphIndexToBreakLineByHyphenatingWordAtIndex:charIndex];
}

unsigned NSTypesetter_glyphIndexToBreakLineByWordWrappingAtIndex (NSTypesetter* THIS, unsigned charIndex) {
	NSLog(@"NSTypesetter_glyphIndexToBreakLineByWordWrappingAtIndex");
	return [THIS glyphIndexToBreakLineByWordWrappingAtIndex:charIndex];
}

void NSTypesetter_layoutTab (NSTypesetter* THIS) {
	NSLog(@"NSTypesetter_layoutTab");
	[THIS layoutTab];
}
NSLayoutStatus NSTypesetter_layoutControlGlyphForLineFragment (NSTypesetter* THIS, NSRect lineFrag) {
	NSLog(@"NSTypesetter_layoutControlGlyphForLineFragment");
	return [THIS layoutControlGlyphForLineFragment:lineFrag];
}

void NSTypesetter_fullJustifyLineAtGlyphIndex (NSTypesetter* THIS, unsigned glyphIndexForLineBreak) {
	NSLog(@"NSTypesetter_fullJustifyLineAtGlyphIndex");
	[THIS fullJustifyLineAtGlyphIndex:glyphIndexForLineBreak];
}

void NSTypesetter_typesetterLaidOneGlyph (NSTypesetter* THIS, NSTypesetterGlyphInfo * gl) {
	NSLog(@"NSTypesetter_typesetterLaidOneGlyph");
	[THIS typesetterLaidOneGlyph:gl];
}

void NSTypesetter_willSetLineFragmentRect_forGlyphRange_usedRect (NSTypesetter* THIS, NSRect * aRect, NSRange aRange, NSRect * bRect) {
	NSLog(@"NSTypesetter_willSetLineFragmentRect_forGlyphRange_usedRect");
	[THIS willSetLineFragmentRect:aRect forGlyphRange:aRange usedRect:bRect];
}

NSTypesetter * NSTypesetter_alloc() {
	NSLog(@"NSTypesetter_alloc()");
	return [NSTypesetter alloc];
}
