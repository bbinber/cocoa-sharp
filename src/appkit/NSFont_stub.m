/* Generated by genstubs.pl
 * (c) 2004 kangaroo, C.J. and Urs
 */

#include <Cocoa/Cocoa.h>

#include <Foundation/NSObject.h>
#include <Foundation/NSString.h>
#include <Foundation/NSGeometry.h>
#include <AppKit/AppKitDefines.h>
#include <AppKit/NSCell.h>

NSFont * NSFont$_fontWithName_size (NSString * fontName, float fontSize) {
	NSLog(@"NSFont$_fontWithName_size");
	return [NSFont fontWithName:fontName size:fontSize];
}

NSFont * NSFont$_fontWithName_matrix (NSString * fontName, const float * fontMatrix) {
	NSLog(@"NSFont$_fontWithName_matrix");
	return [NSFont fontWithName:fontName matrix:fontMatrix];
}

void NSFont$_useFont (NSString * fontName) {
	NSLog(@"NSFont$_useFont");
	[NSFont useFont:fontName];
}

NSFont * NSFont$_userFontOfSize (float fontSize) {
	NSLog(@"NSFont$_userFontOfSize");
	return [NSFont userFontOfSize:fontSize];
}

NSFont * NSFont$_userFixedPitchFontOfSize (float fontSize) {
	NSLog(@"NSFont$_userFixedPitchFontOfSize");
	return [NSFont userFixedPitchFontOfSize:fontSize];
}

void NSFont$_setUserFont (NSFont * aFont) {
	NSLog(@"NSFont$_setUserFont");
	[NSFont setUserFont:aFont];
}

void NSFont$_setUserFixedPitchFont (NSFont * aFont) {
	NSLog(@"NSFont$_setUserFixedPitchFont");
	[NSFont setUserFixedPitchFont:aFont];
}

NSFont * NSFont$_systemFontOfSize (float fontSize) {
	NSLog(@"NSFont$_systemFontOfSize");
	return [NSFont systemFontOfSize:fontSize];
}

NSFont * NSFont$_boldSystemFontOfSize (float fontSize) {
	NSLog(@"NSFont$_boldSystemFontOfSize");
	return [NSFont boldSystemFontOfSize:fontSize];
}

NSFont * NSFont$_labelFontOfSize (float fontSize) {
	NSLog(@"NSFont$_labelFontOfSize");
	return [NSFont labelFontOfSize:fontSize];
}

float NSFont$_systemFontSize () {
	NSLog(@"NSFont$_systemFontSize");
	return [NSFont systemFontSize];
}

float NSFont$_smallSystemFontSize () {
	NSLog(@"NSFont$_smallSystemFontSize");
	return [NSFont smallSystemFontSize];
}

float NSFont$_labelFontSize () {
	NSLog(@"NSFont$_labelFontSize");
	return [NSFont labelFontSize];
}

float NSFont$_systemFontSizeForControlSize (NSControlSize controlSize) {
	NSLog(@"NSFont$_systemFontSizeForControlSize");
	return [NSFont systemFontSizeForControlSize:controlSize];
}

NSFont * NSFont$_titleBarFontOfSize (float fontSize) {
	NSLog(@"NSFont$_titleBarFontOfSize");
	return [NSFont titleBarFontOfSize:fontSize];
}

NSFont * NSFont$_menuFontOfSize (float fontSize) {
	NSLog(@"NSFont$_menuFontOfSize");
	return [NSFont menuFontOfSize:fontSize];
}

NSFont * NSFont$_menuBarFontOfSize (float fontSize) {
	NSLog(@"NSFont$_menuBarFontOfSize");
	return [NSFont menuBarFontOfSize:fontSize];
}

NSFont * NSFont$_messageFontOfSize (float fontSize) {
	NSLog(@"NSFont$_messageFontOfSize");
	return [NSFont messageFontOfSize:fontSize];
}

NSFont * NSFont$_paletteFontOfSize (float fontSize) {
	NSLog(@"NSFont$_paletteFontOfSize");
	return [NSFont paletteFontOfSize:fontSize];
}

NSFont * NSFont$_toolTipsFontOfSize (float fontSize) {
	NSLog(@"NSFont$_toolTipsFontOfSize");
	return [NSFont toolTipsFontOfSize:fontSize];
}

NSFont * NSFont$_controlContentFontOfSize (float fontSize) {
	NSLog(@"NSFont$_controlContentFontOfSize");
	return [NSFont controlContentFontOfSize:fontSize];
}

float NSFont_pointSize (NSFont* THIS) {
	NSLog(@"NSFont_pointSize");
	return [THIS pointSize];
}

NSString * NSFont_fontName (NSFont* THIS) {
	NSLog(@"NSFont_fontName");
	return [THIS fontName];
}

NSString * NSFont_familyName (NSFont* THIS) {
	NSLog(@"NSFont_familyName");
	return [THIS familyName];
}

NSString * NSFont_displayName (NSFont* THIS) {
	NSLog(@"NSFont_displayName");
	return [THIS displayName];
}

NSFontDescriptor * NSFont_fontDescriptor (NSFont* THIS) {
	NSLog(@"NSFont_fontDescriptor");
	return [THIS fontDescriptor];
}

const float * NSFont_matrix (NSFont* THIS) {
	NSLog(@"NSFont_matrix");
	return [THIS matrix];
}

void NSFont_set (NSFont* THIS) {
	NSLog(@"NSFont_set");
	[THIS set];
}

float NSFont_widthOfString (NSFont* THIS, NSString * string) {
	NSLog(@"NSFont_widthOfString");
	return [THIS widthOfString:string];
}

NSFont * NSFont_screenFont (NSFont* THIS) {
	NSLog(@"NSFont_screenFont");
	return [THIS screenFont];
}

NSFont * NSFont_printerFont (NSFont* THIS) {
	NSLog(@"NSFont_printerFont");
	return [THIS printerFont];
}

BOOL NSFont_isBaseFont (NSFont* THIS) {
	NSLog(@"NSFont_isBaseFont");
	return [THIS isBaseFont];
}

NSRect NSFont_boundingRectForFont (NSFont* THIS) {
	NSLog(@"NSFont_boundingRectForFont");
	return [THIS boundingRectForFont];
}

float NSFont_defaultLineHeightForFont (NSFont* THIS) {
	NSLog(@"NSFont_defaultLineHeightForFont");
	return [THIS defaultLineHeightForFont];
}

NSRect NSFont_boundingRectForGlyph (NSFont* THIS, NSGlyph aGlyph) {
	NSLog(@"NSFont_boundingRectForGlyph");
	return [THIS boundingRectForGlyph:aGlyph];
}

NSSize NSFont_advancementForGlyph (NSFont* THIS, NSGlyph ag) {
	NSLog(@"NSFont_advancementForGlyph");
	return [THIS advancementForGlyph:ag];
}

NSDictionary * NSFont_afmDictionary (NSFont* THIS) {
	NSLog(@"NSFont_afmDictionary");
	return [THIS afmDictionary];
}

BOOL NSFont_glyphIsEncoded (NSFont* THIS, NSGlyph aGlyph) {
	NSLog(@"NSFont_glyphIsEncoded");
	return [THIS glyphIsEncoded:aGlyph];
}

NSArray * NSFont$_preferredFontNames () {
	NSLog(@"NSFont$_preferredFontNames");
	return [NSFont preferredFontNames];
}

void NSFont$_setPreferredFontNames (NSArray * fontNameArray) {
	NSLog(@"NSFont$_setPreferredFontNames");
	[NSFont setPreferredFontNames:fontNameArray];
}

NSSize NSFont_maximumAdvancement (NSFont* THIS) {
	NSLog(@"NSFont_maximumAdvancement");
	return [THIS maximumAdvancement];
}

NSStringEncoding NSFont_mostCompatibleStringEncoding (NSFont* THIS) {
	NSLog(@"NSFont_mostCompatibleStringEncoding");
	return [THIS mostCompatibleStringEncoding];
}

unsigned NSFont_numberOfGlyphs (NSFont* THIS) {
	NSLog(@"NSFont_numberOfGlyphs");
	return [THIS numberOfGlyphs];
}

float NSFont_underlinePosition (NSFont* THIS) {
	NSLog(@"NSFont_underlinePosition");
	return [THIS underlinePosition];
}

float NSFont_underlineThickness (NSFont* THIS) {
	NSLog(@"NSFont_underlineThickness");
	return [THIS underlineThickness];
}

float NSFont_italicAngle (NSFont* THIS) {
	NSLog(@"NSFont_italicAngle");
	return [THIS italicAngle];
}

float NSFont_capHeight (NSFont* THIS) {
	NSLog(@"NSFont_capHeight");
	return [THIS capHeight];
}

float NSFont_xHeight (NSFont* THIS) {
	NSLog(@"NSFont_xHeight");
	return [THIS xHeight];
}

float NSFont_ascender (NSFont* THIS) {
	NSLog(@"NSFont_ascender");
	return [THIS ascender];
}

float NSFont_descender (NSFont* THIS) {
	NSLog(@"NSFont_descender");
	return [THIS descender];
}

BOOL NSFont_isFixedPitch (NSFont* THIS) {
	NSLog(@"NSFont_isFixedPitch");
	return [THIS isFixedPitch];
}

NSString * NSFont_encodingScheme (NSFont* THIS) {
	NSLog(@"NSFont_encodingScheme");
	return [THIS encodingScheme];
}

NSGlyph NSFont_glyphWithName (NSFont* THIS, NSString * aName) {
	NSLog(@"NSFont_glyphWithName");
	return [THIS glyphWithName:aName];
}

NSPoint NSFont_positionOfGlyph_precededByGlyph_isNominal (NSFont* THIS, NSGlyph curGlyph, NSGlyph prevGlyph, BOOL * nominal) {
	NSLog(@"NSFont_positionOfGlyph_precededByGlyph_isNominal");
	return [THIS positionOfGlyph:curGlyph precededByGlyph:prevGlyph isNominal:nominal];
}

int NSFont_positionsForCompositeSequence_numberOfGlyphs_pointArray (NSFont* THIS, NSGlyph * someGlyphs, int numGlyphs, NSPointArray points) {
	NSLog(@"NSFont_positionsForCompositeSequence_numberOfGlyphs_pointArray");
	return [THIS positionsForCompositeSequence:someGlyphs numberOfGlyphs:numGlyphs pointArray:points];
}

NSPoint NSFont_positionOfGlyph_struckOverGlyph_metricsExist (NSFont* THIS, NSGlyph curGlyph, NSGlyph prevGlyph, BOOL * exist) {
	NSLog(@"NSFont_positionOfGlyph_struckOverGlyph_metricsExist");
	return [THIS positionOfGlyph:curGlyph struckOverGlyph:prevGlyph metricsExist:exist];
}

NSPoint NSFont_positionOfGlyph_struckOverRect_metricsExist (NSFont* THIS, NSGlyph aGlyph, NSRect aRect, BOOL * exist) {
	NSLog(@"NSFont_positionOfGlyph_struckOverRect_metricsExist");
	return [THIS positionOfGlyph:aGlyph struckOverRect:aRect metricsExist:exist];
}

NSPoint NSFont_positionOfGlyph_forCharacter_struckOverRect (NSFont* THIS, NSGlyph aGlyph, unichar aChar, NSRect aRect) {
	NSLog(@"NSFont_positionOfGlyph_forCharacter_struckOverRect");
	return [THIS positionOfGlyph:aGlyph forCharacter:aChar struckOverRect:aRect];
}

NSPoint NSFont_positionOfGlyph_withRelation_toBaseGlyph_totalAdvancement_metricsExist (NSFont* THIS, NSGlyph thisGlyph, NSGlyphRelation rel, NSGlyph baseGlyph, NSSizePointer adv, BOOL * exist) {
	NSLog(@"NSFont_positionOfGlyph_withRelation_toBaseGlyph_totalAdvancement_metricsExist");
	return [THIS positionOfGlyph:thisGlyph withRelation:rel toBaseGlyph:baseGlyph totalAdvancement:adv metricsExist:exist];
}

NSMultibyteGlyphPacking NSFont_glyphPacking (NSFont* THIS) {
	NSLog(@"NSFont_glyphPacking");
	return [THIS glyphPacking];
}

NSCharacterSet * NSFont_coveredCharacterSet (NSFont* THIS) {
	NSLog(@"NSFont_coveredCharacterSet");
	return [THIS coveredCharacterSet];
}

NSFont * NSFont_alloc(){
	NSLog(@"NSFont_alloc()");
	return [ NSFont alloc ];
}