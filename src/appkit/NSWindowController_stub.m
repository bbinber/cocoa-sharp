/* Generated by genstubs.pl
 (c) 2004 kangaroo
*/

#include <Cocoa/Cocoa.h>

#include <AppKit/NSResponder.h>

#include <AppKit/NSNibDeclarations.h>

NSWindowController * NSWindowController_initWithWindow (NSWindowController* THIS, NSWindow * window) {
	NSLog(@"NSWindowController_initWithWindow");
	return [THIS initWithWindow:window];
}

NSWindowController * NSWindowController_initWithWindowNibName (NSWindowController* THIS, NSString * windowNibName) {
	NSLog(@"NSWindowController_initWithWindowNibName");
	return [THIS initWithWindowNibName:windowNibName];
}

NSWindowController * NSWindowController_initWithWindowNibName_owner (NSWindowController* THIS, NSString * windowNibName, NSWindowController * owner) {
	NSLog(@"NSWindowController_initWithWindowNibName_owner");
	return [THIS initWithWindowNibName:windowNibName owner:owner];
}

NSWindowController * NSWindowController_initWithWindowNibPath_owner (NSWindowController* THIS, NSString * windowNibPath, NSWindowController * owner) {
	NSLog(@"NSWindowController_initWithWindowNibPath_owner");
	return [THIS initWithWindowNibPath:windowNibPath owner:owner];
}

NSString * NSWindowController_windowNibName (NSWindowController* THIS) {
	NSLog(@"NSWindowController_windowNibName");
	return [THIS windowNibName];
}
NSString * NSWindowController_windowNibPath (NSWindowController* THIS) {
	NSLog(@"NSWindowController_windowNibPath");
	return [THIS windowNibPath];
}
NSWindowController * NSWindowController_owner (NSWindowController* THIS) {
	NSLog(@"NSWindowController_owner");
	return [THIS owner];
}
void NSWindowController_setWindowFrameAutosaveName (NSWindowController* THIS, NSString * name) {
	NSLog(@"NSWindowController_setWindowFrameAutosaveName");
	[THIS setWindowFrameAutosaveName:name];
}

NSString * NSWindowController_windowFrameAutosaveName (NSWindowController* THIS) {
	NSLog(@"NSWindowController_windowFrameAutosaveName");
	return [THIS windowFrameAutosaveName];
}
void NSWindowController_setShouldCascadeWindows (NSWindowController* THIS, BOOL flag) {
	NSLog(@"NSWindowController_setShouldCascadeWindows");
	[THIS setShouldCascadeWindows:flag];
}

BOOL NSWindowController_shouldCascadeWindows (NSWindowController* THIS) {
	NSLog(@"NSWindowController_shouldCascadeWindows");
	return [THIS shouldCascadeWindows];
}
NSWindowController * NSWindowController_document (NSWindowController* THIS) {
	NSLog(@"NSWindowController_document");
	return [THIS document];
}
void NSWindowController_setDocument (NSWindowController* THIS, NSDocument * document) {
	NSLog(@"NSWindowController_setDocument");
	[THIS setDocument:document];
}

void NSWindowController_setDocumentEdited (NSWindowController* THIS, BOOL dirtyFlag) {
	NSLog(@"NSWindowController_setDocumentEdited");
	[THIS setDocumentEdited:dirtyFlag];
}

void NSWindowController_setShouldCloseDocument (NSWindowController* THIS, BOOL flag) {
	NSLog(@"NSWindowController_setShouldCloseDocument");
	[THIS setShouldCloseDocument:flag];
}

BOOL NSWindowController_shouldCloseDocument (NSWindowController* THIS) {
	NSLog(@"NSWindowController_shouldCloseDocument");
	return [THIS shouldCloseDocument];
}
void NSWindowController_setWindow (NSWindowController* THIS, NSWindow * window) {
	NSLog(@"NSWindowController_setWindow");
	[THIS setWindow:window];
}

NSWindow * NSWindowController_window (NSWindowController* THIS) {
	NSLog(@"NSWindowController_window");
	return [THIS window];
}
void NSWindowController_synchronizeWindowTitleWithDocumentName (NSWindowController* THIS) {
	NSLog(@"NSWindowController_synchronizeWindowTitleWithDocumentName");
	[THIS synchronizeWindowTitleWithDocumentName];
}
NSString * NSWindowController_windowTitleForDocumentDisplayName (NSWindowController* THIS, NSString * displayName) {
	NSLog(@"NSWindowController_windowTitleForDocumentDisplayName");
	return [THIS windowTitleForDocumentDisplayName:displayName];
}

void NSWindowController_close (NSWindowController* THIS) {
	NSLog(@"NSWindowController_close");
	[THIS close];
}
IBAction NSWindowController_showWindow (NSWindowController* THIS, NSWindowController * sender) {
	NSLog(@"NSWindowController_showWindow");
	return [THIS showWindow:sender];
}

BOOL NSWindowController_isWindowLoaded (NSWindowController* THIS) {
	NSLog(@"NSWindowController_isWindowLoaded");
	return [THIS isWindowLoaded];
}
void NSWindowController_windowDidLoad (NSWindowController* THIS) {
	NSLog(@"NSWindowController_windowDidLoad");
	[THIS windowDidLoad];
}
void NSWindowController_windowWillLoad (NSWindowController* THIS) {
	NSLog(@"NSWindowController_windowWillLoad");
	[THIS windowWillLoad];
}
void NSWindowController_loadWindow (NSWindowController* THIS) {
	NSLog(@"NSWindowController_loadWindow");
	[THIS loadWindow];
}
NSWindowController * NSWindowController_alloc() {
	NSLog(@"NSWindowController_alloc()");
	return [NSWindowController alloc];
}
