/* Generated by genstubs.pl
 (c) 2004 kangaroo
*/

#include <Cocoa/Cocoa.h>

#include <Foundation/NSObject.h>

#include <Foundation/NSGeometry.h>

#include <Foundation/NSRange.h>

void NSInputManager_insertText (NSInputManager* THIS, NSInputManager * aString) {
	NSLog(@"NSInputManager_insertText");
	[THIS insertText:aString];
}

void NSInputManager_doCommandBySelector (NSInputManager* THIS, SEL aSelector) {
	NSLog(@"NSInputManager_doCommandBySelector");
	[THIS doCommandBySelector:aSelector];
}

void NSInputManager_setMarkedText_selectedRange (NSInputManager* THIS, NSInputManager * aString, NSRange selRange) {
	NSLog(@"NSInputManager_setMarkedText_selectedRange");
	[THIS setMarkedText:aString selectedRange:selRange];
}

void NSInputManager_unmarkText (NSInputManager* THIS) {
	NSLog(@"NSInputManager_unmarkText");
	[THIS unmarkText];
}
BOOL NSInputManager_hasMarkedText (NSInputManager* THIS) {
	NSLog(@"NSInputManager_hasMarkedText");
	return [THIS hasMarkedText];
}
long NSInputManager_conversationIdentifier (NSInputManager* THIS) {
	NSLog(@"NSInputManager_conversationIdentifier");
	return [THIS conversationIdentifier];
}
NSAttributedString * NSInputManager_attributedSubstringFromRange (NSInputManager* THIS, NSRange theRange) {
	NSLog(@"NSInputManager_attributedSubstringFromRange");
	return [THIS attributedSubstringFromRange:theRange];
}

NSRange NSInputManager_markedRange (NSInputManager* THIS) {
	NSLog(@"NSInputManager_markedRange");
	return [THIS markedRange];
}
NSRange NSInputManager_selectedRange (NSInputManager* THIS) {
	NSLog(@"NSInputManager_selectedRange");
	return [THIS selectedRange];
}
NSRect NSInputManager_firstRectForCharacterRange (NSInputManager* THIS, NSRange theRange) {
	NSLog(@"NSInputManager_firstRectForCharacterRange");
	return [THIS firstRectForCharacterRange:theRange];
}

unsigned int NSInputManager_characterIndexForPoint (NSInputManager* THIS, NSPoint thePoint) {
	NSLog(@"NSInputManager_characterIndexForPoint");
	return [THIS characterIndexForPoint:thePoint];
}

NSArray* NSInputManager_validAttributesForMarkedText (NSInputManager* THIS) {
	NSLog(@"NSInputManager_validAttributesForMarkedText");
	return [THIS validAttributesForMarkedText];
}
NSInputManager * NSInputManager_currentInputManager (NSInputManager* THIS) {
	NSLog(@"NSInputManager_currentInputManager");
	return [THIS currentInputManager];
}
void NSInputManager_cycleToNextInputLanguage (NSInputManager* THIS, NSInputManager * sender) {
	NSLog(@"NSInputManager_cycleToNextInputLanguage");
	[THIS cycleToNextInputLanguage:sender];
}

void NSInputManager_cycleToNextInputServerInLanguage (NSInputManager* THIS, NSInputManager * sender) {
	NSLog(@"NSInputManager_cycleToNextInputServerInLanguage");
	[THIS cycleToNextInputServerInLanguage:sender];
}

NSInputManager * NSInputManager_initWithName_host (NSInputManager* THIS, NSString * inputServerName, NSString * hostName) {
	NSLog(@"NSInputManager_initWithName_host");
	return [THIS initWithName:inputServerName host:hostName];
}

NSString * NSInputManager_localizedInputManagerName (NSInputManager* THIS) {
	NSLog(@"NSInputManager_localizedInputManagerName");
	return [THIS localizedInputManagerName];
}
void NSInputManager_markedTextAbandoned (NSInputManager* THIS, NSInputManager * cli) {
	NSLog(@"NSInputManager_markedTextAbandoned");
	[THIS markedTextAbandoned:cli];
}

void NSInputManager_markedTextSelectionChanged_client (NSInputManager* THIS, NSRange newSel, NSInputManager * cli) {
	NSLog(@"NSInputManager_markedTextSelectionChanged_client");
	[THIS markedTextSelectionChanged:newSel client:cli];
}

BOOL NSInputManager_wantsToInterpretAllKeystrokes (NSInputManager* THIS) {
	NSLog(@"NSInputManager_wantsToInterpretAllKeystrokes");
	return [THIS wantsToInterpretAllKeystrokes];
}
NSString* NSInputManager_language (NSInputManager* THIS) {
	NSLog(@"NSInputManager_language");
	return [THIS language];
}
NSImage * NSInputManager_image (NSInputManager* THIS) {
	NSLog(@"NSInputManager_image");
	return [THIS image];
}
NSInputServer* NSInputManager_server (NSInputManager* THIS) {
	NSLog(@"NSInputManager_server");
	return [THIS server];
}
BOOL NSInputManager_wantsToHandleMouseEvents (NSInputManager* THIS) {
	NSLog(@"NSInputManager_wantsToHandleMouseEvents");
	return [THIS wantsToHandleMouseEvents];
}
BOOL NSInputManager_handleMouseEvent (NSInputManager* THIS, NSEvent* theMouseEvent) {
	NSLog(@"NSInputManager_handleMouseEvent");
	return [THIS handleMouseEvent:theMouseEvent];
}

BOOL NSInputManager_wantsToDelayTextChangeNotifications (NSInputManager* THIS) {
	NSLog(@"NSInputManager_wantsToDelayTextChangeNotifications");
	return [THIS wantsToDelayTextChangeNotifications];
}
NSInputManager * NSInputManager_alloc() {
	NSLog(@"NSInputManager_alloc()");
	return [NSInputManager alloc];
}
