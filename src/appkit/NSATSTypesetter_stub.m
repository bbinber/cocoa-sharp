/* Generated by genstubs.pl
 (c) 2004 kangaroo
*/

#include <Cocoa/Cocoa.h>

#include <CoreFoundation/CFCharacterSet.h> // for UTF32Char

#include <AppKit/NSTypesetter.h>

#include <AppKit/NSParagraphStyle.h>

BOOL NSATSTypesetter_usesFontLeading (NSATSTypesetter* THIS) {
	NSLog(@"NSATSTypesetter_usesFontLeading");
	return [THIS usesFontLeading];
}
void NSATSTypesetter_setUsesFontLeading (NSATSTypesetter* THIS, BOOL flag) {
	NSLog(@"NSATSTypesetter_setUsesFontLeading");
	[THIS setUsesFontLeading:flag];
}

NSTypesetterBehavior NSATSTypesetter_typesetterBehavior (NSATSTypesetter* THIS) {
	NSLog(@"NSATSTypesetter_typesetterBehavior");
	return [THIS typesetterBehavior];
}
void NSATSTypesetter_setTypesetterBehavior (NSATSTypesetter* THIS, NSTypesetterBehavior behavior) {
	NSLog(@"NSATSTypesetter_setTypesetterBehavior");
	[THIS setTypesetterBehavior:behavior];
}

float NSATSTypesetter_hyphenationFactor (NSATSTypesetter* THIS) {
	NSLog(@"NSATSTypesetter_hyphenationFactor");
	return [THIS hyphenationFactor];
}
void NSATSTypesetter_setHyphenationFactor (NSATSTypesetter* THIS, float factor) {
	NSLog(@"NSATSTypesetter_setHyphenationFactor");
	[THIS setHyphenationFactor:factor];
}

float NSATSTypesetter_lineFragmentPadding (NSATSTypesetter* THIS) {
	NSLog(@"NSATSTypesetter_lineFragmentPadding");
	return [THIS lineFragmentPadding];
}
void NSATSTypesetter_setLineFragmentPadding (NSATSTypesetter* THIS, float padding) {
	NSLog(@"NSATSTypesetter_setLineFragmentPadding");
	[THIS setLineFragmentPadding:padding];
}

NSFont * NSATSTypesetter_substituteFontForFont (NSATSTypesetter* THIS, NSFont * originalFont) {
	NSLog(@"NSATSTypesetter_substituteFontForFont");
	return [THIS substituteFontForFont:originalFont];
}

NSTextTab * NSATSTypesetter_textTabForGlyphLocation_writingDirection_maxLocation (NSATSTypesetter* THIS, float glyphLocation, NSWritingDirection direction, float maxLocation) {
	NSLog(@"NSATSTypesetter_textTabForGlyphLocation_writingDirection_maxLocation");
	return [THIS textTabForGlyphLocation:glyphLocation writingDirection:direction maxLocation:maxLocation];
}

BOOL NSATSTypesetter_bidiProcessingEnabled (NSATSTypesetter* THIS) {
	NSLog(@"NSATSTypesetter_bidiProcessingEnabled");
	return [THIS bidiProcessingEnabled];
}
void NSATSTypesetter_setBidiProcessingEnabled (NSATSTypesetter* THIS, BOOL flag) {
	NSLog(@"NSATSTypesetter_setBidiProcessingEnabled");
	[THIS setBidiProcessingEnabled:flag];
}

void NSATSTypesetter_setAttributedString (NSATSTypesetter* THIS, NSAttributedString * attrString) {
	NSLog(@"NSATSTypesetter_setAttributedString");
	[THIS setAttributedString:attrString];
}

NSAttributedString * NSATSTypesetter_attributedString (NSATSTypesetter* THIS) {
	NSLog(@"NSATSTypesetter_attributedString");
	return [THIS attributedString];
}
void NSATSTypesetter_setParagraphGlyphRange_separatorGlyphRange (NSATSTypesetter* THIS, NSRange paragraphRange, NSRange paragraphSeparatorRange) {
	NSLog(@"NSATSTypesetter_setParagraphGlyphRange_separatorGlyphRange");
	[THIS setParagraphGlyphRange:paragraphRange separatorGlyphRange:paragraphSeparatorRange];
}

NSRange NSATSTypesetter_paragraphGlyphRange (NSATSTypesetter* THIS) {
	NSLog(@"NSATSTypesetter_paragraphGlyphRange");
	return [THIS paragraphGlyphRange];
}
NSRange NSATSTypesetter_paragraphSeparatorGlyphRange (NSATSTypesetter* THIS) {
	NSLog(@"NSATSTypesetter_paragraphSeparatorGlyphRange");
	return [THIS paragraphSeparatorGlyphRange];
}
unsigned int NSATSTypesetter_layoutParagraphAtPoint (NSATSTypesetter* THIS, NSPoint * lineFragmentOrigin) {
	NSLog(@"NSATSTypesetter_layoutParagraphAtPoint");
	return [THIS layoutParagraphAtPoint:lineFragmentOrigin];
}

float NSATSTypesetter_lineSpacingAfterGlyphAtIndex_withProposedLineFragmentRect (NSATSTypesetter* THIS, unsigned glyphIndex, NSRect rect) {
	NSLog(@"NSATSTypesetter_lineSpacingAfterGlyphAtIndex_withProposedLineFragmentRect");
	return [THIS lineSpacingAfterGlyphAtIndex:glyphIndex withProposedLineFragmentRect:rect];
}

float NSATSTypesetter_paragraphSpacingBeforeGlyphAtIndex_withProposedLineFragmentRect (NSATSTypesetter* THIS, unsigned glyphIndex, NSRect rect) {
	NSLog(@"NSATSTypesetter_paragraphSpacingBeforeGlyphAtIndex_withProposedLineFragmentRect");
	return [THIS paragraphSpacingBeforeGlyphAtIndex:glyphIndex withProposedLineFragmentRect:rect];
}

float NSATSTypesetter_paragraphSpacingAfterGlyphAtIndex_withProposedLineFragmentRect (NSATSTypesetter* THIS, unsigned glyphIndex, NSRect rect) {
	NSLog(@"NSATSTypesetter_paragraphSpacingAfterGlyphAtIndex_withProposedLineFragmentRect");
	return [THIS paragraphSpacingAfterGlyphAtIndex:glyphIndex withProposedLineFragmentRect:rect];
}

NSATSTypesetter * NSATSTypesetter_sharedTypesetter (NSATSTypesetter* THIS) {
	NSLog(@"NSATSTypesetter_sharedTypesetter");
	return [THIS sharedTypesetter];
}
NSLayoutManager * NSATSTypesetter_layoutManager (NSATSTypesetter* THIS) {
	NSLog(@"NSATSTypesetter_layoutManager");
	return [THIS layoutManager];
}
NSTextContainer * NSATSTypesetter_currentTextContainer (NSATSTypesetter* THIS) {
	NSLog(@"NSATSTypesetter_currentTextContainer");
	return [THIS currentTextContainer];
}
void NSATSTypesetter_setHardInvalidation_forGlyphRange (NSATSTypesetter* THIS, BOOL flag, NSRange glyphRange) {
	NSLog(@"NSATSTypesetter_setHardInvalidation_forGlyphRange");
	[THIS setHardInvalidation:flag forGlyphRange:glyphRange];
}

void NSATSTypesetter_getLineFragmentRect_usedRect_forParagraphSeparatorGlyphRange_atProposedOrigin (NSATSTypesetter* THIS, NSRect * lineFragmentRect, NSRect * lineFragmentUsedRect, NSRange paragraphSeparatorGlyphRange, NSPoint lineOrigin) {
	NSLog(@"NSATSTypesetter_getLineFragmentRect_usedRect_forParagraphSeparatorGlyphRange_atProposedOrigin");
	[THIS getLineFragmentRect:lineFragmentRect usedRect:lineFragmentUsedRect forParagraphSeparatorGlyphRange:paragraphSeparatorGlyphRange atProposedOrigin:lineOrigin];
}

void NSATSTypesetter_willSetLineFragmentRect_forGlyphRange_usedRect_baselineOffset (NSATSTypesetter* THIS, NSRect * lineRect, NSRange glyphRange, NSRect * usedRect, float * baselineOffset) {
	NSLog(@"NSATSTypesetter_willSetLineFragmentRect_forGlyphRange_usedRect_baselineOffset");
	[THIS willSetLineFragmentRect:lineRect forGlyphRange:glyphRange usedRect:usedRect baselineOffset:baselineOffset];
}

BOOL NSATSTypesetter_shouldBreakLineByWordBeforeCharacterAtIndex (NSATSTypesetter* THIS, unsigned charIndex) {
	NSLog(@"NSATSTypesetter_shouldBreakLineByWordBeforeCharacterAtIndex");
	return [THIS shouldBreakLineByWordBeforeCharacterAtIndex:charIndex];
}

BOOL NSATSTypesetter_shouldBreakLineByHyphenatingBeforeCharacterAtIndex (NSATSTypesetter* THIS, unsigned charIndex) {
	NSLog(@"NSATSTypesetter_shouldBreakLineByHyphenatingBeforeCharacterAtIndex");
	return [THIS shouldBreakLineByHyphenatingBeforeCharacterAtIndex:charIndex];
}

float NSATSTypesetter_hyphenationFactorForGlyphAtIndex (NSATSTypesetter* THIS, unsigned glyphIndex) {
	NSLog(@"NSATSTypesetter_hyphenationFactorForGlyphAtIndex");
	return [THIS hyphenationFactorForGlyphAtIndex:glyphIndex];
}

UTF32Char NSATSTypesetter_hyphenCharacterForGlyphAtIndex (NSATSTypesetter* THIS, unsigned glyphIndex) {
	NSLog(@"NSATSTypesetter_hyphenCharacterForGlyphAtIndex");
	return [THIS hyphenCharacterForGlyphAtIndex:glyphIndex];
}

NSRect NSATSTypesetter_boundingBoxForControlGlyphAtIndex_forTextContainer_proposedLineFragment_glyphPosition_characterIndex (NSATSTypesetter* THIS, unsigned glyphIndex, NSTextContainer * textContainer, NSRect proposedRect, NSPoint glyphPosition, unsigned charIndex) {
	NSLog(@"NSATSTypesetter_boundingBoxForControlGlyphAtIndex_forTextContainer_proposedLineFragment_glyphPosition_characterIndex");
	return [THIS boundingBoxForControlGlyphAtIndex:glyphIndex forTextContainer:textContainer proposedLineFragment:proposedRect glyphPosition:glyphPosition characterIndex:charIndex];
}

NSRange NSATSTypesetter_characterRangeForGlyphRange_actualGlyphRange (NSATSTypesetter* THIS, NSRange glyphRange, NSRangePointer actualGlyphRange) {
	NSLog(@"NSATSTypesetter_characterRangeForGlyphRange_actualGlyphRange");
	return [THIS characterRangeForGlyphRange:glyphRange actualGlyphRange:actualGlyphRange];
}

NSRange NSATSTypesetter_glyphRangeForCharacterRange_actualCharacterRange (NSATSTypesetter* THIS, NSRange charRange, NSRangePointer actualCharRange) {
	NSLog(@"NSATSTypesetter_glyphRangeForCharacterRange_actualCharacterRange");
	return [THIS glyphRangeForCharacterRange:charRange actualCharacterRange:actualCharRange];
}

unsigned NSATSTypesetter_getGlyphsInRange_glyphs_characterIndexes_glyphInscriptions_elasticBits (NSATSTypesetter* THIS, NSRange glyphsRange, NSGlyph * glyphBuffer, unsigned * charIndexBuffer, NSGlyphInscription * inscribeBuffer, BOOL * elasticBuffer) {
	NSLog(@"NSATSTypesetter_getGlyphsInRange_glyphs_characterIndexes_glyphInscriptions_elasticBits");
	return [THIS getGlyphsInRange:glyphsRange glyphs:glyphBuffer characterIndexes:charIndexBuffer glyphInscriptions:inscribeBuffer elasticBits:elasticBuffer];
}

NSRect NSATSTypesetter_lineFragmentRectForProposedRect_remainingRect (NSATSTypesetter* THIS, NSRect proposedRect, NSRectPointer remainingRect) {
	NSLog(@"NSATSTypesetter_lineFragmentRectForProposedRect_remainingRect");
	return [THIS lineFragmentRectForProposedRect:proposedRect remainingRect:remainingRect];
}

void NSATSTypesetter_setLineFragmentRect_forGlyphRange_usedRect_baselineOffset (NSATSTypesetter* THIS, NSRect fragmentRect, NSRange glyphRange, NSRect usedRect, float baselineOffset) {
	NSLog(@"NSATSTypesetter_setLineFragmentRect_forGlyphRange_usedRect_baselineOffset");
	[THIS setLineFragmentRect:fragmentRect forGlyphRange:glyphRange usedRect:usedRect baselineOffset:baselineOffset];
}

void NSATSTypesetter_substituteGlyphsInRange_withGlyphs (NSATSTypesetter* THIS, NSRange glyphRange, NSGlyph * glyphs) {
	NSLog(@"NSATSTypesetter_substituteGlyphsInRange_withGlyphs");
	[THIS substituteGlyphsInRange:glyphRange withGlyphs:glyphs];
}

void NSATSTypesetter_insertGlyph_atGlyphIndex_characterIndex (NSATSTypesetter* THIS, NSGlyph glyph, unsigned glyphIndex, unsigned characterIndex) {
	NSLog(@"NSATSTypesetter_insertGlyph_atGlyphIndex_characterIndex");
	[THIS insertGlyph:glyph atGlyphIndex:glyphIndex characterIndex:characterIndex];
}

void NSATSTypesetter_deleteGlyphsInRange (NSATSTypesetter* THIS, NSRange glyphRange) {
	NSLog(@"NSATSTypesetter_deleteGlyphsInRange");
	[THIS deleteGlyphsInRange:glyphRange];
}

void NSATSTypesetter_setNotShownAttribute_forGlyphRange (NSATSTypesetter* THIS, BOOL flag, NSRange glyphRange) {
	NSLog(@"NSATSTypesetter_setNotShownAttribute_forGlyphRange");
	[THIS setNotShownAttribute:flag forGlyphRange:glyphRange];
}

void NSATSTypesetter_setDrawsOutsideLineFragment_forGlyphRange (NSATSTypesetter* THIS, BOOL flag, NSRange glyphRange) {
	NSLog(@"NSATSTypesetter_setDrawsOutsideLineFragment_forGlyphRange");
	[THIS setDrawsOutsideLineFragment:flag forGlyphRange:glyphRange];
}

void NSATSTypesetter_setLocation_withAdvancements_forStartOfGlyphRange (NSATSTypesetter* THIS, NSPoint location, const float * advancements, NSRange glyphRange) {
	NSLog(@"NSATSTypesetter_setLocation_withAdvancements_forStartOfGlyphRange");
	[THIS setLocation:location withAdvancements:advancements forStartOfGlyphRange:glyphRange];
}

void NSATSTypesetter_setAttachmentSize_forGlyphRange (NSATSTypesetter* THIS, NSSize attachmentSize, NSRange glyphRange) {
	NSLog(@"NSATSTypesetter_setAttachmentSize_forGlyphRange");
	[THIS setAttachmentSize:attachmentSize forGlyphRange:glyphRange];
}

void NSATSTypesetter_setBidiLevels_forGlyphRange (NSATSTypesetter* THIS, const uint8_t * levels, NSRange glyphRange) {
	NSLog(@"NSATSTypesetter_setBidiLevels_forGlyphRange");
	[THIS setBidiLevels:levels forGlyphRange:glyphRange];
}

NSATSTypesetter * NSATSTypesetter_alloc() {
	NSLog(@"NSATSTypesetter_alloc()");
	return [NSATSTypesetter alloc];
}
