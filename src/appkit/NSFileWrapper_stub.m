/* Generated by genstubs.pl
 * (c) 2004 kangaroo, C.J. and Urs
 */

#include <Cocoa/Cocoa.h>

#include <Foundation/NSObject.h>

NSFileWrapper * NSFileWrapper_initDirectoryWithFileWrappers (NSFileWrapper* THIS, NSDictionary * docs) {
	NSLog(@"NSFileWrapper_initDirectoryWithFileWrappers");
	return [THIS initDirectoryWithFileWrappers:docs];
}

NSFileWrapper * NSFileWrapper_initRegularFileWithContents (NSFileWrapper* THIS, NSData * data) {
	NSLog(@"NSFileWrapper_initRegularFileWithContents");
	return [THIS initRegularFileWithContents:data];
}

NSFileWrapper * NSFileWrapper_initSymbolicLinkWithDestination (NSFileWrapper* THIS, NSString * path) {
	NSLog(@"NSFileWrapper_initSymbolicLinkWithDestination");
	return [THIS initSymbolicLinkWithDestination:path];
}

NSFileWrapper * NSFileWrapper_initWithPath (NSFileWrapper* THIS, NSString * path) {
	NSLog(@"NSFileWrapper_initWithPath");
	return [THIS initWithPath:path];
}

NSFileWrapper * NSFileWrapper_initWithSerializedRepresentation (NSFileWrapper* THIS, NSData * data) {
	NSLog(@"NSFileWrapper_initWithSerializedRepresentation");
	return [THIS initWithSerializedRepresentation:data];
}

BOOL NSFileWrapper_writeToFile_atomically_updateFilenames (NSFileWrapper* THIS, NSString * path, BOOL atomicFlag, BOOL updateFilenamesFlag) {
	NSLog(@"NSFileWrapper_writeToFile_atomically_updateFilenames");
	return [THIS writeToFile:path atomically:atomicFlag updateFilenames:updateFilenamesFlag];
}

NSData * NSFileWrapper_serializedRepresentation (NSFileWrapper* THIS) {
	NSLog(@"NSFileWrapper_serializedRepresentation");
	return [THIS serializedRepresentation];
}

void NSFileWrapper_setFilename (NSFileWrapper* THIS, NSString * filename) {
	NSLog(@"NSFileWrapper_setFilename");
	[THIS setFilename:filename];
}

NSString * NSFileWrapper_filename (NSFileWrapper* THIS) {
	NSLog(@"NSFileWrapper_filename");
	return [THIS filename];
}

void NSFileWrapper_setPreferredFilename (NSFileWrapper* THIS, NSString * filename) {
	NSLog(@"NSFileWrapper_setPreferredFilename");
	[THIS setPreferredFilename:filename];
}

NSString * NSFileWrapper_preferredFilename (NSFileWrapper* THIS) {
	NSLog(@"NSFileWrapper_preferredFilename");
	return [THIS preferredFilename];
}

void NSFileWrapper_setFileAttributes (NSFileWrapper* THIS, NSDictionary * attributes) {
	NSLog(@"NSFileWrapper_setFileAttributes");
	[THIS setFileAttributes:attributes];
}

NSDictionary * NSFileWrapper_fileAttributes (NSFileWrapper* THIS) {
	NSLog(@"NSFileWrapper_fileAttributes");
	return [THIS fileAttributes];
}

BOOL NSFileWrapper_isRegularFile (NSFileWrapper* THIS) {
	NSLog(@"NSFileWrapper_isRegularFile");
	return [THIS isRegularFile];
}

BOOL NSFileWrapper_isDirectory (NSFileWrapper* THIS) {
	NSLog(@"NSFileWrapper_isDirectory");
	return [THIS isDirectory];
}

BOOL NSFileWrapper_isSymbolicLink (NSFileWrapper* THIS) {
	NSLog(@"NSFileWrapper_isSymbolicLink");
	return [THIS isSymbolicLink];
}

void NSFileWrapper_setIcon (NSFileWrapper* THIS, NSImage * icon) {
	NSLog(@"NSFileWrapper_setIcon");
	[THIS setIcon:icon];
}

NSImage * NSFileWrapper_icon (NSFileWrapper* THIS) {
	NSLog(@"NSFileWrapper_icon");
	return [THIS icon];
}

BOOL NSFileWrapper_needsToBeUpdatedFromPath (NSFileWrapper* THIS, NSString * path) {
	NSLog(@"NSFileWrapper_needsToBeUpdatedFromPath");
	return [THIS needsToBeUpdatedFromPath:path];
}

BOOL NSFileWrapper_updateFromPath (NSFileWrapper* THIS, NSString * path) {
	NSLog(@"NSFileWrapper_updateFromPath");
	return [THIS updateFromPath:path];
}

NSString * NSFileWrapper_addFileWrapper (NSFileWrapper* THIS, NSFileWrapper * doc) {
	NSLog(@"NSFileWrapper_addFileWrapper");
	return [THIS addFileWrapper:doc];
}

void NSFileWrapper_removeFileWrapper (NSFileWrapper* THIS, NSFileWrapper * doc) {
	NSLog(@"NSFileWrapper_removeFileWrapper");
	[THIS removeFileWrapper:doc];
}

NSDictionary * NSFileWrapper_fileWrappers (NSFileWrapper* THIS) {
	NSLog(@"NSFileWrapper_fileWrappers");
	return [THIS fileWrappers];
}

NSString * NSFileWrapper_keyForFileWrapper (NSFileWrapper* THIS, NSFileWrapper * doc) {
	NSLog(@"NSFileWrapper_keyForFileWrapper");
	return [THIS keyForFileWrapper:doc];
}

NSString * NSFileWrapper_addFileWithPath (NSFileWrapper* THIS, NSString * path) {
	NSLog(@"NSFileWrapper_addFileWithPath");
	return [THIS addFileWithPath:path];
}

NSString * NSFileWrapper_addRegularFileWithContents_preferredFilename (NSFileWrapper* THIS, NSData * data, NSString * filename) {
	NSLog(@"NSFileWrapper_addRegularFileWithContents_preferredFilename");
	return [THIS addRegularFileWithContents:data preferredFilename:filename];
}

NSString * NSFileWrapper_addSymbolicLinkWithDestination_preferredFilename (NSFileWrapper* THIS, NSString * path, NSString * filename) {
	NSLog(@"NSFileWrapper_addSymbolicLinkWithDestination_preferredFilename");
	return [THIS addSymbolicLinkWithDestination:path preferredFilename:filename];
}

NSData * NSFileWrapper_regularFileContents (NSFileWrapper* THIS) {
	NSLog(@"NSFileWrapper_regularFileContents");
	return [THIS regularFileContents];
}

NSString * NSFileWrapper_symbolicLinkDestination (NSFileWrapper* THIS) {
	NSLog(@"NSFileWrapper_symbolicLinkDestination");
	return [THIS symbolicLinkDestination];
}

NSFileWrapper * NSFileWrapper_alloc(){
	NSLog(@"NSFileWrapper_alloc()");
	return [ NSFileWrapper alloc ];
}