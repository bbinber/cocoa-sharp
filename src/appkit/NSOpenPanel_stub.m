/* Generated by genstubs.pl
 (c) 2004 kangaroo
*/

#include <Cocoa/Cocoa.h>

#include <AppKit/NSSavePanel.h>

NSOpenPanel * NSOpenPanel_openPanel (NSOpenPanel* THIS) {
	NSLog(@"NSOpenPanel_openPanel");
	return [THIS openPanel];
}
NSArray * NSOpenPanel_URLs (NSOpenPanel* THIS) {
	NSLog(@"NSOpenPanel_URLs");
	return [THIS URLs];
}
NSArray * NSOpenPanel_filenames (NSOpenPanel* THIS) {
	NSLog(@"NSOpenPanel_filenames");
	return [THIS filenames];
}
BOOL NSOpenPanel_resolvesAliases (NSOpenPanel* THIS) {
	NSLog(@"NSOpenPanel_resolvesAliases");
	return [THIS resolvesAliases];
}
void NSOpenPanel_setResolvesAliases (NSOpenPanel* THIS, BOOL flag) {
	NSLog(@"NSOpenPanel_setResolvesAliases");
	[THIS setResolvesAliases:flag];
}

BOOL NSOpenPanel_canChooseDirectories (NSOpenPanel* THIS) {
	NSLog(@"NSOpenPanel_canChooseDirectories");
	return [THIS canChooseDirectories];
}
void NSOpenPanel_setCanChooseDirectories (NSOpenPanel* THIS, BOOL flag) {
	NSLog(@"NSOpenPanel_setCanChooseDirectories");
	[THIS setCanChooseDirectories:flag];
}

BOOL NSOpenPanel_allowsMultipleSelection (NSOpenPanel* THIS) {
	NSLog(@"NSOpenPanel_allowsMultipleSelection");
	return [THIS allowsMultipleSelection];
}
void NSOpenPanel_setAllowsMultipleSelection (NSOpenPanel* THIS, BOOL flag) {
	NSLog(@"NSOpenPanel_setAllowsMultipleSelection");
	[THIS setAllowsMultipleSelection:flag];
}

BOOL NSOpenPanel_canChooseFiles (NSOpenPanel* THIS) {
	NSLog(@"NSOpenPanel_canChooseFiles");
	return [THIS canChooseFiles];
}
void NSOpenPanel_setCanChooseFiles (NSOpenPanel* THIS, BOOL flag) {
	NSLog(@"NSOpenPanel_setCanChooseFiles");
	[THIS setCanChooseFiles:flag];
}

void NSOpenPanel_beginSheetForDirectory_file_types_modalForWindow_modalDelegate_didEndSelector_contextInfo (NSOpenPanel* THIS, NSString * path, NSString * name, NSArray * fileTypes, NSWindow * docWindow, NSOpenPanel * delegate, SEL didEndSelector, void * contextInfo) {
	NSLog(@"NSOpenPanel_beginSheetForDirectory_file_types_modalForWindow_modalDelegate_didEndSelector_contextInfo");
	[THIS beginSheetForDirectory:path file:name types:fileTypes modalForWindow:docWindow modalDelegate:delegate didEndSelector:didEndSelector contextInfo:contextInfo];
}

void NSOpenPanel_beginForDirectory_file_types_modelessDelegate_didEndSelector_contextInfo (NSOpenPanel* THIS, NSString * path, NSString * name, NSArray * fileTypes, NSOpenPanel * delegate, SEL didEndSelector, void * contextInfo) {
	NSLog(@"NSOpenPanel_beginForDirectory_file_types_modelessDelegate_didEndSelector_contextInfo");
	[THIS beginForDirectory:path file:name types:fileTypes modelessDelegate:delegate didEndSelector:didEndSelector contextInfo:contextInfo];
}

int NSOpenPanel_runModalForDirectory_file_types (NSOpenPanel* THIS, NSString * path, NSString * name, NSArray * fileTypes) {
	NSLog(@"NSOpenPanel_runModalForDirectory_file_types");
	return [THIS runModalForDirectory:path file:name types:fileTypes];
}

int NSOpenPanel_runModalForTypes (NSOpenPanel* THIS, NSArray * fileTypes) {
	NSLog(@"NSOpenPanel_runModalForTypes");
	return [THIS runModalForTypes:fileTypes];
}

NSOpenPanel * NSOpenPanel_alloc() {
	NSLog(@"NSOpenPanel_alloc()");
	return [NSOpenPanel alloc];
}
