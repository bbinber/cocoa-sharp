/* Generated by genstubs.pl
 * (c) 2004 kangaroo, C.J. and Urs
 */

#include <Cocoa/Cocoa.h>

#include <Foundation/NSObject.h>
#include <AppKit/NSNibDeclarations.h>
#include <AppKit/NSUserInterfaceValidation.h>

NSDocument * NSDocument_init (NSDocument* THIS) {
	NSLog(@"NSDocument_init");
	return [THIS init];
}

NSDocument * NSDocument_initWithContentsOfFile_ofType (NSDocument* THIS, NSString * fileName, NSString * fileType) {
	NSLog(@"NSDocument_initWithContentsOfFile_ofType");
	return [THIS initWithContentsOfFile:fileName ofType:fileType];
}

NSDocument * NSDocument_initWithContentsOfURL_ofType (NSDocument* THIS, NSURL * url, NSString * fileType) {
	NSLog(@"NSDocument_initWithContentsOfURL_ofType");
	return [THIS initWithContentsOfURL:url ofType:fileType];
}

NSArray * NSDocument_windowControllers (NSDocument* THIS) {
	NSLog(@"NSDocument_windowControllers");
	return [THIS windowControllers];
}

void NSDocument_addWindowController (NSDocument* THIS, NSWindowController * windowController) {
	NSLog(@"NSDocument_addWindowController");
	[THIS addWindowController:windowController];
}

void NSDocument_removeWindowController (NSDocument* THIS, NSWindowController * windowController) {
	NSLog(@"NSDocument_removeWindowController");
	[THIS removeWindowController:windowController];
}

NSString * NSDocument_windowNibName (NSDocument* THIS) {
	NSLog(@"NSDocument_windowNibName");
	return [THIS windowNibName];
}

void NSDocument_makeWindowControllers (NSDocument* THIS) {
	NSLog(@"NSDocument_makeWindowControllers");
	[THIS makeWindowControllers];
}

void NSDocument_showWindows (NSDocument* THIS) {
	NSLog(@"NSDocument_showWindows");
	[THIS showWindows];
}

BOOL NSDocument_shouldCloseWindowController (NSDocument* THIS, NSWindowController * windowController) {
	NSLog(@"NSDocument_shouldCloseWindowController");
	return [THIS shouldCloseWindowController:windowController];
}

void NSDocument_shouldCloseWindowController_delegate_shouldCloseSelector_contextInfo (NSDocument* THIS, NSWindowController * windowController, id delegate, SEL callback, void * contextInfo) {
	NSLog(@"NSDocument_shouldCloseWindowController_delegate_shouldCloseSelector_contextInfo");
	[THIS shouldCloseWindowController:windowController delegate:delegate shouldCloseSelector:callback contextInfo:contextInfo];
}

void NSDocument_setWindow (NSDocument* THIS, NSWindow * window) {
	NSLog(@"NSDocument_setWindow");
	[THIS setWindow:window];
}

void NSDocument_windowControllerWillLoadNib (NSDocument* THIS, NSWindowController * windowController) {
	NSLog(@"NSDocument_windowControllerWillLoadNib");
	[THIS windowControllerWillLoadNib:windowController];
}

void NSDocument_windowControllerDidLoadNib (NSDocument* THIS, NSWindowController * windowController) {
	NSLog(@"NSDocument_windowControllerDidLoadNib");
	[THIS windowControllerDidLoadNib:windowController];
}

NSWindow * NSDocument_windowForSheet (NSDocument* THIS) {
	NSLog(@"NSDocument_windowForSheet");
	return [THIS windowForSheet];
}

BOOL NSDocument_isDocumentEdited (NSDocument* THIS) {
	NSLog(@"NSDocument_isDocumentEdited");
	return [THIS isDocumentEdited];
}

void NSDocument_updateChangeCount (NSDocument* THIS, NSDocumentChangeType change) {
	NSLog(@"NSDocument_updateChangeCount");
	[THIS updateChangeCount:change];
}

BOOL NSDocument_canCloseDocument (NSDocument* THIS) {
	NSLog(@"NSDocument_canCloseDocument");
	return [THIS canCloseDocument];
}

void NSDocument_canCloseDocumentWithDelegate_shouldCloseSelector_contextInfo (NSDocument* THIS, id delegate, SEL shouldCloseSelector, void * contextInfo) {
	NSLog(@"NSDocument_canCloseDocumentWithDelegate_shouldCloseSelector_contextInfo");
	[THIS canCloseDocumentWithDelegate:delegate shouldCloseSelector:shouldCloseSelector contextInfo:contextInfo];
}

void NSDocument_close (NSDocument* THIS) {
	NSLog(@"NSDocument_close");
	[THIS close];
}

NSUndoManager * NSDocument_undoManager (NSDocument* THIS) {
	NSLog(@"NSDocument_undoManager");
	return [THIS undoManager];
}

void NSDocument_setUndoManager (NSDocument* THIS, NSUndoManager * undoManager) {
	NSLog(@"NSDocument_setUndoManager");
	[THIS setUndoManager:undoManager];
}

BOOL NSDocument_hasUndoManager (NSDocument* THIS) {
	NSLog(@"NSDocument_hasUndoManager");
	return [THIS hasUndoManager];
}

void NSDocument_setHasUndoManager (NSDocument* THIS, BOOL flag) {
	NSLog(@"NSDocument_setHasUndoManager");
	[THIS setHasUndoManager:flag];
}

NSString * NSDocument_fileName (NSDocument* THIS) {
	NSLog(@"NSDocument_fileName");
	return [THIS fileName];
}

void NSDocument_setFileName (NSDocument* THIS, NSString * fileName) {
	NSLog(@"NSDocument_setFileName");
	[THIS setFileName:fileName];
}

NSString * NSDocument_fileType (NSDocument* THIS) {
	NSLog(@"NSDocument_fileType");
	return [THIS fileType];
}

void NSDocument_setFileType (NSDocument* THIS, NSString * type) {
	NSLog(@"NSDocument_setFileType");
	[THIS setFileType:type];
}

NSString * NSDocument_displayName (NSDocument* THIS) {
	NSLog(@"NSDocument_displayName");
	return [THIS displayName];
}

NSData * NSDocument_dataRepresentationOfType (NSDocument* THIS, NSString * type) {
	NSLog(@"NSDocument_dataRepresentationOfType");
	return [THIS dataRepresentationOfType:type];
}

BOOL NSDocument_loadDataRepresentation_ofType (NSDocument* THIS, NSData * data, NSString * type) {
	NSLog(@"NSDocument_loadDataRepresentation_ofType");
	return [THIS loadDataRepresentation:data ofType:type];
}

NSFileWrapper * NSDocument_fileWrapperRepresentationOfType (NSDocument* THIS, NSString * type) {
	NSLog(@"NSDocument_fileWrapperRepresentationOfType");
	return [THIS fileWrapperRepresentationOfType:type];
}

BOOL NSDocument_loadFileWrapperRepresentation_ofType (NSDocument* THIS, NSFileWrapper * wrapper, NSString * type) {
	NSLog(@"NSDocument_loadFileWrapperRepresentation_ofType");
	return [THIS loadFileWrapperRepresentation:wrapper ofType:type];
}

BOOL NSDocument_writeToFile_ofType (NSDocument* THIS, NSString * fileName, NSString * type) {
	NSLog(@"NSDocument_writeToFile_ofType");
	return [THIS writeToFile:fileName ofType:type];
}

BOOL NSDocument_writeToURL_ofType (NSDocument* THIS, NSURL * url, NSString * type) {
	NSLog(@"NSDocument_writeToURL_ofType");
	return [THIS writeToURL:url ofType:type];
}

BOOL NSDocument_readFromFile_ofType (NSDocument* THIS, NSString * fileName, NSString * type) {
	NSLog(@"NSDocument_readFromFile_ofType");
	return [THIS readFromFile:fileName ofType:type];
}

BOOL NSDocument_readFromURL_ofType (NSDocument* THIS, NSURL * url, NSString * type) {
	NSLog(@"NSDocument_readFromURL_ofType");
	return [THIS readFromURL:url ofType:type];
}

BOOL NSDocument_keepBackupFile (NSDocument* THIS) {
	NSLog(@"NSDocument_keepBackupFile");
	return [THIS keepBackupFile];
}

BOOL NSDocument_writeWithBackupToFile_ofType_saveOperation (NSDocument* THIS, NSString * fullDocumentPath, NSString * documentTypeName, NSSaveOperationType saveOperationType) {
	NSLog(@"NSDocument_writeWithBackupToFile_ofType_saveOperation");
	return [THIS writeWithBackupToFile:fullDocumentPath ofType:documentTypeName saveOperation:saveOperationType];
}

BOOL NSDocument_writeToFile_ofType_originalFile_saveOperation (NSDocument* THIS, NSString * fullDocumentPath, NSString * documentTypeName, NSString * fullOriginalDocumentPath, NSSaveOperationType saveOperationType) {
	NSLog(@"NSDocument_writeToFile_ofType_originalFile_saveOperation");
	return [THIS writeToFile:fullDocumentPath ofType:documentTypeName originalFile:fullOriginalDocumentPath saveOperation:saveOperationType];
}

NSDictionary * NSDocument_fileAttributesToWriteToFile_ofType_saveOperation (NSDocument* THIS, NSString * fullDocumentPath, NSString * documentTypeName, NSSaveOperationType saveOperationType) {
	NSLog(@"NSDocument_fileAttributesToWriteToFile_ofType_saveOperation");
	return [THIS fileAttributesToWriteToFile:fullDocumentPath ofType:documentTypeName saveOperation:saveOperationType];
}

BOOL NSDocument_revertToSavedFromFile_ofType (NSDocument* THIS, NSString * fileName, NSString * type) {
	NSLog(@"NSDocument_revertToSavedFromFile_ofType");
	return [THIS revertToSavedFromFile:fileName ofType:type];
}

BOOL NSDocument_revertToSavedFromURL_ofType (NSDocument* THIS, NSURL * url, NSString * type) {
	NSLog(@"NSDocument_revertToSavedFromURL_ofType");
	return [THIS revertToSavedFromURL:url ofType:type];
}

IBAction NSDocument_saveDocument (NSDocument* THIS, id sender) {
	NSLog(@"NSDocument_saveDocument");
	return [THIS saveDocument:sender];
}

IBAction NSDocument_saveDocumentAs (NSDocument* THIS, id sender) {
	NSLog(@"NSDocument_saveDocumentAs");
	return [THIS saveDocumentAs:sender];
}

IBAction NSDocument_saveDocumentTo (NSDocument* THIS, id sender) {
	NSLog(@"NSDocument_saveDocumentTo");
	return [THIS saveDocumentTo:sender];
}

IBAction NSDocument_revertDocumentToSaved (NSDocument* THIS, id sender) {
	NSLog(@"NSDocument_revertDocumentToSaved");
	return [THIS revertDocumentToSaved:sender];
}

NSString * NSDocument_fileNameFromRunningSavePanelForSaveOperation (NSDocument* THIS, NSSaveOperationType saveOperation) {
	NSLog(@"NSDocument_fileNameFromRunningSavePanelForSaveOperation");
	return [THIS fileNameFromRunningSavePanelForSaveOperation:saveOperation];
}

void NSDocument_saveDocumentWithDelegate_didSaveSelector_contextInfo (NSDocument* THIS, id delegate, SEL didSaveSelector, void * contextInfo) {
	NSLog(@"NSDocument_saveDocumentWithDelegate_didSaveSelector_contextInfo");
	[THIS saveDocumentWithDelegate:delegate didSaveSelector:didSaveSelector contextInfo:contextInfo];
}

void NSDocument_saveToFile_saveOperation_delegate_didSaveSelector_contextInfo (NSDocument* THIS, NSString * fileName, NSSaveOperationType saveOperation, id delegate, SEL didSaveSelector, void * contextInfo) {
	NSLog(@"NSDocument_saveToFile_saveOperation_delegate_didSaveSelector_contextInfo");
	[THIS saveToFile:fileName saveOperation:saveOperation delegate:delegate didSaveSelector:didSaveSelector contextInfo:contextInfo];
}

NSString * NSDocument_fileTypeFromLastRunSavePanel (NSDocument* THIS) {
	NSLog(@"NSDocument_fileTypeFromLastRunSavePanel");
	return [THIS fileTypeFromLastRunSavePanel];
}

BOOL NSDocument_fileNameExtensionWasHiddenInLastRunSavePanel (NSDocument* THIS) {
	NSLog(@"NSDocument_fileNameExtensionWasHiddenInLastRunSavePanel");
	return [THIS fileNameExtensionWasHiddenInLastRunSavePanel];
}

BOOL NSDocument_shouldRunSavePanelWithAccessoryView (NSDocument* THIS) {
	NSLog(@"NSDocument_shouldRunSavePanelWithAccessoryView");
	return [THIS shouldRunSavePanelWithAccessoryView];
}

int NSDocument_runModalSavePanel_withAccessoryView (NSDocument* THIS, NSSavePanel * savePanel, NSView * accessoryView) {
	NSLog(@"NSDocument_runModalSavePanel_withAccessoryView");
	return [THIS runModalSavePanel:savePanel withAccessoryView:accessoryView];
}

void NSDocument_runModalSavePanelForSaveOperation_delegate_didSaveSelector_contextInfo (NSDocument* THIS, NSSaveOperationType saveOperation, id delegate, SEL didSaveSelector, void * contextInfo) {
	NSLog(@"NSDocument_runModalSavePanelForSaveOperation_delegate_didSaveSelector_contextInfo");
	[THIS runModalSavePanelForSaveOperation:saveOperation delegate:delegate didSaveSelector:didSaveSelector contextInfo:contextInfo];
}

BOOL NSDocument_prepareSavePanel (NSDocument* THIS, NSSavePanel * savePanel) {
	NSLog(@"NSDocument_prepareSavePanel");
	return [THIS prepareSavePanel:savePanel];
}

NSPrintInfo * NSDocument_printInfo (NSDocument* THIS) {
	NSLog(@"NSDocument_printInfo");
	return [THIS printInfo];
}

void NSDocument_setPrintInfo (NSDocument* THIS, NSPrintInfo * printInfo) {
	NSLog(@"NSDocument_setPrintInfo");
	[THIS setPrintInfo:printInfo];
}

int NSDocument_runModalPageLayoutWithPrintInfo (NSDocument* THIS, NSPrintInfo * printInfo) {
	NSLog(@"NSDocument_runModalPageLayoutWithPrintInfo");
	return [THIS runModalPageLayoutWithPrintInfo:printInfo];
}

void NSDocument_runModalPageLayoutWithPrintInfo_delegate_didRunSelector_contextInfo (NSDocument* THIS, NSPrintInfo * printInfo, id delegate, SEL didRunSelector, void * contextInfo) {
	NSLog(@"NSDocument_runModalPageLayoutWithPrintInfo_delegate_didRunSelector_contextInfo");
	[THIS runModalPageLayoutWithPrintInfo:printInfo delegate:delegate didRunSelector:didRunSelector contextInfo:contextInfo];
}

BOOL NSDocument_shouldChangePrintInfo (NSDocument* THIS, NSPrintInfo * newPrintInfo) {
	NSLog(@"NSDocument_shouldChangePrintInfo");
	return [THIS shouldChangePrintInfo:newPrintInfo];
}

IBAction NSDocument_runPageLayout (NSDocument* THIS, id sender) {
	NSLog(@"NSDocument_runPageLayout");
	return [THIS runPageLayout:sender];
}

BOOL NSDocument_preparePageLayout (NSDocument* THIS, NSPageLayout * pageLayout) {
	NSLog(@"NSDocument_preparePageLayout");
	return [THIS preparePageLayout:pageLayout];
}

void NSDocument_runModalPrintOperation_delegate_didRunSelector_contextInfo (NSDocument* THIS, NSPrintOperation * printOperation, id delegate, SEL didRunSelector, void * contextInfo) {
	NSLog(@"NSDocument_runModalPrintOperation_delegate_didRunSelector_contextInfo");
	[THIS runModalPrintOperation:printOperation delegate:delegate didRunSelector:didRunSelector contextInfo:contextInfo];
}

void NSDocument_printShowingPrintPanel (NSDocument* THIS, BOOL flag) {
	NSLog(@"NSDocument_printShowingPrintPanel");
	[THIS printShowingPrintPanel:flag];
}

IBAction NSDocument_printDocument (NSDocument* THIS, id sender) {
	NSLog(@"NSDocument_printDocument");
	return [THIS printDocument:sender];
}

/* UNSUPPORTED: 
- (BOOL)validateUserInterfaceItem:(id <NSValidatedUserInterfaceItem>)anItem;
 */



BOOL NSDocument_validateMenuItem (NSDocument* THIS, NSMenuItem * anItem) {
	NSLog(@"NSDocument_validateMenuItem");
	return [THIS validateMenuItem:anItem];
}

NSArray * NSDocument$_readableTypes () {
	NSLog(@"NSDocument$_readableTypes");
	return [NSDocument readableTypes];
}

NSArray * NSDocument$_writableTypes () {
	NSLog(@"NSDocument$_writableTypes");
	return [NSDocument writableTypes];
}

BOOL NSDocument$_isNativeType (NSString * type) {
	NSLog(@"NSDocument$_isNativeType");
	return [NSDocument isNativeType:type];
}

NSDocument * NSDocument_alloc(){
	NSLog(@"NSDocument_alloc()");
	return [ NSDocument alloc ];
}