/* Generated by genstubs.pl
 * (c) 2004 kangaroo, C.J. and Urs
 */

#include <Cocoa/Cocoa.h>

#include <AppKit/NSPanel.h>
#include <AppKit/NSApplication.h>

NSColorPanel * NSColorPanel$_sharedColorPanel () {
	NSLog(@"NSColorPanel$_sharedColorPanel");
	return [NSColorPanel sharedColorPanel];
}

BOOL NSColorPanel$_sharedColorPanelExists () {
	NSLog(@"NSColorPanel$_sharedColorPanelExists");
	return [NSColorPanel sharedColorPanelExists];
}

BOOL NSColorPanel$_dragColor_withEvent_fromView (NSColor * color, NSEvent * theEvent, NSView * sourceView) {
	NSLog(@"NSColorPanel$_dragColor_withEvent_fromView");
	return [NSColorPanel dragColor:color withEvent:theEvent fromView:sourceView];
}

void NSColorPanel$_setPickerMask (int mask) {
	NSLog(@"NSColorPanel$_setPickerMask");
	[NSColorPanel setPickerMask:mask];
}

void NSColorPanel$_setPickerMode (int mode) {
	NSLog(@"NSColorPanel$_setPickerMode");
	[NSColorPanel setPickerMode:mode];
}

void NSColorPanel_setAccessoryView (NSColorPanel* THIS, NSView * aView) {
	NSLog(@"NSColorPanel_setAccessoryView");
	[THIS setAccessoryView:aView];
}

NSView * NSColorPanel_accessoryView (NSColorPanel* THIS) {
	NSLog(@"NSColorPanel_accessoryView");
	return [THIS accessoryView];
}

void NSColorPanel_setContinuous (NSColorPanel* THIS, BOOL flag) {
	NSLog(@"NSColorPanel_setContinuous");
	[THIS setContinuous:flag];
}

BOOL NSColorPanel_isContinuous (NSColorPanel* THIS) {
	NSLog(@"NSColorPanel_isContinuous");
	return [THIS isContinuous];
}

void NSColorPanel_setShowsAlpha (NSColorPanel* THIS, BOOL flag) {
	NSLog(@"NSColorPanel_setShowsAlpha");
	[THIS setShowsAlpha:flag];
}

BOOL NSColorPanel_showsAlpha (NSColorPanel* THIS) {
	NSLog(@"NSColorPanel_showsAlpha");
	return [THIS showsAlpha];
}

void NSColorPanel_setMode (NSColorPanel* THIS, int mode) {
	NSLog(@"NSColorPanel_setMode");
	[THIS setMode:mode];
}

int NSColorPanel_mode (NSColorPanel* THIS) {
	NSLog(@"NSColorPanel_mode");
	return [THIS mode];
}

void NSColorPanel_setColor (NSColorPanel* THIS, NSColor * color) {
	NSLog(@"NSColorPanel_setColor");
	[THIS setColor:color];
}

NSColor * NSColorPanel_color (NSColorPanel* THIS) {
	NSLog(@"NSColorPanel_color");
	return [THIS color];
}

float NSColorPanel_alpha (NSColorPanel* THIS) {
	NSLog(@"NSColorPanel_alpha");
	return [THIS alpha];
}

void NSColorPanel_setAction (NSColorPanel* THIS, SEL aSelector) {
	NSLog(@"NSColorPanel_setAction");
	[THIS setAction:aSelector];
}

void NSColorPanel_setTarget (NSColorPanel* THIS, id anObject) {
	NSLog(@"NSColorPanel_setTarget");
	[THIS setTarget:anObject];
}

void NSColorPanel_attachColorList (NSColorPanel* THIS, NSColorList * colorList) {
	NSLog(@"NSColorPanel_attachColorList");
	[THIS attachColorList:colorList];
}

void NSColorPanel_detachColorList (NSColorPanel* THIS, NSColorList * colorList) {
	NSLog(@"NSColorPanel_detachColorList");
	[THIS detachColorList:colorList];
}

void NSColorPanel_orderFrontColorPanel (NSColorPanel* THIS, id sender) {
	NSLog(@"NSColorPanel_orderFrontColorPanel");
	[THIS orderFrontColorPanel:sender];
}

void NSColorPanel_changeColor (NSColorPanel* THIS, id sender) {
	NSLog(@"NSColorPanel_changeColor");
	[THIS changeColor:sender];
}

NSColorPanel * NSColorPanel_alloc(){
	NSLog(@"NSColorPanel_alloc()");
	return [ NSColorPanel alloc ];
}