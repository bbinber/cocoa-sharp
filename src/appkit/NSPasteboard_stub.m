/* Generated by genstubs.pl
 * (c) 2004 kangaroo, C.J. and Urs
 */

#include <Cocoa/Cocoa.h>

#include <Foundation/NSObject.h>
#include <Foundation/NSURL.h>
#include <AppKit/AppKitDefines.h>

NSPasteboard * NSPasteboard$_generalPasteboard () {
	NSLog(@"NSPasteboard$_generalPasteboard");
	return [NSPasteboard generalPasteboard];
}

NSPasteboard * NSPasteboard$_pasteboardWithName (NSString * name) {
	NSLog(@"NSPasteboard$_pasteboardWithName");
	return [NSPasteboard pasteboardWithName:name];
}

NSPasteboard * NSPasteboard$_pasteboardWithUniqueName () {
	NSLog(@"NSPasteboard$_pasteboardWithUniqueName");
	return [NSPasteboard pasteboardWithUniqueName];
}

NSArray * NSPasteboard$_typesFilterableTo (NSString * type) {
	NSLog(@"NSPasteboard$_typesFilterableTo");
	return [NSPasteboard typesFilterableTo:type];
}

NSPasteboard * NSPasteboard$_pasteboardByFilteringFile (NSString * filename) {
	NSLog(@"NSPasteboard$_pasteboardByFilteringFile");
	return [NSPasteboard pasteboardByFilteringFile:filename];
}

NSPasteboard * NSPasteboard$_pasteboardByFilteringData_ofType (NSData * data, NSString * type) {
	NSLog(@"NSPasteboard$_pasteboardByFilteringData_ofType");
	return [NSPasteboard pasteboardByFilteringData:data ofType:type];
}

NSPasteboard * NSPasteboard$_pasteboardByFilteringTypesInPasteboard (NSPasteboard * pboard) {
	NSLog(@"NSPasteboard$_pasteboardByFilteringTypesInPasteboard");
	return [NSPasteboard pasteboardByFilteringTypesInPasteboard:pboard];
}

NSString * NSPasteboard_name (NSPasteboard* THIS) {
	NSLog(@"NSPasteboard_name");
	return [THIS name];
}

void NSPasteboard_releaseGlobally (NSPasteboard* THIS) {
	NSLog(@"NSPasteboard_releaseGlobally");
	[THIS releaseGlobally];
}

int NSPasteboard_declareTypes_owner (NSPasteboard* THIS, NSArray * newTypes, id newOwner) {
	NSLog(@"NSPasteboard_declareTypes_owner");
	return [THIS declareTypes:newTypes owner:newOwner];
}

int NSPasteboard_addTypes_owner (NSPasteboard* THIS, NSArray * newTypes, id newOwner) {
	NSLog(@"NSPasteboard_addTypes_owner");
	return [THIS addTypes:newTypes owner:newOwner];
}

int NSPasteboard_changeCount (NSPasteboard* THIS) {
	NSLog(@"NSPasteboard_changeCount");
	return [THIS changeCount];
}

NSArray * NSPasteboard_types (NSPasteboard* THIS) {
	NSLog(@"NSPasteboard_types");
	return [THIS types];
}

NSString * NSPasteboard_availableTypeFromArray (NSPasteboard* THIS, NSArray * types) {
	NSLog(@"NSPasteboard_availableTypeFromArray");
	return [THIS availableTypeFromArray:types];
}

BOOL NSPasteboard_setData_forType (NSPasteboard* THIS, NSData * data, NSString * dataType) {
	NSLog(@"NSPasteboard_setData_forType");
	return [THIS setData:data forType:dataType];
}

NSData * NSPasteboard_dataForType (NSPasteboard* THIS, NSString * dataType) {
	NSLog(@"NSPasteboard_dataForType");
	return [THIS dataForType:dataType];
}

BOOL NSPasteboard_setPropertyList_forType (NSPasteboard* THIS, id plist, NSString * dataType) {
	NSLog(@"NSPasteboard_setPropertyList_forType");
	return [THIS setPropertyList:plist forType:dataType];
}

NSPasteboard * NSPasteboard_propertyListForType (NSPasteboard* THIS, NSString * dataType) {
	NSLog(@"NSPasteboard_propertyListForType");
	return [THIS propertyListForType:dataType];
}

BOOL NSPasteboard_setString_forType (NSPasteboard* THIS, NSString * string, NSString * dataType) {
	NSLog(@"NSPasteboard_setString_forType");
	return [THIS setString:string forType:dataType];
}

NSString * NSPasteboard_stringForType (NSPasteboard* THIS, NSString * dataType) {
	NSLog(@"NSPasteboard_stringForType");
	return [THIS stringForType:dataType];
}

BOOL NSPasteboard_writeFileContents (NSPasteboard* THIS, NSString * filename) {
	NSLog(@"NSPasteboard_writeFileContents");
	return [THIS writeFileContents:filename];
}

NSString * NSPasteboard_readFileContentsType_toFile (NSPasteboard* THIS, NSString * type, NSString * filename) {
	NSLog(@"NSPasteboard_readFileContentsType_toFile");
	return [THIS readFileContentsType:type toFile:filename];
}

BOOL NSPasteboard_writeFileWrapper (NSPasteboard* THIS, NSFileWrapper * wrapper) {
	NSLog(@"NSPasteboard_writeFileWrapper");
	return [THIS writeFileWrapper:wrapper];
}

NSFileWrapper * NSPasteboard_readFileWrapper (NSPasteboard* THIS) {
	NSLog(@"NSPasteboard_readFileWrapper");
	return [THIS readFileWrapper];
}

NSURL * NSPasteboard$_URLFromPasteboard (NSPasteboard * pasteBoard) {
	NSLog(@"NSPasteboard$_URLFromPasteboard");
	return [NSPasteboard URLFromPasteboard:pasteBoard];
}

void NSPasteboard_writeToPasteboard (NSPasteboard* THIS, NSPasteboard * pasteBoard) {
	NSLog(@"NSPasteboard_writeToPasteboard");
	[THIS writeToPasteboard:pasteBoard];
}

void NSPasteboard_pasteboard_provideDataForType (NSPasteboard* THIS, NSPasteboard * sender, NSString * type) {
	NSLog(@"NSPasteboard_pasteboard_provideDataForType");
	[THIS pasteboard:sender provideDataForType:type];
}

void NSPasteboard_pasteboardChangedOwner (NSPasteboard* THIS, NSPasteboard * sender) {
	NSLog(@"NSPasteboard_pasteboardChangedOwner");
	[THIS pasteboardChangedOwner:sender];
}

NSPasteboard * NSPasteboard_alloc(){
	NSLog(@"NSPasteboard_alloc()");
	return [ NSPasteboard alloc ];
}