/* Generated by genstubs.pl
 * (c) 2004 kangaroo, C.J. and Urs
 */

#include <Cocoa/Cocoa.h>

#include <AppKit/NSResponder.h>
#include <Foundation/NSGeometry.h>
#include <Foundation/NSRange.h>
#include <AppKit/AppKitDefines.h>
#include <AppKit/NSGraphics.h>

NSView * NSView_initWithFrame (NSView* THIS, NSRect frameRect) {
	NSLog(@"NSView_initWithFrame");
	return [THIS initWithFrame:frameRect];
}

NSWindow * NSView_window (NSView* THIS) {
	NSLog(@"NSView_window");
	return [THIS window];
}

NSView * NSView_superview (NSView* THIS) {
	NSLog(@"NSView_superview");
	return [THIS superview];
}

NSArray * NSView_subviews (NSView* THIS) {
	NSLog(@"NSView_subviews");
	return [THIS subviews];
}

BOOL NSView_isDescendantOf (NSView* THIS, NSView * aView) {
	NSLog(@"NSView_isDescendantOf");
	return [THIS isDescendantOf:aView];
}

NSView * NSView_ancestorSharedWithView (NSView* THIS, NSView * aView) {
	NSLog(@"NSView_ancestorSharedWithView");
	return [THIS ancestorSharedWithView:aView];
}

NSView * NSView_opaqueAncestor (NSView* THIS) {
	NSLog(@"NSView_opaqueAncestor");
	return [THIS opaqueAncestor];
}

void NSView_setHidden (NSView* THIS, BOOL flag) {
	NSLog(@"NSView_setHidden");
	[THIS setHidden:flag];
}

BOOL NSView_isHidden (NSView* THIS) {
	NSLog(@"NSView_isHidden");
	return [THIS isHidden];
}

BOOL NSView_isHiddenOrHasHiddenAncestor (NSView* THIS) {
	NSLog(@"NSView_isHiddenOrHasHiddenAncestor");
	return [THIS isHiddenOrHasHiddenAncestor];
}

void NSView_getRectsBeingDrawn_count (NSView* THIS, const NSRect ** rects, int * count) {
	NSLog(@"NSView_getRectsBeingDrawn_count");
	[THIS getRectsBeingDrawn:rects count:count];
}

BOOL NSView_needsToDrawRect (NSView* THIS, NSRect aRect) {
	NSLog(@"NSView_needsToDrawRect");
	return [THIS needsToDrawRect:aRect];
}

BOOL NSView_wantsDefaultClipping (NSView* THIS) {
	NSLog(@"NSView_wantsDefaultClipping");
	return [THIS wantsDefaultClipping];
}

void NSView_addSubview (NSView* THIS, NSView * aView) {
	NSLog(@"NSView_addSubview");
	[THIS addSubview:aView];
}

void NSView_addSubview_positioned_relativeTo (NSView* THIS, NSView * aView, NSWindowOrderingMode place, NSView * otherView) {
	NSLog(@"NSView_addSubview_positioned_relativeTo");
	[THIS addSubview:aView positioned:place relativeTo:otherView];
}

void NSView_context (NSView* THIS, void * context) {
	NSLog(@"NSView_context");
	[THIS context:context];
}

void NSView_viewWillMoveToWindow (NSView* THIS, NSWindow * newWindow) {
	NSLog(@"NSView_viewWillMoveToWindow");
	[THIS viewWillMoveToWindow:newWindow];
}

void NSView_viewDidMoveToWindow (NSView* THIS) {
	NSLog(@"NSView_viewDidMoveToWindow");
	[THIS viewDidMoveToWindow];
}

void NSView_viewWillMoveToSuperview (NSView* THIS, NSView * newSuperview) {
	NSLog(@"NSView_viewWillMoveToSuperview");
	[THIS viewWillMoveToSuperview:newSuperview];
}

void NSView_viewDidMoveToSuperview (NSView* THIS) {
	NSLog(@"NSView_viewDidMoveToSuperview");
	[THIS viewDidMoveToSuperview];
}

void NSView_didAddSubview (NSView* THIS, NSView * subview) {
	NSLog(@"NSView_didAddSubview");
	[THIS didAddSubview:subview];
}

void NSView_willRemoveSubview (NSView* THIS, NSView * subview) {
	NSLog(@"NSView_willRemoveSubview");
	[THIS willRemoveSubview:subview];
}

void NSView_removeFromSuperview (NSView* THIS) {
	NSLog(@"NSView_removeFromSuperview");
	[THIS removeFromSuperview];
}

void NSView_replaceSubview_with (NSView* THIS, NSView * oldView, NSView * newView) {
	NSLog(@"NSView_replaceSubview_with");
	[THIS replaceSubview:oldView with:newView];
}

void NSView_removeFromSuperviewWithoutNeedingDisplay (NSView* THIS) {
	NSLog(@"NSView_removeFromSuperviewWithoutNeedingDisplay");
	[THIS removeFromSuperviewWithoutNeedingDisplay];
}

void NSView_setPostsFrameChangedNotifications (NSView* THIS, BOOL flag) {
	NSLog(@"NSView_setPostsFrameChangedNotifications");
	[THIS setPostsFrameChangedNotifications:flag];
}

BOOL NSView_postsFrameChangedNotifications (NSView* THIS) {
	NSLog(@"NSView_postsFrameChangedNotifications");
	return [THIS postsFrameChangedNotifications];
}

void NSView_resizeSubviewsWithOldSize (NSView* THIS, NSSize oldSize) {
	NSLog(@"NSView_resizeSubviewsWithOldSize");
	[THIS resizeSubviewsWithOldSize:oldSize];
}

void NSView_resizeWithOldSuperviewSize (NSView* THIS, NSSize oldSize) {
	NSLog(@"NSView_resizeWithOldSuperviewSize");
	[THIS resizeWithOldSuperviewSize:oldSize];
}

void NSView_setAutoresizesSubviews (NSView* THIS, BOOL flag) {
	NSLog(@"NSView_setAutoresizesSubviews");
	[THIS setAutoresizesSubviews:flag];
}

BOOL NSView_autoresizesSubviews (NSView* THIS) {
	NSLog(@"NSView_autoresizesSubviews");
	return [THIS autoresizesSubviews];
}

void NSView_setAutoresizingMask (NSView* THIS, unsigned int mask) {
	NSLog(@"NSView_setAutoresizingMask");
	[THIS setAutoresizingMask:mask];
}

unsigned int NSView_autoresizingMask (NSView* THIS) {
	NSLog(@"NSView_autoresizingMask");
	return [THIS autoresizingMask];
}

void NSView_setFrameOrigin (NSView* THIS, NSPoint newOrigin) {
	NSLog(@"NSView_setFrameOrigin");
	[THIS setFrameOrigin:newOrigin];
}

void NSView_setFrameSize (NSView* THIS, NSSize newSize) {
	NSLog(@"NSView_setFrameSize");
	[THIS setFrameSize:newSize];
}

void NSView_setFrame (NSView* THIS, NSRect frameRect) {
	NSLog(@"NSView_setFrame");
	[THIS setFrame:frameRect];
}

NSRect NSView_frame (NSView* THIS) {
	NSLog(@"NSView_frame");
	return [THIS frame];
}

void NSView_setFrameRotation (NSView* THIS, float angle) {
	NSLog(@"NSView_setFrameRotation");
	[THIS setFrameRotation:angle];
}

float NSView_frameRotation (NSView* THIS) {
	NSLog(@"NSView_frameRotation");
	return [THIS frameRotation];
}

void NSView_setBoundsOrigin (NSView* THIS, NSPoint newOrigin) {
	NSLog(@"NSView_setBoundsOrigin");
	[THIS setBoundsOrigin:newOrigin];
}

void NSView_setBoundsSize (NSView* THIS, NSSize newSize) {
	NSLog(@"NSView_setBoundsSize");
	[THIS setBoundsSize:newSize];
}

void NSView_setBoundsRotation (NSView* THIS, float angle) {
	NSLog(@"NSView_setBoundsRotation");
	[THIS setBoundsRotation:angle];
}

float NSView_boundsRotation (NSView* THIS) {
	NSLog(@"NSView_boundsRotation");
	return [THIS boundsRotation];
}

void NSView_translateOriginToPoint (NSView* THIS, NSPoint translation) {
	NSLog(@"NSView_translateOriginToPoint");
	[THIS translateOriginToPoint:translation];
}

void NSView_scaleUnitSquareToSize (NSView* THIS, NSSize newUnitSize) {
	NSLog(@"NSView_scaleUnitSquareToSize");
	[THIS scaleUnitSquareToSize:newUnitSize];
}

void NSView_rotateByAngle (NSView* THIS, float angle) {
	NSLog(@"NSView_rotateByAngle");
	[THIS rotateByAngle:angle];
}

void NSView_setBounds (NSView* THIS, NSRect aRect) {
	NSLog(@"NSView_setBounds");
	[THIS setBounds:aRect];
}

NSRect NSView_bounds (NSView* THIS) {
	NSLog(@"NSView_bounds");
	return [THIS bounds];
}

BOOL NSView_isFlipped (NSView* THIS) {
	NSLog(@"NSView_isFlipped");
	return [THIS isFlipped];
}

BOOL NSView_isRotatedFromBase (NSView* THIS) {
	NSLog(@"NSView_isRotatedFromBase");
	return [THIS isRotatedFromBase];
}

BOOL NSView_isRotatedOrScaledFromBase (NSView* THIS) {
	NSLog(@"NSView_isRotatedOrScaledFromBase");
	return [THIS isRotatedOrScaledFromBase];
}

BOOL NSView_isOpaque (NSView* THIS) {
	NSLog(@"NSView_isOpaque");
	return [THIS isOpaque];
}

NSPoint NSView_convertPoint_fromView (NSView* THIS, NSPoint aPoint, NSView * aView) {
	NSLog(@"NSView_convertPoint_fromView");
	return [THIS convertPoint:aPoint fromView:aView];
}

NSPoint NSView_convertPoint_toView (NSView* THIS, NSPoint aPoint, NSView * aView) {
	NSLog(@"NSView_convertPoint_toView");
	return [THIS convertPoint:aPoint toView:aView];
}

NSSize NSView_convertSize_fromView (NSView* THIS, NSSize aSize, NSView * aView) {
	NSLog(@"NSView_convertSize_fromView");
	return [THIS convertSize:aSize fromView:aView];
}

NSSize NSView_convertSize_toView (NSView* THIS, NSSize aSize, NSView * aView) {
	NSLog(@"NSView_convertSize_toView");
	return [THIS convertSize:aSize toView:aView];
}

NSRect NSView_convertRect_fromView (NSView* THIS, NSRect aRect, NSView * aView) {
	NSLog(@"NSView_convertRect_fromView");
	return [THIS convertRect:aRect fromView:aView];
}

NSRect NSView_convertRect_toView (NSView* THIS, NSRect aRect, NSView * aView) {
	NSLog(@"NSView_convertRect_toView");
	return [THIS convertRect:aRect toView:aView];
}

NSRect NSView_centerScanRect (NSView* THIS, NSRect aRect) {
	NSLog(@"NSView_centerScanRect");
	return [THIS centerScanRect:aRect];
}

BOOL NSView_canDraw (NSView* THIS) {
	NSLog(@"NSView_canDraw");
	return [THIS canDraw];
}

void NSView_setNeedsDisplay (NSView* THIS, BOOL flag) {
	NSLog(@"NSView_setNeedsDisplay");
	[THIS setNeedsDisplay:flag];
}

void NSView_setNeedsDisplayInRect (NSView* THIS, NSRect invalidRect) {
	NSLog(@"NSView_setNeedsDisplayInRect");
	[THIS setNeedsDisplayInRect:invalidRect];
}

BOOL NSView_needsDisplay (NSView* THIS) {
	NSLog(@"NSView_needsDisplay");
	return [THIS needsDisplay];
}

void NSView_lockFocus (NSView* THIS) {
	NSLog(@"NSView_lockFocus");
	[THIS lockFocus];
}

void NSView_unlockFocus (NSView* THIS) {
	NSLog(@"NSView_unlockFocus");
	[THIS unlockFocus];
}

BOOL NSView_lockFocusIfCanDraw (NSView* THIS) {
	NSLog(@"NSView_lockFocusIfCanDraw");
	return [THIS lockFocusIfCanDraw];
}

NSView * NSView$_focusView () {
	NSLog(@"NSView$_focusView");
	return [NSView focusView];
}

NSRect NSView_visibleRect (NSView* THIS) {
	NSLog(@"NSView_visibleRect");
	return [THIS visibleRect];
}

void NSView_display (NSView* THIS) {
	NSLog(@"NSView_display");
	[THIS display];
}

void NSView_displayIfNeeded (NSView* THIS) {
	NSLog(@"NSView_displayIfNeeded");
	[THIS displayIfNeeded];
}

void NSView_displayIfNeededIgnoringOpacity (NSView* THIS) {
	NSLog(@"NSView_displayIfNeededIgnoringOpacity");
	[THIS displayIfNeededIgnoringOpacity];
}

void NSView_displayRect (NSView* THIS, NSRect rect) {
	NSLog(@"NSView_displayRect");
	[THIS displayRect:rect];
}

void NSView_displayIfNeededInRect (NSView* THIS, NSRect rect) {
	NSLog(@"NSView_displayIfNeededInRect");
	[THIS displayIfNeededInRect:rect];
}

void NSView_displayRectIgnoringOpacity (NSView* THIS, NSRect rect) {
	NSLog(@"NSView_displayRectIgnoringOpacity");
	[THIS displayRectIgnoringOpacity:rect];
}

void NSView_displayIfNeededInRectIgnoringOpacity (NSView* THIS, NSRect rect) {
	NSLog(@"NSView_displayIfNeededInRectIgnoringOpacity");
	[THIS displayIfNeededInRectIgnoringOpacity:rect];
}

void NSView_drawRect (NSView* THIS, NSRect rect) {
	NSLog(@"NSView_drawRect");
	[THIS drawRect:rect];
}

int NSView_gState (NSView* THIS) {
	NSLog(@"NSView_gState");
	return [THIS gState];
}

void NSView_allocateGState (NSView* THIS) {
	NSLog(@"NSView_allocateGState");
	[THIS allocateGState];
}

void NSView_releaseGState (NSView* THIS) {
	NSLog(@"NSView_releaseGState");
	[THIS releaseGState];
}

void NSView_setUpGState (NSView* THIS) {
	NSLog(@"NSView_setUpGState");
	[THIS setUpGState];
}

void NSView_renewGState (NSView* THIS) {
	NSLog(@"NSView_renewGState");
	[THIS renewGState];
}

void NSView_scrollPoint (NSView* THIS, NSPoint aPoint) {
	NSLog(@"NSView_scrollPoint");
	[THIS scrollPoint:aPoint];
}

BOOL NSView_scrollRectToVisible (NSView* THIS, NSRect aRect) {
	NSLog(@"NSView_scrollRectToVisible");
	return [THIS scrollRectToVisible:aRect];
}

BOOL NSView_autoscroll (NSView* THIS, NSEvent * theEvent) {
	NSLog(@"NSView_autoscroll");
	return [THIS autoscroll:theEvent];
}

NSRect NSView_adjustScroll (NSView* THIS, NSRect newVisible) {
	NSLog(@"NSView_adjustScroll");
	return [THIS adjustScroll:newVisible];
}

void NSView_scrollRect_by (NSView* THIS, NSRect aRect, NSSize delta) {
	NSLog(@"NSView_scrollRect_by");
	[THIS scrollRect:aRect by:delta];
}

NSView * NSView_hitTest (NSView* THIS, NSPoint aPoint) {
	NSLog(@"NSView_hitTest");
	return [THIS hitTest:aPoint];
}

BOOL NSView_mouse_inRect (NSView* THIS, NSPoint aPoint, NSRect aRect) {
	NSLog(@"NSView_mouse_inRect");
	return [THIS mouse:aPoint inRect:aRect];
}

NSView * NSView_viewWithTag (NSView* THIS, int aTag) {
	NSLog(@"NSView_viewWithTag");
	return [THIS viewWithTag:aTag];
}

int NSView_tag (NSView* THIS) {
	NSLog(@"NSView_tag");
	return [THIS tag];
}

BOOL NSView_performKeyEquivalent (NSView* THIS, NSEvent * theEvent) {
	NSLog(@"NSView_performKeyEquivalent");
	return [THIS performKeyEquivalent:theEvent];
}

BOOL NSView_acceptsFirstMouse (NSView* THIS, NSEvent * theEvent) {
	NSLog(@"NSView_acceptsFirstMouse");
	return [THIS acceptsFirstMouse:theEvent];
}

BOOL NSView_shouldDelayWindowOrderingForEvent (NSView* THIS, NSEvent * theEvent) {
	NSLog(@"NSView_shouldDelayWindowOrderingForEvent");
	return [THIS shouldDelayWindowOrderingForEvent:theEvent];
}

BOOL NSView_needsPanelToBecomeKey (NSView* THIS) {
	NSLog(@"NSView_needsPanelToBecomeKey");
	return [THIS needsPanelToBecomeKey];
}

BOOL NSView_mouseDownCanMoveWindow (NSView* THIS) {
	NSLog(@"NSView_mouseDownCanMoveWindow");
	return [THIS mouseDownCanMoveWindow];
}

void NSView_addCursorRect_cursor (NSView* THIS, NSRect aRect, NSCursor * anObj) {
	NSLog(@"NSView_addCursorRect_cursor");
	[THIS addCursorRect:aRect cursor:anObj];
}

void NSView_removeCursorRect_cursor (NSView* THIS, NSRect aRect, NSCursor * anObj) {
	NSLog(@"NSView_removeCursorRect_cursor");
	[THIS removeCursorRect:aRect cursor:anObj];
}

void NSView_discardCursorRects (NSView* THIS) {
	NSLog(@"NSView_discardCursorRects");
	[THIS discardCursorRects];
}

void NSView_resetCursorRects (NSView* THIS) {
	NSLog(@"NSView_resetCursorRects");
	[THIS resetCursorRects];
}

NSTrackingRectTag NSView_addTrackingRect_owner_userData_assumeInside (NSView* THIS, NSRect aRect, id anObject, void * data, BOOL flag) {
	NSLog(@"NSView_addTrackingRect_owner_userData_assumeInside");
	return [THIS addTrackingRect:aRect owner:anObject userData:data assumeInside:flag];
}

void NSView_removeTrackingRect (NSView* THIS, NSTrackingRectTag tag) {
	NSLog(@"NSView_removeTrackingRect");
	[THIS removeTrackingRect:tag];
}

BOOL NSView_shouldDrawColor (NSView* THIS) {
	NSLog(@"NSView_shouldDrawColor");
	return [THIS shouldDrawColor];
}

void NSView_setPostsBoundsChangedNotifications (NSView* THIS, BOOL flag) {
	NSLog(@"NSView_setPostsBoundsChangedNotifications");
	[THIS setPostsBoundsChangedNotifications:flag];
}

BOOL NSView_postsBoundsChangedNotifications (NSView* THIS) {
	NSLog(@"NSView_postsBoundsChangedNotifications");
	return [THIS postsBoundsChangedNotifications];
}

NSScrollView * NSView_enclosingScrollView (NSView* THIS) {
	NSLog(@"NSView_enclosingScrollView");
	return [THIS enclosingScrollView];
}

NSMenu * NSView_menuForEvent (NSView* THIS, NSEvent * event) {
	NSLog(@"NSView_menuForEvent");
	return [THIS menuForEvent:event];
}

NSMenu * NSView$_defaultMenu () {
	NSLog(@"NSView$_defaultMenu");
	return [NSView defaultMenu];
}

void NSView_setToolTip (NSView* THIS, NSString * string) {
	NSLog(@"NSView_setToolTip");
	[THIS setToolTip:string];
}

NSString * NSView_toolTip (NSView* THIS) {
	NSLog(@"NSView_toolTip");
	return [THIS toolTip];
}

NSToolTipTag NSView_addToolTipRect_owner_userData (NSView* THIS, NSRect aRect, id anObject, void * data) {
	NSLog(@"NSView_addToolTipRect_owner_userData");
	return [THIS addToolTipRect:aRect owner:anObject userData:data];
}

void NSView_removeToolTip (NSView* THIS, NSToolTipTag tag) {
	NSLog(@"NSView_removeToolTip");
	[THIS removeToolTip:tag];
}

void NSView_removeAllToolTips (NSView* THIS) {
	NSLog(@"NSView_removeAllToolTips");
	[THIS removeAllToolTips];
}

void NSView_viewWillStartLiveResize (NSView* THIS) {
	NSLog(@"NSView_viewWillStartLiveResize");
	[THIS viewWillStartLiveResize];
}

void NSView_viewDidEndLiveResize (NSView* THIS) {
	NSLog(@"NSView_viewDidEndLiveResize");
	[THIS viewDidEndLiveResize];
}

BOOL NSView_inLiveResize (NSView* THIS) {
	NSLog(@"NSView_inLiveResize");
	return [THIS inLiveResize];
}

NSString * NSView_view_stringForToolTip_point_userData (NSView* THIS, NSView * view, NSToolTipTag tag, NSPoint point, void * data) {
	NSLog(@"NSView_view_stringForToolTip_point_userData");
	return [THIS view:view stringForToolTip:tag point:point userData:data];
}

BOOL NSView_performMnemonic (NSView* THIS, NSString * theString) {
	NSLog(@"NSView_performMnemonic");
	return [THIS performMnemonic:theString];
}

void NSView_setNextKeyView (NSView* THIS, NSView * next) {
	NSLog(@"NSView_setNextKeyView");
	[THIS setNextKeyView:next];
}

NSView * NSView_nextKeyView (NSView* THIS) {
	NSLog(@"NSView_nextKeyView");
	return [THIS nextKeyView];
}

NSView * NSView_previousKeyView (NSView* THIS) {
	NSLog(@"NSView_previousKeyView");
	return [THIS previousKeyView];
}

NSView * NSView_nextValidKeyView (NSView* THIS) {
	NSLog(@"NSView_nextValidKeyView");
	return [THIS nextValidKeyView];
}

NSView * NSView_previousValidKeyView (NSView* THIS) {
	NSLog(@"NSView_previousValidKeyView");
	return [THIS previousValidKeyView];
}

BOOL NSView_canBecomeKeyView (NSView* THIS) {
	NSLog(@"NSView_canBecomeKeyView");
	return [THIS canBecomeKeyView];
}

void NSView_setKeyboardFocusRingNeedsDisplayInRect (NSView* THIS, NSRect rect) {
	NSLog(@"NSView_setKeyboardFocusRingNeedsDisplayInRect");
	[THIS setKeyboardFocusRingNeedsDisplayInRect:rect];
}

void NSView_setFocusRingType (NSView* THIS, NSFocusRingType focusRingType) {
	NSLog(@"NSView_setFocusRingType");
	[THIS setFocusRingType:focusRingType];
}

NSFocusRingType NSView_focusRingType (NSView* THIS) {
	NSLog(@"NSView_focusRingType");
	return [THIS focusRingType];
}

NSFocusRingType NSView$_defaultFocusRingType () {
	NSLog(@"NSView$_defaultFocusRingType");
	return [NSView defaultFocusRingType];
}

void NSView_writeEPSInsideRect_toPasteboard (NSView* THIS, NSRect rect, NSPasteboard * pasteboard) {
	NSLog(@"NSView_writeEPSInsideRect_toPasteboard");
	[THIS writeEPSInsideRect:rect toPasteboard:pasteboard];
}

NSData * NSView_dataWithEPSInsideRect (NSView* THIS, NSRect rect) {
	NSLog(@"NSView_dataWithEPSInsideRect");
	return [THIS dataWithEPSInsideRect:rect];
}

void NSView_writePDFInsideRect_toPasteboard (NSView* THIS, NSRect rect, NSPasteboard * pasteboard) {
	NSLog(@"NSView_writePDFInsideRect_toPasteboard");
	[THIS writePDFInsideRect:rect toPasteboard:pasteboard];
}

NSData * NSView_dataWithPDFInsideRect (NSView* THIS, NSRect rect) {
	NSLog(@"NSView_dataWithPDFInsideRect");
	return [THIS dataWithPDFInsideRect:rect];
}

void NSView_print (NSView* THIS, id sender) {
	NSLog(@"NSView_print");
	[THIS print:sender];
}

BOOL NSView_knowsPageRange (NSView* THIS, NSRangePointer range) {
	NSLog(@"NSView_knowsPageRange");
	return [THIS knowsPageRange:range];
}

float NSView_heightAdjustLimit (NSView* THIS) {
	NSLog(@"NSView_heightAdjustLimit");
	return [THIS heightAdjustLimit];
}

float NSView_widthAdjustLimit (NSView* THIS) {
	NSLog(@"NSView_widthAdjustLimit");
	return [THIS widthAdjustLimit];
}

void NSView_adjustPageWidthNew_left_right_limit (NSView* THIS, float * newRight, float oldLeft, float oldRight, float rightLimit) {
	NSLog(@"NSView_adjustPageWidthNew_left_right_limit");
	[THIS adjustPageWidthNew:newRight left:oldLeft right:oldRight limit:rightLimit];
}

void NSView_adjustPageHeightNew_top_bottom_limit (NSView* THIS, float * newBottom, float oldTop, float oldBottom, float bottomLimit) {
	NSLog(@"NSView_adjustPageHeightNew_top_bottom_limit");
	[THIS adjustPageHeightNew:newBottom top:oldTop bottom:oldBottom limit:bottomLimit];
}

NSRect NSView_rectForPage (NSView* THIS, int page) {
	NSLog(@"NSView_rectForPage");
	return [THIS rectForPage:page];
}

NSPoint NSView_locationOfPrintRect (NSView* THIS, NSRect aRect) {
	NSLog(@"NSView_locationOfPrintRect");
	return [THIS locationOfPrintRect:aRect];
}

void NSView_drawPageBorderWithSize (NSView* THIS, NSSize borderSize) {
	NSLog(@"NSView_drawPageBorderWithSize");
	[THIS drawPageBorderWithSize:borderSize];
}

void NSView_drawSheetBorderWithSize (NSView* THIS, NSSize borderSize) {
	NSLog(@"NSView_drawSheetBorderWithSize");
	[THIS drawSheetBorderWithSize:borderSize];
}

NSString * NSView_printJobTitle (NSView* THIS) {
	NSLog(@"NSView_printJobTitle");
	return [THIS printJobTitle];
}

void NSView_beginDocument (NSView* THIS) {
	NSLog(@"NSView_beginDocument");
	[THIS beginDocument];
}

void NSView_endDocument (NSView* THIS) {
	NSLog(@"NSView_endDocument");
	[THIS endDocument];
}

void NSView_beginPageInRect_atPlacement (NSView* THIS, NSRect aRect, NSPoint location) {
	NSLog(@"NSView_beginPageInRect_atPlacement");
	[THIS beginPageInRect:aRect atPlacement:location];
}

void NSView_endPage (NSView* THIS) {
	NSLog(@"NSView_endPage");
	[THIS endPage];
}

void NSView_dragImage_at_offset_event_pasteboard_source_slideBack (NSView* THIS, NSImage * anImage, NSPoint viewLocation, NSSize initialOffset, NSEvent * event, NSPasteboard * pboard, id sourceObj, BOOL slideFlag) {
	NSLog(@"NSView_dragImage_at_offset_event_pasteboard_source_slideBack");
	[THIS dragImage:anImage at:viewLocation offset:initialOffset event:event pasteboard:pboard source:sourceObj slideBack:slideFlag];
}

void NSView_registerForDraggedTypes (NSView* THIS, NSArray * newTypes) {
	NSLog(@"NSView_registerForDraggedTypes");
	[THIS registerForDraggedTypes:newTypes];
}

void NSView_unregisterDraggedTypes (NSView* THIS) {
	NSLog(@"NSView_unregisterDraggedTypes");
	[THIS unregisterDraggedTypes];
}

BOOL NSView_dragFile_fromRect_slideBack_event (NSView* THIS, NSString * filename, NSRect rect, BOOL aFlag, NSEvent * event) {
	NSLog(@"NSView_dragFile_fromRect_slideBack_event");
	return [THIS dragFile:filename fromRect:rect slideBack:aFlag event:event];
}

BOOL NSView_dragPromisedFilesOfTypes_fromRect_source_slideBack_event (NSView* THIS, NSArray * typeArray, NSRect rect, id sourceObject, BOOL aFlag, NSEvent * event) {
	NSLog(@"NSView_dragPromisedFilesOfTypes_fromRect_source_slideBack_event");
	return [THIS dragPromisedFilesOfTypes:typeArray fromRect:rect source:sourceObject slideBack:aFlag event:event];
}

NSView * NSView_alloc(){
	NSLog(@"NSView_alloc()");
	return [ NSView alloc ];
}