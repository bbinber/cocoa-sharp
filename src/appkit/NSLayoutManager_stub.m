/* Generated by genstubs.pl
 * (c) 2004 kangaroo, C.J. and Urs
 */

#include <Cocoa/Cocoa.h>

#include <Foundation/NSObject.h>
#include <AppKit/NSFont.h>
#include <AppKit/NSImageCell.h>
#include <AppKit/NSGlyphGenerator.h>

NSLayoutManager * NSLayoutManager_init (NSLayoutManager* THIS) {
	NSLog(@"NSLayoutManager_init");
	return [THIS init];
}

NSTextStorage * NSLayoutManager_textStorage (NSLayoutManager* THIS) {
	NSLog(@"NSLayoutManager_textStorage");
	return [THIS textStorage];
}

void NSLayoutManager_setTextStorage (NSLayoutManager* THIS, NSTextStorage * textStorage) {
	NSLog(@"NSLayoutManager_setTextStorage");
	[THIS setTextStorage:textStorage];
}

void NSLayoutManager_replaceTextStorage (NSLayoutManager* THIS, NSTextStorage * newTextStorage) {
	NSLog(@"NSLayoutManager_replaceTextStorage");
	[THIS replaceTextStorage:newTextStorage];
}

NSTypesetter * NSLayoutManager_typesetter (NSLayoutManager* THIS) {
	NSLog(@"NSLayoutManager_typesetter");
	return [THIS typesetter];
}

void NSLayoutManager_setTypesetter (NSLayoutManager* THIS, NSTypesetter * typesetter) {
	NSLog(@"NSLayoutManager_setTypesetter");
	[THIS setTypesetter:typesetter];
}

NSLayoutManager * NSLayoutManager_delegate (NSLayoutManager* THIS) {
	NSLog(@"NSLayoutManager_delegate");
	return [THIS delegate];
}

void NSLayoutManager_setDelegate (NSLayoutManager* THIS, id delegate) {
	NSLog(@"NSLayoutManager_setDelegate");
	[THIS setDelegate:delegate];
}

NSArray * NSLayoutManager_textContainers (NSLayoutManager* THIS) {
	NSLog(@"NSLayoutManager_textContainers");
	return [THIS textContainers];
}

void NSLayoutManager_addTextContainer (NSLayoutManager* THIS, NSTextContainer * container) {
	NSLog(@"NSLayoutManager_addTextContainer");
	[THIS addTextContainer:container];
}

void NSLayoutManager_insertTextContainer_atIndex (NSLayoutManager* THIS, NSTextContainer * container, unsigned index) {
	NSLog(@"NSLayoutManager_insertTextContainer_atIndex");
	[THIS insertTextContainer:container atIndex:index];
}

void NSLayoutManager_removeTextContainerAtIndex (NSLayoutManager* THIS, unsigned index) {
	NSLog(@"NSLayoutManager_removeTextContainerAtIndex");
	[THIS removeTextContainerAtIndex:index];
}

void NSLayoutManager_textContainerChangedGeometry (NSLayoutManager* THIS, NSTextContainer * container) {
	NSLog(@"NSLayoutManager_textContainerChangedGeometry");
	[THIS textContainerChangedGeometry:container];
}

void NSLayoutManager_textContainerChangedTextView (NSLayoutManager* THIS, NSTextContainer * container) {
	NSLog(@"NSLayoutManager_textContainerChangedTextView");
	[THIS textContainerChangedTextView:container];
}

void NSLayoutManager_invalidateGlyphsForCharacterRange_changeInLength_actualCharacterRange (NSLayoutManager* THIS, NSRange charRange, int delta, NSRangePointer actualCharRange) {
	NSLog(@"NSLayoutManager_invalidateGlyphsForCharacterRange_changeInLength_actualCharacterRange");
	[THIS invalidateGlyphsForCharacterRange:charRange changeInLength:delta actualCharacterRange:actualCharRange];
}

void NSLayoutManager_invalidateLayoutForCharacterRange_isSoft_actualCharacterRange (NSLayoutManager* THIS, NSRange charRange, BOOL flag, NSRangePointer actualCharRange) {
	NSLog(@"NSLayoutManager_invalidateLayoutForCharacterRange_isSoft_actualCharacterRange");
	[THIS invalidateLayoutForCharacterRange:charRange isSoft:flag actualCharacterRange:actualCharRange];
}

void NSLayoutManager_invalidateDisplayForGlyphRange (NSLayoutManager* THIS, NSRange glyphRange) {
	NSLog(@"NSLayoutManager_invalidateDisplayForGlyphRange");
	[THIS invalidateDisplayForGlyphRange:glyphRange];
}

void NSLayoutManager_invalidateDisplayForCharacterRange (NSLayoutManager* THIS, NSRange charRange) {
	NSLog(@"NSLayoutManager_invalidateDisplayForCharacterRange");
	[THIS invalidateDisplayForCharacterRange:charRange];
}

void NSLayoutManager_textStorage_edited_range_changeInLength_invalidatedRange (NSLayoutManager* THIS, NSTextStorage * str, unsigned editedMask, NSRange newCharRange, int delta, NSRange invalidatedCharRange) {
	NSLog(@"NSLayoutManager_textStorage_edited_range_changeInLength_invalidatedRange");
	[THIS textStorage:str edited:editedMask range:newCharRange changeInLength:delta invalidatedRange:invalidatedCharRange];
}

void NSLayoutManager_setBackgroundLayoutEnabled (NSLayoutManager* THIS, BOOL flag) {
	NSLog(@"NSLayoutManager_setBackgroundLayoutEnabled");
	[THIS setBackgroundLayoutEnabled:flag];
}

BOOL NSLayoutManager_backgroundLayoutEnabled (NSLayoutManager* THIS) {
	NSLog(@"NSLayoutManager_backgroundLayoutEnabled");
	return [THIS backgroundLayoutEnabled];
}

void NSLayoutManager_setShowsInvisibleCharacters (NSLayoutManager* THIS, BOOL flag) {
	NSLog(@"NSLayoutManager_setShowsInvisibleCharacters");
	[THIS setShowsInvisibleCharacters:flag];
}

BOOL NSLayoutManager_showsInvisibleCharacters (NSLayoutManager* THIS) {
	NSLog(@"NSLayoutManager_showsInvisibleCharacters");
	return [THIS showsInvisibleCharacters];
}

void NSLayoutManager_setShowsControlCharacters (NSLayoutManager* THIS, BOOL flag) {
	NSLog(@"NSLayoutManager_setShowsControlCharacters");
	[THIS setShowsControlCharacters:flag];
}

BOOL NSLayoutManager_showsControlCharacters (NSLayoutManager* THIS) {
	NSLog(@"NSLayoutManager_showsControlCharacters");
	return [THIS showsControlCharacters];
}

void NSLayoutManager_setHyphenationFactor (NSLayoutManager* THIS, float factor) {
	NSLog(@"NSLayoutManager_setHyphenationFactor");
	[THIS setHyphenationFactor:factor];
}

float NSLayoutManager_hyphenationFactor (NSLayoutManager* THIS) {
	NSLog(@"NSLayoutManager_hyphenationFactor");
	return [THIS hyphenationFactor];
}

void NSLayoutManager_setDefaultAttachmentScaling (NSLayoutManager* THIS, NSImageScaling scaling) {
	NSLog(@"NSLayoutManager_setDefaultAttachmentScaling");
	[THIS setDefaultAttachmentScaling:scaling];
}

NSImageScaling NSLayoutManager_defaultAttachmentScaling (NSLayoutManager* THIS) {
	NSLog(@"NSLayoutManager_defaultAttachmentScaling");
	return [THIS defaultAttachmentScaling];
}

void NSLayoutManager_insertGlyph_atGlyphIndex_characterIndex (NSLayoutManager* THIS, NSGlyph glyph, unsigned glyphIndex, unsigned charIndex) {
	NSLog(@"NSLayoutManager_insertGlyph_atGlyphIndex_characterIndex");
	[THIS insertGlyph:glyph atGlyphIndex:glyphIndex characterIndex:charIndex];
}

void NSLayoutManager_replaceGlyphAtIndex_withGlyph (NSLayoutManager* THIS, unsigned glyphIndex, NSGlyph newGlyph) {
	NSLog(@"NSLayoutManager_replaceGlyphAtIndex_withGlyph");
	[THIS replaceGlyphAtIndex:glyphIndex withGlyph:newGlyph];
}

void NSLayoutManager_deleteGlyphsInRange (NSLayoutManager* THIS, NSRange glyphRange) {
	NSLog(@"NSLayoutManager_deleteGlyphsInRange");
	[THIS deleteGlyphsInRange:glyphRange];
}

void NSLayoutManager_setCharacterIndex_forGlyphAtIndex (NSLayoutManager* THIS, unsigned charIndex, unsigned glyphIndex) {
	NSLog(@"NSLayoutManager_setCharacterIndex_forGlyphAtIndex");
	[THIS setCharacterIndex:charIndex forGlyphAtIndex:glyphIndex];
}

unsigned NSLayoutManager_numberOfGlyphs (NSLayoutManager* THIS) {
	NSLog(@"NSLayoutManager_numberOfGlyphs");
	return [THIS numberOfGlyphs];
}

NSGlyph NSLayoutManager_glyphAtIndex (NSLayoutManager* THIS, unsigned glyphIndex) {
	NSLog(@"NSLayoutManager_glyphAtIndex");
	return [THIS glyphAtIndex:glyphIndex];
}

NSGlyph NSLayoutManager_glyphAtIndex_isValidIndex (NSLayoutManager* THIS, unsigned glyphIndex, BOOL * isValidIndex) {
	NSLog(@"NSLayoutManager_glyphAtIndex_isValidIndex");
	return [THIS glyphAtIndex:glyphIndex isValidIndex:isValidIndex];
}

BOOL NSLayoutManager_isValidGlyphIndex (NSLayoutManager* THIS, unsigned glyphIndex) {
	NSLog(@"NSLayoutManager_isValidGlyphIndex");
	return [THIS isValidGlyphIndex:glyphIndex];
}

unsigned NSLayoutManager_getGlyphs_range (NSLayoutManager* THIS, NSGlyph * glyphArray, NSRange glyphRange) {
	NSLog(@"NSLayoutManager_getGlyphs_range");
	return [THIS getGlyphs:glyphArray range:glyphRange];
}

unsigned NSLayoutManager_characterIndexForGlyphAtIndex (NSLayoutManager* THIS, unsigned glyphIndex) {
	NSLog(@"NSLayoutManager_characterIndexForGlyphAtIndex");
	return [THIS characterIndexForGlyphAtIndex:glyphIndex];
}

void NSLayoutManager_setIntAttribute_value_forGlyphAtIndex (NSLayoutManager* THIS, int attributeTag, int val, unsigned glyphIndex) {
	NSLog(@"NSLayoutManager_setIntAttribute_value_forGlyphAtIndex");
	[THIS setIntAttribute:attributeTag value:val forGlyphAtIndex:glyphIndex];
}

int NSLayoutManager_intAttribute_forGlyphAtIndex (NSLayoutManager* THIS, int attributeTag, unsigned glyphIndex) {
	NSLog(@"NSLayoutManager_intAttribute_forGlyphAtIndex");
	return [THIS intAttribute:attributeTag forGlyphAtIndex:glyphIndex];
}

void NSLayoutManager_setTextContainer_forGlyphRange (NSLayoutManager* THIS, NSTextContainer * container, NSRange glyphRange) {
	NSLog(@"NSLayoutManager_setTextContainer_forGlyphRange");
	[THIS setTextContainer:container forGlyphRange:glyphRange];
}

void NSLayoutManager_setLineFragmentRect_forGlyphRange_usedRect (NSLayoutManager* THIS, NSRect fragmentRect, NSRange glyphRange, NSRect usedRect) {
	NSLog(@"NSLayoutManager_setLineFragmentRect_forGlyphRange_usedRect");
	[THIS setLineFragmentRect:fragmentRect forGlyphRange:glyphRange usedRect:usedRect];
}

void NSLayoutManager_setExtraLineFragmentRect_usedRect_textContainer (NSLayoutManager* THIS, NSRect fragmentRect, NSRect usedRect, NSTextContainer * container) {
	NSLog(@"NSLayoutManager_setExtraLineFragmentRect_usedRect_textContainer");
	[THIS setExtraLineFragmentRect:fragmentRect usedRect:usedRect textContainer:container];
}

void NSLayoutManager_setDrawsOutsideLineFragment_forGlyphAtIndex (NSLayoutManager* THIS, BOOL flag, unsigned glyphIndex) {
	NSLog(@"NSLayoutManager_setDrawsOutsideLineFragment_forGlyphAtIndex");
	[THIS setDrawsOutsideLineFragment:flag forGlyphAtIndex:glyphIndex];
}

void NSLayoutManager_setLocation_forStartOfGlyphRange (NSLayoutManager* THIS, NSPoint location, NSRange glyphRange) {
	NSLog(@"NSLayoutManager_setLocation_forStartOfGlyphRange");
	[THIS setLocation:location forStartOfGlyphRange:glyphRange];
}

void NSLayoutManager_setNotShownAttribute_forGlyphAtIndex (NSLayoutManager* THIS, BOOL flag, unsigned glyphIndex) {
	NSLog(@"NSLayoutManager_setNotShownAttribute_forGlyphAtIndex");
	[THIS setNotShownAttribute:flag forGlyphAtIndex:glyphIndex];
}

void NSLayoutManager_setAttachmentSize_forGlyphRange (NSLayoutManager* THIS, NSSize attachmentSize, NSRange glyphRange) {
	NSLog(@"NSLayoutManager_setAttachmentSize_forGlyphRange");
	[THIS setAttachmentSize:attachmentSize forGlyphRange:glyphRange];
}

NSTextContainer * NSLayoutManager_textContainerForGlyphAtIndex_effectiveRange (NSLayoutManager* THIS, unsigned glyphIndex, NSRangePointer effectiveGlyphRange) {
	NSLog(@"NSLayoutManager_textContainerForGlyphAtIndex_effectiveRange");
	return [THIS textContainerForGlyphAtIndex:glyphIndex effectiveRange:effectiveGlyphRange];
}

NSRect NSLayoutManager_usedRectForTextContainer (NSLayoutManager* THIS, NSTextContainer * container) {
	NSLog(@"NSLayoutManager_usedRectForTextContainer");
	return [THIS usedRectForTextContainer:container];
}

NSRect NSLayoutManager_lineFragmentRectForGlyphAtIndex_effectiveRange (NSLayoutManager* THIS, unsigned glyphIndex, NSRangePointer effectiveGlyphRange) {
	NSLog(@"NSLayoutManager_lineFragmentRectForGlyphAtIndex_effectiveRange");
	return [THIS lineFragmentRectForGlyphAtIndex:glyphIndex effectiveRange:effectiveGlyphRange];
}

NSRect NSLayoutManager_lineFragmentUsedRectForGlyphAtIndex_effectiveRange (NSLayoutManager* THIS, unsigned glyphIndex, NSRangePointer effectiveGlyphRange) {
	NSLog(@"NSLayoutManager_lineFragmentUsedRectForGlyphAtIndex_effectiveRange");
	return [THIS lineFragmentUsedRectForGlyphAtIndex:glyphIndex effectiveRange:effectiveGlyphRange];
}

NSSize NSLayoutManager_attachmentSizeForGlyphAtIndex (NSLayoutManager* THIS, unsigned glyphIndex) {
	NSLog(@"NSLayoutManager_attachmentSizeForGlyphAtIndex");
	return [THIS attachmentSizeForGlyphAtIndex:glyphIndex];
}

NSRect NSLayoutManager_extraLineFragmentRect (NSLayoutManager* THIS) {
	NSLog(@"NSLayoutManager_extraLineFragmentRect");
	return [THIS extraLineFragmentRect];
}

NSRect NSLayoutManager_extraLineFragmentUsedRect (NSLayoutManager* THIS) {
	NSLog(@"NSLayoutManager_extraLineFragmentUsedRect");
	return [THIS extraLineFragmentUsedRect];
}

NSTextContainer * NSLayoutManager_extraLineFragmentTextContainer (NSLayoutManager* THIS) {
	NSLog(@"NSLayoutManager_extraLineFragmentTextContainer");
	return [THIS extraLineFragmentTextContainer];
}

BOOL NSLayoutManager_drawsOutsideLineFragmentForGlyphAtIndex (NSLayoutManager* THIS, unsigned glyphIndex) {
	NSLog(@"NSLayoutManager_drawsOutsideLineFragmentForGlyphAtIndex");
	return [THIS drawsOutsideLineFragmentForGlyphAtIndex:glyphIndex];
}

NSPoint NSLayoutManager_locationForGlyphAtIndex (NSLayoutManager* THIS, unsigned glyphIndex) {
	NSLog(@"NSLayoutManager_locationForGlyphAtIndex");
	return [THIS locationForGlyphAtIndex:glyphIndex];
}

BOOL NSLayoutManager_notShownAttributeForGlyphAtIndex (NSLayoutManager* THIS, unsigned glyphIndex) {
	NSLog(@"NSLayoutManager_notShownAttributeForGlyphAtIndex");
	return [THIS notShownAttributeForGlyphAtIndex:glyphIndex];
}

NSRange NSLayoutManager_glyphRangeForCharacterRange_actualCharacterRange (NSLayoutManager* THIS, NSRange charRange, NSRangePointer actualCharRange) {
	NSLog(@"NSLayoutManager_glyphRangeForCharacterRange_actualCharacterRange");
	return [THIS glyphRangeForCharacterRange:charRange actualCharacterRange:actualCharRange];
}

NSRange NSLayoutManager_characterRangeForGlyphRange_actualGlyphRange (NSLayoutManager* THIS, NSRange glyphRange, NSRangePointer actualGlyphRange) {
	NSLog(@"NSLayoutManager_characterRangeForGlyphRange_actualGlyphRange");
	return [THIS characterRangeForGlyphRange:glyphRange actualGlyphRange:actualGlyphRange];
}

NSRange NSLayoutManager_glyphRangeForTextContainer (NSLayoutManager* THIS, NSTextContainer * container) {
	NSLog(@"NSLayoutManager_glyphRangeForTextContainer");
	return [THIS glyphRangeForTextContainer:container];
}

NSRange NSLayoutManager_rangeOfNominallySpacedGlyphsContainingIndex (NSLayoutManager* THIS, unsigned glyphIndex) {
	NSLog(@"NSLayoutManager_rangeOfNominallySpacedGlyphsContainingIndex");
	return [THIS rangeOfNominallySpacedGlyphsContainingIndex:glyphIndex];
}

NSRectArray NSLayoutManager_rectArrayForCharacterRange_withinSelectedCharacterRange_inTextContainer_rectCount (NSLayoutManager* THIS, NSRange charRange, NSRange selCharRange, NSTextContainer * container, unsigned * rectCount) {
	NSLog(@"NSLayoutManager_rectArrayForCharacterRange_withinSelectedCharacterRange_inTextContainer_rectCount");
	return [THIS rectArrayForCharacterRange:charRange withinSelectedCharacterRange:selCharRange inTextContainer:container rectCount:rectCount];
}

NSRectArray NSLayoutManager_rectArrayForGlyphRange_withinSelectedGlyphRange_inTextContainer_rectCount (NSLayoutManager* THIS, NSRange glyphRange, NSRange selGlyphRange, NSTextContainer * container, unsigned * rectCount) {
	NSLog(@"NSLayoutManager_rectArrayForGlyphRange_withinSelectedGlyphRange_inTextContainer_rectCount");
	return [THIS rectArrayForGlyphRange:glyphRange withinSelectedGlyphRange:selGlyphRange inTextContainer:container rectCount:rectCount];
}

NSRect NSLayoutManager_boundingRectForGlyphRange_inTextContainer (NSLayoutManager* THIS, NSRange glyphRange, NSTextContainer * container) {
	NSLog(@"NSLayoutManager_boundingRectForGlyphRange_inTextContainer");
	return [THIS boundingRectForGlyphRange:glyphRange inTextContainer:container];
}

NSRange NSLayoutManager_glyphRangeForBoundingRect_inTextContainer (NSLayoutManager* THIS, NSRect bounds, NSTextContainer * container) {
	NSLog(@"NSLayoutManager_glyphRangeForBoundingRect_inTextContainer");
	return [THIS glyphRangeForBoundingRect:bounds inTextContainer:container];
}

NSRange NSLayoutManager_glyphRangeForBoundingRectWithoutAdditionalLayout_inTextContainer (NSLayoutManager* THIS, NSRect bounds, NSTextContainer * container) {
	NSLog(@"NSLayoutManager_glyphRangeForBoundingRectWithoutAdditionalLayout_inTextContainer");
	return [THIS glyphRangeForBoundingRectWithoutAdditionalLayout:bounds inTextContainer:container];
}

unsigned NSLayoutManager_glyphIndexForPoint_inTextContainer_fractionOfDistanceThroughGlyph (NSLayoutManager* THIS, NSPoint point, NSTextContainer * container, float * partialFraction) {
	NSLog(@"NSLayoutManager_glyphIndexForPoint_inTextContainer_fractionOfDistanceThroughGlyph");
	return [THIS glyphIndexForPoint:point inTextContainer:container fractionOfDistanceThroughGlyph:partialFraction];
}

unsigned NSLayoutManager_glyphIndexForPoint_inTextContainer (NSLayoutManager* THIS, NSPoint point, NSTextContainer * container) {
	NSLog(@"NSLayoutManager_glyphIndexForPoint_inTextContainer");
	return [THIS glyphIndexForPoint:point inTextContainer:container];
}

float NSLayoutManager_fractionOfDistanceThroughGlyphForPoint_inTextContainer (NSLayoutManager* THIS, NSPoint point, NSTextContainer * container) {
	NSLog(@"NSLayoutManager_fractionOfDistanceThroughGlyphForPoint_inTextContainer");
	return [THIS fractionOfDistanceThroughGlyphForPoint:point inTextContainer:container];
}

void NSLayoutManager_getFirstUnlaidCharacterIndex_glyphIndex (NSLayoutManager* THIS, unsigned * charIndex, unsigned * glyphIndex) {
	NSLog(@"NSLayoutManager_getFirstUnlaidCharacterIndex_glyphIndex");
	[THIS getFirstUnlaidCharacterIndex:charIndex glyphIndex:glyphIndex];
}

unsigned NSLayoutManager_firstUnlaidCharacterIndex (NSLayoutManager* THIS) {
	NSLog(@"NSLayoutManager_firstUnlaidCharacterIndex");
	return [THIS firstUnlaidCharacterIndex];
}

unsigned NSLayoutManager_firstUnlaidGlyphIndex (NSLayoutManager* THIS) {
	NSLog(@"NSLayoutManager_firstUnlaidGlyphIndex");
	return [THIS firstUnlaidGlyphIndex];
}

BOOL NSLayoutManager_usesScreenFonts (NSLayoutManager* THIS) {
	NSLog(@"NSLayoutManager_usesScreenFonts");
	return [THIS usesScreenFonts];
}

void NSLayoutManager_setUsesScreenFonts (NSLayoutManager* THIS, BOOL flag) {
	NSLog(@"NSLayoutManager_setUsesScreenFonts");
	[THIS setUsesScreenFonts:flag];
}

NSFont * NSLayoutManager_substituteFontForFont (NSLayoutManager* THIS, NSFont * originalFont) {
	NSLog(@"NSLayoutManager_substituteFontForFont");
	return [THIS substituteFontForFont:originalFont];
}

NSDictionary * NSLayoutManager_temporaryAttributesAtCharacterIndex_effectiveRange (NSLayoutManager* THIS, unsigned charIndex, NSRangePointer effectiveCharRange) {
	NSLog(@"NSLayoutManager_temporaryAttributesAtCharacterIndex_effectiveRange");
	return [THIS temporaryAttributesAtCharacterIndex:charIndex effectiveRange:effectiveCharRange];
}

void NSLayoutManager_setTemporaryAttributes_forCharacterRange (NSLayoutManager* THIS, NSDictionary * attrs, NSRange charRange) {
	NSLog(@"NSLayoutManager_setTemporaryAttributes_forCharacterRange");
	[THIS setTemporaryAttributes:attrs forCharacterRange:charRange];
}

void NSLayoutManager_addTemporaryAttributes_forCharacterRange (NSLayoutManager* THIS, NSDictionary * attrs, NSRange charRange) {
	NSLog(@"NSLayoutManager_addTemporaryAttributes_forCharacterRange");
	[THIS addTemporaryAttributes:attrs forCharacterRange:charRange];
}

void NSLayoutManager_removeTemporaryAttribute_forCharacterRange (NSLayoutManager* THIS, NSString * name, NSRange charRange) {
	NSLog(@"NSLayoutManager_removeTemporaryAttribute_forCharacterRange");
	[THIS removeTemporaryAttribute:name forCharacterRange:charRange];
}

unsigned NSLayoutManager_getGlyphsInRange_glyphs_characterIndexes_glyphInscriptions_elasticBits_bidiLevels (NSLayoutManager* THIS, NSRange glyphsRange, NSGlyph * glyphBuffer, unsigned * charIndexBuffer, NSGlyphInscription * inscribeBuffer, BOOL * elasticBuffer, unsigned char * bidiLevelBuffer) {
	NSLog(@"NSLayoutManager_getGlyphsInRange_glyphs_characterIndexes_glyphInscriptions_elasticBits_bidiLevels");
	return [THIS getGlyphsInRange:glyphsRange glyphs:glyphBuffer characterIndexes:charIndexBuffer glyphInscriptions:inscribeBuffer elasticBits:elasticBuffer bidiLevels:bidiLevelBuffer];
}

unsigned NSLayoutManager_getGlyphsInRange_glyphs_characterIndexes_glyphInscriptions_elasticBits (NSLayoutManager* THIS, NSRange glyphsRange, NSGlyph * glyphBuffer, unsigned * charIndexBuffer, NSGlyphInscription * inscribeBuffer, BOOL * elasticBuffer) {
	NSLog(@"NSLayoutManager_getGlyphsInRange_glyphs_characterIndexes_glyphInscriptions_elasticBits");
	return [THIS getGlyphsInRange:glyphsRange glyphs:glyphBuffer characterIndexes:charIndexBuffer glyphInscriptions:inscribeBuffer elasticBits:elasticBuffer];
}

NSTypesetterBehavior NSLayoutManager_typesetterBehavior (NSLayoutManager* THIS) {
	NSLog(@"NSLayoutManager_typesetterBehavior");
	return [THIS typesetterBehavior];
}

void NSLayoutManager_setTypesetterBehavior (NSLayoutManager* THIS, NSTypesetterBehavior theBehavior) {
	NSLog(@"NSLayoutManager_setTypesetterBehavior");
	[THIS setTypesetterBehavior:theBehavior];
}

float NSLayoutManager_defaultLineHeightForFont (NSLayoutManager* THIS, NSFont * theFont) {
	NSLog(@"NSLayoutManager_defaultLineHeightForFont");
	return [THIS defaultLineHeightForFont:theFont];
}

NSArray * NSLayoutManager_rulerMarkersForTextView_paragraphStyle_ruler (NSLayoutManager* THIS, NSTextView * view, NSParagraphStyle * style, NSRulerView * ruler) {
	NSLog(@"NSLayoutManager_rulerMarkersForTextView_paragraphStyle_ruler");
	return [THIS rulerMarkersForTextView:view paragraphStyle:style ruler:ruler];
}

NSView * NSLayoutManager_rulerAccessoryViewForTextView_paragraphStyle_ruler_enabled (NSLayoutManager* THIS, NSTextView * view, NSParagraphStyle * style, NSRulerView * ruler, BOOL isEnabled) {
	NSLog(@"NSLayoutManager_rulerAccessoryViewForTextView_paragraphStyle_ruler_enabled");
	return [THIS rulerAccessoryViewForTextView:view paragraphStyle:style ruler:ruler enabled:isEnabled];
}

BOOL NSLayoutManager_layoutManagerOwnsFirstResponderInWindow (NSLayoutManager* THIS, NSWindow * window) {
	NSLog(@"NSLayoutManager_layoutManagerOwnsFirstResponderInWindow");
	return [THIS layoutManagerOwnsFirstResponderInWindow:window];
}

NSTextView * NSLayoutManager_firstTextView (NSLayoutManager* THIS) {
	NSLog(@"NSLayoutManager_firstTextView");
	return [THIS firstTextView];
}

NSTextView * NSLayoutManager_textViewForBeginningOfSelection (NSLayoutManager* THIS) {
	NSLog(@"NSLayoutManager_textViewForBeginningOfSelection");
	return [THIS textViewForBeginningOfSelection];
}

void NSLayoutManager_drawBackgroundForGlyphRange_atPoint (NSLayoutManager* THIS, NSRange glyphsToShow, NSPoint origin) {
	NSLog(@"NSLayoutManager_drawBackgroundForGlyphRange_atPoint");
	[THIS drawBackgroundForGlyphRange:glyphsToShow atPoint:origin];
}

void NSLayoutManager_drawGlyphsForGlyphRange_atPoint (NSLayoutManager* THIS, NSRange glyphsToShow, NSPoint origin) {
	NSLog(@"NSLayoutManager_drawGlyphsForGlyphRange_atPoint");
	[THIS drawGlyphsForGlyphRange:glyphsToShow atPoint:origin];
}

void NSLayoutManager_showPackedGlyphs_length_glyphRange_atPoint_font_color_printingAdjustment (NSLayoutManager* THIS, char * glyphs, unsigned glyphLen, NSRange glyphRange, NSPoint point, NSFont * font, NSColor * color, NSSize printingAdjustment) {
	NSLog(@"NSLayoutManager_showPackedGlyphs_length_glyphRange_atPoint_font_color_printingAdjustment");
	[THIS showPackedGlyphs:glyphs length:glyphLen glyphRange:glyphRange atPoint:point font:font color:color printingAdjustment:printingAdjustment];
}

void NSLayoutManager_showAttachmentCell_inRect_characterIndex (NSLayoutManager* THIS, NSCell * cell, NSRect rect, unsigned attachmentIndex) {
	NSLog(@"NSLayoutManager_showAttachmentCell_inRect_characterIndex");
	[THIS showAttachmentCell:cell inRect:rect characterIndex:attachmentIndex];
}

void NSLayoutManager_drawUnderlineForGlyphRange_underlineType_baselineOffset_lineFragmentRect_lineFragmentGlyphRange_containerOrigin (NSLayoutManager* THIS, NSRange glyphRange, int underlineVal, float baselineOffset, NSRect lineRect, NSRange lineGlyphRange, NSPoint containerOrigin) {
	NSLog(@"NSLayoutManager_drawUnderlineForGlyphRange_underlineType_baselineOffset_lineFragmentRect_lineFragmentGlyphRange_containerOrigin");
	[THIS drawUnderlineForGlyphRange:glyphRange underlineType:underlineVal baselineOffset:baselineOffset lineFragmentRect:lineRect lineFragmentGlyphRange:lineGlyphRange containerOrigin:containerOrigin];
}

void NSLayoutManager_underlineGlyphRange_underlineType_lineFragmentRect_lineFragmentGlyphRange_containerOrigin (NSLayoutManager* THIS, NSRange glyphRange, int underlineVal, NSRect lineRect, NSRange lineGlyphRange, NSPoint containerOrigin) {
	NSLog(@"NSLayoutManager_underlineGlyphRange_underlineType_lineFragmentRect_lineFragmentGlyphRange_containerOrigin");
	[THIS underlineGlyphRange:glyphRange underlineType:underlineVal lineFragmentRect:lineRect lineFragmentGlyphRange:lineGlyphRange containerOrigin:containerOrigin];
}

void NSLayoutManager_drawStrikethroughForGlyphRange_strikethroughType_baselineOffset_lineFragmentRect_lineFragmentGlyphRange_containerOrigin (NSLayoutManager* THIS, NSRange glyphRange, int strikethroughVal, float baselineOffset, NSRect lineRect, NSRange lineGlyphRange, NSPoint containerOrigin) {
	NSLog(@"NSLayoutManager_drawStrikethroughForGlyphRange_strikethroughType_baselineOffset_lineFragmentRect_lineFragmentGlyphRange_containerOrigin");
	[THIS drawStrikethroughForGlyphRange:glyphRange strikethroughType:strikethroughVal baselineOffset:baselineOffset lineFragmentRect:lineRect lineFragmentGlyphRange:lineGlyphRange containerOrigin:containerOrigin];
}

void NSLayoutManager_strikethroughGlyphRange_strikethroughType_lineFragmentRect_lineFragmentGlyphRange_containerOrigin (NSLayoutManager* THIS, NSRange glyphRange, int strikethroughVal, NSRect lineRect, NSRange lineGlyphRange, NSPoint containerOrigin) {
	NSLog(@"NSLayoutManager_strikethroughGlyphRange_strikethroughType_lineFragmentRect_lineFragmentGlyphRange_containerOrigin");
	[THIS strikethroughGlyphRange:glyphRange strikethroughType:strikethroughVal lineFragmentRect:lineRect lineFragmentGlyphRange:lineGlyphRange containerOrigin:containerOrigin];
}

void NSLayoutManager_layoutManagerDidInvalidateLayout (NSLayoutManager* THIS, NSLayoutManager * sender) {
	NSLog(@"NSLayoutManager_layoutManagerDidInvalidateLayout");
	[THIS layoutManagerDidInvalidateLayout:sender];
}

void NSLayoutManager_layoutManager_didCompleteLayoutForTextContainer_atEnd (NSLayoutManager* THIS, NSLayoutManager * layoutManager, NSTextContainer * textContainer, BOOL layoutFinishedFlag) {
	NSLog(@"NSLayoutManager_layoutManager_didCompleteLayoutForTextContainer_atEnd");
	[THIS layoutManager:layoutManager didCompleteLayoutForTextContainer:textContainer atEnd:layoutFinishedFlag];
}

NSLayoutManager * NSLayoutManager_alloc(){
	NSLog(@"NSLayoutManager_alloc()");
	return [ NSLayoutManager alloc ];
}