/* Generated by genstubs.pl
 * (c) 2004 kangaroo, C.J. and Urs
 */

#include <Cocoa/Cocoa.h>

#include <Foundation/NSObject.h>
#include <Foundation/NSGeometry.h>
#include <AppKit/AppKitDefines.h>
#include <AppKit/NSCell.h>

NSColor * NSColor$_colorWithCalibratedWhite_alpha (float white, float alpha) {
	NSLog(@"NSColor$_colorWithCalibratedWhite_alpha");
	return [NSColor colorWithCalibratedWhite:white alpha:alpha];
}

NSColor * NSColor$_colorWithCalibratedHue_saturation_brightness_alpha (float hue, float saturation, float brightness, float alpha) {
	NSLog(@"NSColor$_colorWithCalibratedHue_saturation_brightness_alpha");
	return [NSColor colorWithCalibratedHue:hue saturation:saturation brightness:brightness alpha:alpha];
}

NSColor * NSColor$_colorWithCalibratedRed_green_blue_alpha (float red, float green, float blue, float alpha) {
	NSLog(@"NSColor$_colorWithCalibratedRed_green_blue_alpha");
	return [NSColor colorWithCalibratedRed:red green:green blue:blue alpha:alpha];
}

NSColor * NSColor$_colorWithDeviceWhite_alpha (float white, float alpha) {
	NSLog(@"NSColor$_colorWithDeviceWhite_alpha");
	return [NSColor colorWithDeviceWhite:white alpha:alpha];
}

NSColor * NSColor$_colorWithDeviceHue_saturation_brightness_alpha (float hue, float saturation, float brightness, float alpha) {
	NSLog(@"NSColor$_colorWithDeviceHue_saturation_brightness_alpha");
	return [NSColor colorWithDeviceHue:hue saturation:saturation brightness:brightness alpha:alpha];
}

NSColor * NSColor$_colorWithDeviceRed_green_blue_alpha (float red, float green, float blue, float alpha) {
	NSLog(@"NSColor$_colorWithDeviceRed_green_blue_alpha");
	return [NSColor colorWithDeviceRed:red green:green blue:blue alpha:alpha];
}

NSColor * NSColor$_colorWithDeviceCyan_magenta_yellow_black_alpha (float cyan, float magenta, float yellow, float black, float alpha) {
	NSLog(@"NSColor$_colorWithDeviceCyan_magenta_yellow_black_alpha");
	return [NSColor colorWithDeviceCyan:cyan magenta:magenta yellow:yellow black:black alpha:alpha];
}

NSColor * NSColor$_colorWithCatalogName_colorName (NSString * listName, NSString * colorName) {
	NSLog(@"NSColor$_colorWithCatalogName_colorName");
	return [NSColor colorWithCatalogName:listName colorName:colorName];
}

NSColor * NSColor$_blackColor () {
	NSLog(@"NSColor$_blackColor");
	return [NSColor blackColor];
}

NSColor * NSColor$_darkGrayColor () {
	NSLog(@"NSColor$_darkGrayColor");
	return [NSColor darkGrayColor];
}

NSColor * NSColor$_lightGrayColor () {
	NSLog(@"NSColor$_lightGrayColor");
	return [NSColor lightGrayColor];
}

NSColor * NSColor$_whiteColor () {
	NSLog(@"NSColor$_whiteColor");
	return [NSColor whiteColor];
}

NSColor * NSColor$_grayColor () {
	NSLog(@"NSColor$_grayColor");
	return [NSColor grayColor];
}

NSColor * NSColor$_redColor () {
	NSLog(@"NSColor$_redColor");
	return [NSColor redColor];
}

NSColor * NSColor$_greenColor () {
	NSLog(@"NSColor$_greenColor");
	return [NSColor greenColor];
}

NSColor * NSColor$_blueColor () {
	NSLog(@"NSColor$_blueColor");
	return [NSColor blueColor];
}

NSColor * NSColor$_cyanColor () {
	NSLog(@"NSColor$_cyanColor");
	return [NSColor cyanColor];
}

NSColor * NSColor$_yellowColor () {
	NSLog(@"NSColor$_yellowColor");
	return [NSColor yellowColor];
}

NSColor * NSColor$_magentaColor () {
	NSLog(@"NSColor$_magentaColor");
	return [NSColor magentaColor];
}

NSColor * NSColor$_orangeColor () {
	NSLog(@"NSColor$_orangeColor");
	return [NSColor orangeColor];
}

NSColor * NSColor$_purpleColor () {
	NSLog(@"NSColor$_purpleColor");
	return [NSColor purpleColor];
}

NSColor * NSColor$_brownColor () {
	NSLog(@"NSColor$_brownColor");
	return [NSColor brownColor];
}

NSColor * NSColor$_clearColor () {
	NSLog(@"NSColor$_clearColor");
	return [NSColor clearColor];
}

NSColor * NSColor$_controlShadowColor () {
	NSLog(@"NSColor$_controlShadowColor");
	return [NSColor controlShadowColor];
}

NSColor * NSColor$_controlDarkShadowColor () {
	NSLog(@"NSColor$_controlDarkShadowColor");
	return [NSColor controlDarkShadowColor];
}

NSColor * NSColor$_controlColor () {
	NSLog(@"NSColor$_controlColor");
	return [NSColor controlColor];
}

NSColor * NSColor$_controlHighlightColor () {
	NSLog(@"NSColor$_controlHighlightColor");
	return [NSColor controlHighlightColor];
}

NSColor * NSColor$_controlLightHighlightColor () {
	NSLog(@"NSColor$_controlLightHighlightColor");
	return [NSColor controlLightHighlightColor];
}

NSColor * NSColor$_controlTextColor () {
	NSLog(@"NSColor$_controlTextColor");
	return [NSColor controlTextColor];
}

/* UNSUPPORTED: 
+ (NSColor *)controlBackgroundColor;		 Background of large controls (browser, tableview, clipview, ...)
 */



NSColor * NSColor$_selectedControlColor () {
	NSLog(@"NSColor$_selectedControlColor");
	return [NSColor selectedControlColor];
}

NSColor * NSColor$_secondarySelectedControlColor () {
	NSLog(@"NSColor$_secondarySelectedControlColor");
	return [NSColor secondarySelectedControlColor];
}

NSColor * NSColor$_selectedControlTextColor () {
	NSLog(@"NSColor$_selectedControlTextColor");
	return [NSColor selectedControlTextColor];
}

NSColor * NSColor$_disabledControlTextColor () {
	NSLog(@"NSColor$_disabledControlTextColor");
	return [NSColor disabledControlTextColor];
}

NSColor * NSColor$_textColor () {
	NSLog(@"NSColor$_textColor");
	return [NSColor textColor];
}

NSColor * NSColor$_textBackgroundColor () {
	NSLog(@"NSColor$_textBackgroundColor");
	return [NSColor textBackgroundColor];
}

NSColor * NSColor$_selectedTextColor () {
	NSLog(@"NSColor$_selectedTextColor");
	return [NSColor selectedTextColor];
}

NSColor * NSColor$_selectedTextBackgroundColor () {
	NSLog(@"NSColor$_selectedTextBackgroundColor");
	return [NSColor selectedTextBackgroundColor];
}

NSColor * NSColor$_gridColor () {
	NSLog(@"NSColor$_gridColor");
	return [NSColor gridColor];
}

NSColor * NSColor$_keyboardFocusIndicatorColor () {
	NSLog(@"NSColor$_keyboardFocusIndicatorColor");
	return [NSColor keyboardFocusIndicatorColor];
}

NSColor * NSColor$_windowBackgroundColor () {
	NSLog(@"NSColor$_windowBackgroundColor");
	return [NSColor windowBackgroundColor];
}

NSColor * NSColor$_scrollBarColor () {
	NSLog(@"NSColor$_scrollBarColor");
	return [NSColor scrollBarColor];
}

NSColor * NSColor$_knobColor () {
	NSLog(@"NSColor$_knobColor");
	return [NSColor knobColor];
}

NSColor * NSColor$_selectedKnobColor () {
	NSLog(@"NSColor$_selectedKnobColor");
	return [NSColor selectedKnobColor];
}

NSColor * NSColor$_windowFrameColor () {
	NSLog(@"NSColor$_windowFrameColor");
	return [NSColor windowFrameColor];
}

NSColor * NSColor$_windowFrameTextColor () {
	NSLog(@"NSColor$_windowFrameTextColor");
	return [NSColor windowFrameTextColor];
}

NSColor * NSColor$_selectedMenuItemColor () {
	NSLog(@"NSColor$_selectedMenuItemColor");
	return [NSColor selectedMenuItemColor];
}

NSColor * NSColor$_selectedMenuItemTextColor () {
	NSLog(@"NSColor$_selectedMenuItemTextColor");
	return [NSColor selectedMenuItemTextColor];
}

NSColor * NSColor$_highlightColor () {
	NSLog(@"NSColor$_highlightColor");
	return [NSColor highlightColor];
}

NSColor * NSColor$_shadowColor () {
	NSLog(@"NSColor$_shadowColor");
	return [NSColor shadowColor];
}

NSColor * NSColor$_headerColor () {
	NSLog(@"NSColor$_headerColor");
	return [NSColor headerColor];
}

NSColor * NSColor$_headerTextColor () {
	NSLog(@"NSColor$_headerTextColor");
	return [NSColor headerTextColor];
}

NSColor * NSColor$_alternateSelectedControlColor () {
	NSLog(@"NSColor$_alternateSelectedControlColor");
	return [NSColor alternateSelectedControlColor];
}

NSColor * NSColor$_alternateSelectedControlTextColor () {
	NSLog(@"NSColor$_alternateSelectedControlTextColor");
	return [NSColor alternateSelectedControlTextColor];
}

NSArray * NSColor$_controlAlternatingRowBackgroundColors () {
	NSLog(@"NSColor$_controlAlternatingRowBackgroundColors");
	return [NSColor controlAlternatingRowBackgroundColors];
}

NSColor * NSColor_highlightWithLevel (NSColor* THIS, float val) {
	NSLog(@"NSColor_highlightWithLevel");
	return [THIS highlightWithLevel:val];
}

NSColor * NSColor_shadowWithLevel (NSColor* THIS, float val) {
	NSLog(@"NSColor_shadowWithLevel");
	return [THIS shadowWithLevel:val];
}

NSColor * NSColor$_colorForControlTint (NSControlTint controlTint) {
	NSLog(@"NSColor$_colorForControlTint");
	return [NSColor colorForControlTint:controlTint];
}

NSControlTint NSColor$_currentControlTint () {
	NSLog(@"NSColor$_currentControlTint");
	return [NSColor currentControlTint];
}

void NSColor_set (NSColor* THIS) {
	NSLog(@"NSColor_set");
	[THIS set];
}

void NSColor_setFill (NSColor* THIS) {
	NSLog(@"NSColor_setFill");
	[THIS setFill];
}

void NSColor_setStroke (NSColor* THIS) {
	NSLog(@"NSColor_setStroke");
	[THIS setStroke];
}

NSString * NSColor_colorSpaceName (NSColor* THIS) {
	NSLog(@"NSColor_colorSpaceName");
	return [THIS colorSpaceName];
}

NSColor * NSColor_colorUsingColorSpaceName (NSColor* THIS, NSString * colorSpace) {
	NSLog(@"NSColor_colorUsingColorSpaceName");
	return [THIS colorUsingColorSpaceName:colorSpace];
}

NSColor * NSColor_colorUsingColorSpaceName_device (NSColor* THIS, NSString * colorSpace, NSDictionary * deviceDescription) {
	NSLog(@"NSColor_colorUsingColorSpaceName_device");
	return [THIS colorUsingColorSpaceName:colorSpace device:deviceDescription];
}

NSColor * NSColor_blendedColorWithFraction_ofColor (NSColor* THIS, float fraction, NSColor * color) {
	NSLog(@"NSColor_blendedColorWithFraction_ofColor");
	return [THIS blendedColorWithFraction:fraction ofColor:color];
}

NSColor * NSColor_colorWithAlphaComponent (NSColor* THIS, float alpha) {
	NSLog(@"NSColor_colorWithAlphaComponent");
	return [THIS colorWithAlphaComponent:alpha];
}

NSString * NSColor_catalogNameComponent (NSColor* THIS) {
	NSLog(@"NSColor_catalogNameComponent");
	return [THIS catalogNameComponent];
}

NSString * NSColor_colorNameComponent (NSColor* THIS) {
	NSLog(@"NSColor_colorNameComponent");
	return [THIS colorNameComponent];
}

NSString * NSColor_localizedCatalogNameComponent (NSColor* THIS) {
	NSLog(@"NSColor_localizedCatalogNameComponent");
	return [THIS localizedCatalogNameComponent];
}

NSString * NSColor_localizedColorNameComponent (NSColor* THIS) {
	NSLog(@"NSColor_localizedColorNameComponent");
	return [THIS localizedColorNameComponent];
}

float NSColor_redComponent (NSColor* THIS) {
	NSLog(@"NSColor_redComponent");
	return [THIS redComponent];
}

float NSColor_greenComponent (NSColor* THIS) {
	NSLog(@"NSColor_greenComponent");
	return [THIS greenComponent];
}

float NSColor_blueComponent (NSColor* THIS) {
	NSLog(@"NSColor_blueComponent");
	return [THIS blueComponent];
}

void NSColor_getRed_green_blue_alpha (NSColor* THIS, float * red, float * green, float * blue, float * alpha) {
	NSLog(@"NSColor_getRed_green_blue_alpha");
	[THIS getRed:red green:green blue:blue alpha:alpha];
}

float NSColor_hueComponent (NSColor* THIS) {
	NSLog(@"NSColor_hueComponent");
	return [THIS hueComponent];
}

float NSColor_saturationComponent (NSColor* THIS) {
	NSLog(@"NSColor_saturationComponent");
	return [THIS saturationComponent];
}

float NSColor_brightnessComponent (NSColor* THIS) {
	NSLog(@"NSColor_brightnessComponent");
	return [THIS brightnessComponent];
}

void NSColor_getHue_saturation_brightness_alpha (NSColor* THIS, float * hue, float * saturation, float * brightness, float * alpha) {
	NSLog(@"NSColor_getHue_saturation_brightness_alpha");
	[THIS getHue:hue saturation:saturation brightness:brightness alpha:alpha];
}

float NSColor_whiteComponent (NSColor* THIS) {
	NSLog(@"NSColor_whiteComponent");
	return [THIS whiteComponent];
}

void NSColor_getWhite_alpha (NSColor* THIS, float * white, float * alpha) {
	NSLog(@"NSColor_getWhite_alpha");
	[THIS getWhite:white alpha:alpha];
}

float NSColor_cyanComponent (NSColor* THIS) {
	NSLog(@"NSColor_cyanComponent");
	return [THIS cyanComponent];
}

float NSColor_magentaComponent (NSColor* THIS) {
	NSLog(@"NSColor_magentaComponent");
	return [THIS magentaComponent];
}

float NSColor_yellowComponent (NSColor* THIS) {
	NSLog(@"NSColor_yellowComponent");
	return [THIS yellowComponent];
}

float NSColor_blackComponent (NSColor* THIS) {
	NSLog(@"NSColor_blackComponent");
	return [THIS blackComponent];
}

void NSColor_getCyan_magenta_yellow_black_alpha (NSColor* THIS, float * cyan, float * magenta, float * yellow, float * black, float * alpha) {
	NSLog(@"NSColor_getCyan_magenta_yellow_black_alpha");
	[THIS getCyan:cyan magenta:magenta yellow:yellow black:black alpha:alpha];
}

float NSColor_alphaComponent (NSColor* THIS) {
	NSLog(@"NSColor_alphaComponent");
	return [THIS alphaComponent];
}

NSColor * NSColor$_colorFromPasteboard (NSPasteboard * pasteBoard) {
	NSLog(@"NSColor$_colorFromPasteboard");
	return [NSColor colorFromPasteboard:pasteBoard];
}

void NSColor_writeToPasteboard (NSColor* THIS, NSPasteboard * pasteBoard) {
	NSLog(@"NSColor_writeToPasteboard");
	[THIS writeToPasteboard:pasteBoard];
}

NSColor* NSColor$_colorWithPatternImage (NSImage* image) {
	NSLog(@"NSColor$_colorWithPatternImage");
	return [NSColor colorWithPatternImage:image];
}

NSImage* NSColor_patternImage (NSColor* THIS) {
	NSLog(@"NSColor_patternImage");
	return [THIS patternImage];
}

void NSColor_drawSwatchInRect (NSColor* THIS, NSRect rect) {
	NSLog(@"NSColor_drawSwatchInRect");
	[THIS drawSwatchInRect:rect];
}

void NSColor$_setIgnoresAlpha (BOOL flag) {
	NSLog(@"NSColor$_setIgnoresAlpha");
	[NSColor setIgnoresAlpha:flag];
}

BOOL NSColor$_ignoresAlpha () {
	NSLog(@"NSColor$_ignoresAlpha");
	return [NSColor ignoresAlpha];
}

NSColor * NSColor_decodeNXColor (NSColor* THIS) {
	NSLog(@"NSColor_decodeNXColor");
	return [THIS decodeNXColor];
}

NSColor * NSColor_alloc(){
	NSLog(@"NSColor_alloc()");
	return [ NSColor alloc ];
}