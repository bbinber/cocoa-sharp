/* Generated by genstubs.pl
 (c) 2004 kangaroo
*/

#include <Cocoa/Cocoa.h>

#include <AppKit/NSControl.h>

Class NSBrowser_cellClass (NSBrowser* THIS) {
	NSLog(@"NSBrowser_cellClass");
	return [THIS cellClass];
}
void NSBrowser_loadColumnZero (NSBrowser* THIS) {
	NSLog(@"NSBrowser_loadColumnZero");
	[THIS loadColumnZero];
}
BOOL NSBrowser_isLoaded (NSBrowser* THIS) {
	NSLog(@"NSBrowser_isLoaded");
	return [THIS isLoaded];
}
void NSBrowser_setDoubleAction (NSBrowser* THIS, SEL aSelector) {
	NSLog(@"NSBrowser_setDoubleAction");
	[THIS setDoubleAction:aSelector];
}

SEL NSBrowser_doubleAction (NSBrowser* THIS) {
	NSLog(@"NSBrowser_doubleAction");
	return [THIS doubleAction];
}
void NSBrowser_setMatrixClass (NSBrowser* THIS, Class factoryId) {
	NSLog(@"NSBrowser_setMatrixClass");
	[THIS setMatrixClass:factoryId];
}

Class NSBrowser_matrixClass (NSBrowser* THIS) {
	NSLog(@"NSBrowser_matrixClass");
	return [THIS matrixClass];
}
void NSBrowser_setCellClass (NSBrowser* THIS, Class factoryId) {
	NSLog(@"NSBrowser_setCellClass");
	[THIS setCellClass:factoryId];
}

void NSBrowser_setCellPrototype (NSBrowser* THIS, NSCell * aCell) {
	NSLog(@"NSBrowser_setCellPrototype");
	[THIS setCellPrototype:aCell];
}

NSBrowser * NSBrowser_cellPrototype (NSBrowser* THIS) {
	NSLog(@"NSBrowser_cellPrototype");
	return [THIS cellPrototype];
}
void NSBrowser_setDelegate (NSBrowser* THIS, NSBrowser * anObject) {
	NSLog(@"NSBrowser_setDelegate");
	[THIS setDelegate:anObject];
}

NSBrowser * NSBrowser_delegate (NSBrowser* THIS) {
	NSLog(@"NSBrowser_delegate");
	return [THIS delegate];
}
void NSBrowser_setReusesColumns (NSBrowser* THIS, BOOL flag) {
	NSLog(@"NSBrowser_setReusesColumns");
	[THIS setReusesColumns:flag];
}

BOOL NSBrowser_reusesColumns (NSBrowser* THIS) {
	NSLog(@"NSBrowser_reusesColumns");
	return [THIS reusesColumns];
}
void NSBrowser_setHasHorizontalScroller (NSBrowser* THIS, BOOL flag) {
	NSLog(@"NSBrowser_setHasHorizontalScroller");
	[THIS setHasHorizontalScroller:flag];
}

BOOL NSBrowser_hasHorizontalScroller (NSBrowser* THIS) {
	NSLog(@"NSBrowser_hasHorizontalScroller");
	return [THIS hasHorizontalScroller];
}
void NSBrowser_setSeparatesColumns (NSBrowser* THIS, BOOL flag) {
	NSLog(@"NSBrowser_setSeparatesColumns");
	[THIS setSeparatesColumns:flag];
}

BOOL NSBrowser_separatesColumns (NSBrowser* THIS) {
	NSLog(@"NSBrowser_separatesColumns");
	return [THIS separatesColumns];
}
void NSBrowser_setTitled (NSBrowser* THIS, BOOL flag) {
	NSLog(@"NSBrowser_setTitled");
	[THIS setTitled:flag];
}

BOOL NSBrowser_isTitled (NSBrowser* THIS) {
	NSLog(@"NSBrowser_isTitled");
	return [THIS isTitled];
}
void NSBrowser_setMinColumnWidth (NSBrowser* THIS, float columnWidth) {
	NSLog(@"NSBrowser_setMinColumnWidth");
	[THIS setMinColumnWidth:columnWidth];
}

float NSBrowser_minColumnWidth (NSBrowser* THIS) {
	NSLog(@"NSBrowser_minColumnWidth");
	return [THIS minColumnWidth];
}
void NSBrowser_setMaxVisibleColumns (NSBrowser* THIS, int columnCount) {
	NSLog(@"NSBrowser_setMaxVisibleColumns");
	[THIS setMaxVisibleColumns:columnCount];
}

int NSBrowser_maxVisibleColumns (NSBrowser* THIS) {
	NSLog(@"NSBrowser_maxVisibleColumns");
	return [THIS maxVisibleColumns];
}
void NSBrowser_setAllowsMultipleSelection (NSBrowser* THIS, BOOL flag) {
	NSLog(@"NSBrowser_setAllowsMultipleSelection");
	[THIS setAllowsMultipleSelection:flag];
}

BOOL NSBrowser_allowsMultipleSelection (NSBrowser* THIS) {
	NSLog(@"NSBrowser_allowsMultipleSelection");
	return [THIS allowsMultipleSelection];
}
void NSBrowser_setAllowsBranchSelection (NSBrowser* THIS, BOOL flag) {
	NSLog(@"NSBrowser_setAllowsBranchSelection");
	[THIS setAllowsBranchSelection:flag];
}

BOOL NSBrowser_allowsBranchSelection (NSBrowser* THIS) {
	NSLog(@"NSBrowser_allowsBranchSelection");
	return [THIS allowsBranchSelection];
}
void NSBrowser_setAllowsEmptySelection (NSBrowser* THIS, BOOL flag) {
	NSLog(@"NSBrowser_setAllowsEmptySelection");
	[THIS setAllowsEmptySelection:flag];
}

BOOL NSBrowser_allowsEmptySelection (NSBrowser* THIS) {
	NSLog(@"NSBrowser_allowsEmptySelection");
	return [THIS allowsEmptySelection];
}
void NSBrowser_setTakesTitleFromPreviousColumn (NSBrowser* THIS, BOOL flag) {
	NSLog(@"NSBrowser_setTakesTitleFromPreviousColumn");
	[THIS setTakesTitleFromPreviousColumn:flag];
}

BOOL NSBrowser_takesTitleFromPreviousColumn (NSBrowser* THIS) {
	NSLog(@"NSBrowser_takesTitleFromPreviousColumn");
	return [THIS takesTitleFromPreviousColumn];
}
void NSBrowser_setAcceptsArrowKeys (NSBrowser* THIS, BOOL flag) {
	NSLog(@"NSBrowser_setAcceptsArrowKeys");
	[THIS setAcceptsArrowKeys:flag];
}

BOOL NSBrowser_acceptsArrowKeys (NSBrowser* THIS) {
	NSLog(@"NSBrowser_acceptsArrowKeys");
	return [THIS acceptsArrowKeys];
}
void NSBrowser_setSendsActionOnArrowKeys (NSBrowser* THIS, BOOL flag) {
	NSLog(@"NSBrowser_setSendsActionOnArrowKeys");
	[THIS setSendsActionOnArrowKeys:flag];
}

BOOL NSBrowser_sendsActionOnArrowKeys (NSBrowser* THIS) {
	NSLog(@"NSBrowser_sendsActionOnArrowKeys");
	return [THIS sendsActionOnArrowKeys];
}
void NSBrowser_setTitle_ofColumn (NSBrowser* THIS, NSString * aString, int column) {
	NSLog(@"NSBrowser_setTitle_ofColumn");
	[THIS setTitle:aString ofColumn:column];
}

NSString * NSBrowser_titleOfColumn (NSBrowser* THIS, int column) {
	NSLog(@"NSBrowser_titleOfColumn");
	return [THIS titleOfColumn:column];
}

void NSBrowser_setPathSeparator (NSBrowser* THIS, NSString * newString) {
	NSLog(@"NSBrowser_setPathSeparator");
	[THIS setPathSeparator:newString];
}

NSString * NSBrowser_pathSeparator (NSBrowser* THIS) {
	NSLog(@"NSBrowser_pathSeparator");
	return [THIS pathSeparator];
}
BOOL NSBrowser_setPath (NSBrowser* THIS, NSString * path) {
	NSLog(@"NSBrowser_setPath");
	return [THIS setPath:path];
}

NSString * NSBrowser_path (NSBrowser* THIS) {
	NSLog(@"NSBrowser_path");
	return [THIS path];
}
NSString * NSBrowser_pathToColumn (NSBrowser* THIS, int column) {
	NSLog(@"NSBrowser_pathToColumn");
	return [THIS pathToColumn:column];
}

int NSBrowser_selectedColumn (NSBrowser* THIS) {
	NSLog(@"NSBrowser_selectedColumn");
	return [THIS selectedColumn];
}
NSBrowser * NSBrowser_selectedCell (NSBrowser* THIS) {
	NSLog(@"NSBrowser_selectedCell");
	return [THIS selectedCell];
}
NSBrowser * NSBrowser_selectedCellInColumn (NSBrowser* THIS, int column) {
	NSLog(@"NSBrowser_selectedCellInColumn");
	return [THIS selectedCellInColumn:column];
}

NSArray * NSBrowser_selectedCells (NSBrowser* THIS) {
	NSLog(@"NSBrowser_selectedCells");
	return [THIS selectedCells];
}
void NSBrowser_selectRow_inColumn (NSBrowser* THIS, int row, int column) {
	NSLog(@"NSBrowser_selectRow_inColumn");
	[THIS selectRow:row inColumn:column];
}

int NSBrowser_selectedRowInColumn (NSBrowser* THIS, int column) {
	NSLog(@"NSBrowser_selectedRowInColumn");
	return [THIS selectedRowInColumn:column];
}

void NSBrowser_reloadColumn (NSBrowser* THIS, int column) {
	NSLog(@"NSBrowser_reloadColumn");
	[THIS reloadColumn:column];
}

void NSBrowser_validateVisibleColumns (NSBrowser* THIS) {
	NSLog(@"NSBrowser_validateVisibleColumns");
	[THIS validateVisibleColumns];
}
void NSBrowser_scrollColumnsRightBy (NSBrowser* THIS, int shiftAmount) {
	NSLog(@"NSBrowser_scrollColumnsRightBy");
	[THIS scrollColumnsRightBy:shiftAmount];
}

void NSBrowser_scrollColumnsLeftBy (NSBrowser* THIS, int shiftAmount) {
	NSLog(@"NSBrowser_scrollColumnsLeftBy");
	[THIS scrollColumnsLeftBy:shiftAmount];
}

void NSBrowser_scrollColumnToVisible (NSBrowser* THIS, int column) {
	NSLog(@"NSBrowser_scrollColumnToVisible");
	[THIS scrollColumnToVisible:column];
}

void NSBrowser_setLastColumn (NSBrowser* THIS, int column) {
	NSLog(@"NSBrowser_setLastColumn");
	[THIS setLastColumn:column];
}

int NSBrowser_lastColumn (NSBrowser* THIS) {
	NSLog(@"NSBrowser_lastColumn");
	return [THIS lastColumn];
}
void NSBrowser_addColumn (NSBrowser* THIS) {
	NSLog(@"NSBrowser_addColumn");
	[THIS addColumn];
}
int NSBrowser_numberOfVisibleColumns (NSBrowser* THIS) {
	NSLog(@"NSBrowser_numberOfVisibleColumns");
	return [THIS numberOfVisibleColumns];
}
int NSBrowser_firstVisibleColumn (NSBrowser* THIS) {
	NSLog(@"NSBrowser_firstVisibleColumn");
	return [THIS firstVisibleColumn];
}
int NSBrowser_lastVisibleColumn (NSBrowser* THIS) {
	NSLog(@"NSBrowser_lastVisibleColumn");
	return [THIS lastVisibleColumn];
}
int NSBrowser_columnOfMatrix (NSBrowser* THIS, NSMatrix * matrix) {
	NSLog(@"NSBrowser_columnOfMatrix");
	return [THIS columnOfMatrix:matrix];
}

NSMatrix * NSBrowser_matrixInColumn (NSBrowser* THIS, int column) {
	NSLog(@"NSBrowser_matrixInColumn");
	return [THIS matrixInColumn:column];
}

NSBrowser * NSBrowser_loadedCellAtRow_column (NSBrowser* THIS, int row, int col) {
	NSLog(@"NSBrowser_loadedCellAtRow_column");
	return [THIS loadedCellAtRow:row column:col];
}

void NSBrowser_selectAll (NSBrowser* THIS, NSBrowser * sender) {
	NSLog(@"NSBrowser_selectAll");
	[THIS selectAll:sender];
}

void NSBrowser_tile (NSBrowser* THIS) {
	NSLog(@"NSBrowser_tile");
	[THIS tile];
}
void NSBrowser_doClick (NSBrowser* THIS, NSBrowser * sender) {
	NSLog(@"NSBrowser_doClick");
	[THIS doClick:sender];
}

void NSBrowser_doDoubleClick (NSBrowser* THIS, NSBrowser * sender) {
	NSLog(@"NSBrowser_doDoubleClick");
	[THIS doDoubleClick:sender];
}

BOOL NSBrowser_sendAction (NSBrowser* THIS) {
	NSLog(@"NSBrowser_sendAction");
	return [THIS sendAction];
}
NSRect NSBrowser_titleFrameOfColumn (NSBrowser* THIS, int column) {
	NSLog(@"NSBrowser_titleFrameOfColumn");
	return [THIS titleFrameOfColumn:column];
}

void NSBrowser_drawTitleOfColumn_inRect (NSBrowser* THIS, int column, NSRect aRect) {
	NSLog(@"NSBrowser_drawTitleOfColumn_inRect");
	[THIS drawTitleOfColumn:column inRect:aRect];
}

float NSBrowser_titleHeight (NSBrowser* THIS) {
	NSLog(@"NSBrowser_titleHeight");
	return [THIS titleHeight];
}
NSRect NSBrowser_frameOfColumn (NSBrowser* THIS, int column) {
	NSLog(@"NSBrowser_frameOfColumn");
	return [THIS frameOfColumn:column];
}

NSRect NSBrowser_frameOfInsideOfColumn (NSBrowser* THIS, int column) {
	NSLog(@"NSBrowser_frameOfInsideOfColumn");
	return [THIS frameOfInsideOfColumn:column];
}

float NSBrowser_columnWidthForColumnContentWidth (NSBrowser* THIS, float columnContentWidth) {
	NSLog(@"NSBrowser_columnWidthForColumnContentWidth");
	return [THIS columnWidthForColumnContentWidth:columnContentWidth];
}

float NSBrowser_columnContentWidthForColumnWidth (NSBrowser* THIS, float columnWidth) {
	NSLog(@"NSBrowser_columnContentWidthForColumnWidth");
	return [THIS columnContentWidthForColumnWidth:columnWidth];
}

void NSBrowser_setColumnResizingType (NSBrowser* THIS, NSBrowserColumnResizingType columnResizingType) {
	NSLog(@"NSBrowser_setColumnResizingType");
	[THIS setColumnResizingType:columnResizingType];
}

NSBrowserColumnResizingType NSBrowser_columnResizingType (NSBrowser* THIS) {
	NSLog(@"NSBrowser_columnResizingType");
	return [THIS columnResizingType];
}
void NSBrowser_setPrefersAllColumnUserResizing (NSBrowser* THIS, BOOL prefersAllColumnResizing) {
	NSLog(@"NSBrowser_setPrefersAllColumnUserResizing");
	[THIS setPrefersAllColumnUserResizing:prefersAllColumnResizing];
}

BOOL NSBrowser_prefersAllColumnUserResizing (NSBrowser* THIS) {
	NSLog(@"NSBrowser_prefersAllColumnUserResizing");
	return [THIS prefersAllColumnUserResizing];
}
void NSBrowser_setWidth_ofColumn (NSBrowser* THIS, float columnWidth, int columnIndex) {
	NSLog(@"NSBrowser_setWidth_ofColumn");
	[THIS setWidth:columnWidth ofColumn:columnIndex];
}

float NSBrowser_widthOfColumn (NSBrowser* THIS, int column) {
	NSLog(@"NSBrowser_widthOfColumn");
	return [THIS widthOfColumn:column];
}

void NSBrowser_setColumnsAutosaveName (NSBrowser* THIS, NSString * name) {
	NSLog(@"NSBrowser_setColumnsAutosaveName");
	[THIS setColumnsAutosaveName:name];
}

NSString * NSBrowser_columnsAutosaveName (NSBrowser* THIS) {
	NSLog(@"NSBrowser_columnsAutosaveName");
	return [THIS columnsAutosaveName];
}
void NSBrowser_removeSavedColumnsWithAutosaveName (NSBrowser* THIS, NSString * name) {
	NSLog(@"NSBrowser_removeSavedColumnsWithAutosaveName");
	[THIS removeSavedColumnsWithAutosaveName:name];
}

void NSBrowser_displayColumn (NSBrowser* THIS, int column) {
	NSLog(@"NSBrowser_displayColumn");
	[THIS displayColumn:column];
}

void NSBrowser_displayAllColumns (NSBrowser* THIS) {
	NSLog(@"NSBrowser_displayAllColumns");
	[THIS displayAllColumns];
}
void NSBrowser_scrollViaScroller (NSBrowser* THIS, NSScroller * sender) {
	NSLog(@"NSBrowser_scrollViaScroller");
	[THIS scrollViaScroller:sender];
}

void NSBrowser_updateScroller (NSBrowser* THIS) {
	NSLog(@"NSBrowser_updateScroller");
	[THIS updateScroller];
}
int NSBrowser_browser_numberOfRowsInColumn (NSBrowser* THIS, NSBrowser * sender, int column) {
	NSLog(@"NSBrowser_browser_numberOfRowsInColumn");
	return [THIS browser:sender numberOfRowsInColumn:column];
}

void NSBrowser_browser_createRowsForColumn_inMatrix (NSBrowser* THIS, NSBrowser * sender, int column, NSMatrix * matrix) {
	NSLog(@"NSBrowser_browser_createRowsForColumn_inMatrix");
	[THIS browser:sender createRowsForColumn:column inMatrix:matrix];
}

void NSBrowser_browser_willDisplayCell_atRow_column (NSBrowser* THIS, NSBrowser * sender, NSBrowser * cell, int row, int column) {
	NSLog(@"NSBrowser_browser_willDisplayCell_atRow_column");
	[THIS browser:sender willDisplayCell:cell atRow:row column:column];
}

NSString * NSBrowser_browser_titleOfColumn (NSBrowser* THIS, NSBrowser * sender, int column) {
	NSLog(@"NSBrowser_browser_titleOfColumn");
	return [THIS browser:sender titleOfColumn:column];
}

BOOL NSBrowser_browser_selectCellWithString_inColumn (NSBrowser* THIS, NSBrowser * sender, NSString * title, int column) {
	NSLog(@"NSBrowser_browser_selectCellWithString_inColumn");
	return [THIS browser:sender selectCellWithString:title inColumn:column];
}

BOOL NSBrowser_browser_selectRow_inColumn (NSBrowser* THIS, NSBrowser * sender, int row, int column) {
	NSLog(@"NSBrowser_browser_selectRow_inColumn");
	return [THIS browser:sender selectRow:row inColumn:column];
}

BOOL NSBrowser_browser_isColumnValid (NSBrowser* THIS, NSBrowser * sender, int column) {
	NSLog(@"NSBrowser_browser_isColumnValid");
	return [THIS browser:sender isColumnValid:column];
}

void NSBrowser_browserWillScroll (NSBrowser* THIS, NSBrowser * sender) {
	NSLog(@"NSBrowser_browserWillScroll");
	[THIS browserWillScroll:sender];
}

void NSBrowser_browserDidScroll (NSBrowser* THIS, NSBrowser * sender) {
	NSLog(@"NSBrowser_browserDidScroll");
	[THIS browserDidScroll:sender];
}

float NSBrowser_browser_shouldSizeColumn_forUserResize_toWidth (NSBrowser* THIS, NSBrowser * browser, int columnIndex, BOOL forUserResize, float suggestedWidth) {
	NSLog(@"NSBrowser_browser_shouldSizeColumn_forUserResize_toWidth");
	return [THIS browser:browser shouldSizeColumn:columnIndex forUserResize:forUserResize toWidth:suggestedWidth];
}

float NSBrowser_browser_sizeToFitWidthOfColumn (NSBrowser* THIS, NSBrowser * browser, int columnIndex) {
	NSLog(@"NSBrowser_browser_sizeToFitWidthOfColumn");
	return [THIS browser:browser sizeToFitWidthOfColumn:columnIndex];
}

void NSBrowser_browserColumnConfigurationDidChange (NSBrowser* THIS, NSNotification * notification) {
	NSLog(@"NSBrowser_browserColumnConfigurationDidChange");
	[THIS browserColumnConfigurationDidChange:notification];
}

NSBrowser * NSBrowser_alloc() {
	NSLog(@"NSBrowser_alloc()");
	return [NSBrowser alloc];
}
