/* Generated by genstubs.pl
 (c) 2004 kangaroo
*/

#include <Cocoa/Cocoa.h>

#include <CoreFoundation/CFDate.h>

#include <CoreFoundation/CFRunLoop.h>

#include <Foundation/NSObject.h>

#include <Foundation/NSGeometry.h>

#include <AppKit/AppKitDefines.h>

#include <AppKit/NSResponder.h>

#include <AppKit/NSWindow.h>

NSDrawer * NSDrawer_initWithContentSize_preferredEdge (NSDrawer* THIS, NSSize contentSize, NSRectEdge edge) {
	NSLog(@"NSDrawer_initWithContentSize_preferredEdge");
	return [THIS initWithContentSize:contentSize preferredEdge:edge];
}

void NSDrawer_setParentWindow (NSDrawer* THIS, NSWindow * parent) {
	NSLog(@"NSDrawer_setParentWindow");
	[THIS setParentWindow:parent];
}

NSWindow * NSDrawer_parentWindow (NSDrawer* THIS) {
	NSLog(@"NSDrawer_parentWindow");
	return [THIS parentWindow];
}
void NSDrawer_setContentView (NSDrawer* THIS, NSView * aView) {
	NSLog(@"NSDrawer_setContentView");
	[THIS setContentView:aView];
}

NSView * NSDrawer_contentView (NSDrawer* THIS) {
	NSLog(@"NSDrawer_contentView");
	return [THIS contentView];
}
void NSDrawer_setPreferredEdge (NSDrawer* THIS, NSRectEdge edge) {
	NSLog(@"NSDrawer_setPreferredEdge");
	[THIS setPreferredEdge:edge];
}

NSRectEdge NSDrawer_preferredEdge (NSDrawer* THIS) {
	NSLog(@"NSDrawer_preferredEdge");
	return [THIS preferredEdge];
}
void NSDrawer_setDelegate (NSDrawer* THIS, NSDrawer * anObject) {
	NSLog(@"NSDrawer_setDelegate");
	[THIS setDelegate:anObject];
}

NSDrawer * NSDrawer_delegate (NSDrawer* THIS) {
	NSLog(@"NSDrawer_delegate");
	return [THIS delegate];
}
void NSDrawer_open (NSDrawer* THIS) {
	NSLog(@"NSDrawer_open");
	[THIS open];
}
void NSDrawer_openOnEdge (NSDrawer* THIS, NSRectEdge edge) {
	NSLog(@"NSDrawer_openOnEdge");
	[THIS openOnEdge:edge];
}

void NSDrawer_close (NSDrawer* THIS) {
	NSLog(@"NSDrawer_close");
	[THIS close];
}
void NSDrawer_open (NSDrawer* THIS, NSDrawer * sender) {
	NSLog(@"NSDrawer_open");
	[THIS open:sender];
}

void NSDrawer_close (NSDrawer* THIS, NSDrawer * sender) {
	NSLog(@"NSDrawer_close");
	[THIS close:sender];
}

void NSDrawer_toggle (NSDrawer* THIS, NSDrawer * sender) {
	NSLog(@"NSDrawer_toggle");
	[THIS toggle:sender];
}

int NSDrawer_state (NSDrawer* THIS) {
	NSLog(@"NSDrawer_state");
	return [THIS state];
}
NSRectEdge NSDrawer_edge (NSDrawer* THIS) {
	NSLog(@"NSDrawer_edge");
	return [THIS edge];
}
void NSDrawer_setContentSize (NSDrawer* THIS, NSSize size) {
	NSLog(@"NSDrawer_setContentSize");
	[THIS setContentSize:size];
}

NSSize NSDrawer_contentSize (NSDrawer* THIS) {
	NSLog(@"NSDrawer_contentSize");
	return [THIS contentSize];
}
void NSDrawer_setMinContentSize (NSDrawer* THIS, NSSize size) {
	NSLog(@"NSDrawer_setMinContentSize");
	[THIS setMinContentSize:size];
}

NSSize NSDrawer_minContentSize (NSDrawer* THIS) {
	NSLog(@"NSDrawer_minContentSize");
	return [THIS minContentSize];
}
void NSDrawer_setMaxContentSize (NSDrawer* THIS, NSSize size) {
	NSLog(@"NSDrawer_setMaxContentSize");
	[THIS setMaxContentSize:size];
}

NSSize NSDrawer_maxContentSize (NSDrawer* THIS) {
	NSLog(@"NSDrawer_maxContentSize");
	return [THIS maxContentSize];
}
void NSDrawer_setLeadingOffset (NSDrawer* THIS, float offset) {
	NSLog(@"NSDrawer_setLeadingOffset");
	[THIS setLeadingOffset:offset];
}

float NSDrawer_leadingOffset (NSDrawer* THIS) {
	NSLog(@"NSDrawer_leadingOffset");
	return [THIS leadingOffset];
}
void NSDrawer_setTrailingOffset (NSDrawer* THIS, float offset) {
	NSLog(@"NSDrawer_setTrailingOffset");
	[THIS setTrailingOffset:offset];
}

float NSDrawer_trailingOffset (NSDrawer* THIS) {
	NSLog(@"NSDrawer_trailingOffset");
	return [THIS trailingOffset];
}
NSArray * NSDrawer_drawers (NSDrawer* THIS) {
	NSLog(@"NSDrawer_drawers");
	return [THIS drawers];
}
void NSDrawer_drawerWillOpen (NSDrawer* THIS, NSNotification * notification) {
	NSLog(@"NSDrawer_drawerWillOpen");
	[THIS drawerWillOpen:notification];
}

void NSDrawer_drawerDidOpen (NSDrawer* THIS, NSNotification * notification) {
	NSLog(@"NSDrawer_drawerDidOpen");
	[THIS drawerDidOpen:notification];
}

void NSDrawer_drawerWillClose (NSDrawer* THIS, NSNotification * notification) {
	NSLog(@"NSDrawer_drawerWillClose");
	[THIS drawerWillClose:notification];
}

void NSDrawer_drawerDidClose (NSDrawer* THIS, NSNotification * notification) {
	NSLog(@"NSDrawer_drawerDidClose");
	[THIS drawerDidClose:notification];
}

BOOL NSDrawer_drawerShouldOpen (NSDrawer* THIS, NSDrawer * sender) {
	NSLog(@"NSDrawer_drawerShouldOpen");
	return [THIS drawerShouldOpen:sender];
}

BOOL NSDrawer_drawerShouldClose (NSDrawer* THIS, NSDrawer * sender) {
	NSLog(@"NSDrawer_drawerShouldClose");
	return [THIS drawerShouldClose:sender];
}

NSSize NSDrawer_drawerWillResizeContents_toSize (NSDrawer* THIS, NSDrawer * sender, NSSize contentSize) {
	NSLog(@"NSDrawer_drawerWillResizeContents_toSize");
	return [THIS drawerWillResizeContents:sender toSize:contentSize];
}

NSDrawer * NSDrawer_alloc() {
	NSLog(@"NSDrawer_alloc()");
	return [NSDrawer alloc];
}
